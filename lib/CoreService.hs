{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module CoreService where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
import qualified CoreDatabase
import qualified Session
import qualified Transaction
 
data GraknCore request
     response = GraknCore{graknCoreDatabasesContains ::
                          request 'HsGRPC.Normal
                            CoreDatabase.CoreDatabaseManager_Contains_Req
                            CoreDatabase.CoreDatabaseManager_Contains_Res
                            ->
                            Hs.IO
                              (response 'HsGRPC.Normal
                                 CoreDatabase.CoreDatabaseManager_Contains_Res),
                          graknCoreDatabasesCreate ::
                          request 'HsGRPC.Normal CoreDatabase.CoreDatabaseManager_Create_Req
                            CoreDatabase.CoreDatabaseManager_Create_Res
                            ->
                            Hs.IO
                              (response 'HsGRPC.Normal
                                 CoreDatabase.CoreDatabaseManager_Create_Res),
                          graknCoreDatabasesAll ::
                          request 'HsGRPC.Normal CoreDatabase.CoreDatabaseManager_All_Req
                            CoreDatabase.CoreDatabaseManager_All_Res
                            ->
                            Hs.IO
                              (response 'HsGRPC.Normal CoreDatabase.CoreDatabaseManager_All_Res),
                          graknCoreDatabaseSchema ::
                          request 'HsGRPC.Normal CoreDatabase.CoreDatabase_Schema_Req
                            CoreDatabase.CoreDatabase_Schema_Res
                            ->
                            Hs.IO
                              (response 'HsGRPC.Normal CoreDatabase.CoreDatabase_Schema_Res),
                          graknCoreDatabaseDelete ::
                          request 'HsGRPC.Normal CoreDatabase.CoreDatabase_Delete_Req
                            CoreDatabase.CoreDatabase_Delete_Res
                            ->
                            Hs.IO
                              (response 'HsGRPC.Normal CoreDatabase.CoreDatabase_Delete_Res),
                          graknCoreSessionOpen ::
                          request 'HsGRPC.Normal Session.Session_Open_Req
                            Session.Session_Open_Res
                            -> Hs.IO (response 'HsGRPC.Normal Session.Session_Open_Res),
                          graknCoreSessionClose ::
                          request 'HsGRPC.Normal Session.Session_Close_Req
                            Session.Session_Close_Res
                            -> Hs.IO (response 'HsGRPC.Normal Session.Session_Close_Res),
                          graknCoreSessionPulse ::
                          request 'HsGRPC.Normal Session.Session_Pulse_Req
                            Session.Session_Pulse_Res
                            -> Hs.IO (response 'HsGRPC.Normal Session.Session_Pulse_Res),
                          graknCoreTransaction ::
                          request 'HsGRPC.BiDiStreaming Transaction.Transaction_Client
                            Transaction.Transaction_Server
                            ->
                            Hs.IO
                              (response 'HsGRPC.BiDiStreaming Transaction.Transaction_Server)}
              deriving Hs.Generic
 
graknCoreServer ::
                  GraknCore HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                    HsGRPC.ServiceOptions -> Hs.IO ()
graknCoreServer
  GraknCore{graknCoreDatabasesContains = graknCoreDatabasesContains,
            graknCoreDatabasesCreate = graknCoreDatabasesCreate,
            graknCoreDatabasesAll = graknCoreDatabasesAll,
            graknCoreDatabaseSchema = graknCoreDatabaseSchema,
            graknCoreDatabaseDelete = graknCoreDatabaseDelete,
            graknCoreSessionOpen = graknCoreSessionOpen,
            graknCoreSessionClose = graknCoreSessionClose,
            graknCoreSessionPulse = graknCoreSessionPulse,
            graknCoreTransaction = graknCoreTransaction}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger
     serverMaxReceiveMessageLength)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName
                                      "/grakn.protocol.GraknCore/databases_contains")
                                   (HsGRPC.convertGeneratedServerHandler
                                      graknCoreDatabasesContains)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/grakn.protocol.GraknCore/databases_create")
                                   (HsGRPC.convertGeneratedServerHandler graknCoreDatabasesCreate)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/grakn.protocol.GraknCore/databases_all")
                                   (HsGRPC.convertGeneratedServerHandler graknCoreDatabasesAll)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/grakn.protocol.GraknCore/database_schema")
                                   (HsGRPC.convertGeneratedServerHandler graknCoreDatabaseSchema)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/grakn.protocol.GraknCore/database_delete")
                                   (HsGRPC.convertGeneratedServerHandler graknCoreDatabaseDelete)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/grakn.protocol.GraknCore/session_open")
                                   (HsGRPC.convertGeneratedServerHandler graknCoreSessionOpen)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/grakn.protocol.GraknCore/session_close")
                                   (HsGRPC.convertGeneratedServerHandler graknCoreSessionClose)),
                                (HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/grakn.protocol.GraknCore/session_pulse")
                                   (HsGRPC.convertGeneratedServerHandler graknCoreSessionPulse))],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers = [],
                             HsGRPC.optBiDiStreamHandlers =
                               [(HsGRPC.BiDiStreamHandler
                                   (HsGRPC.MethodName "/grakn.protocol.GraknCore/transaction")
                                   (HsGRPC.convertGeneratedServerRWHandler graknCoreTransaction))],
                             optServerHost = serverHost, optServerPort = serverPort,
                             optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger,
                             optMaxReceiveMessageLength = serverMaxReceiveMessageLength})
 
graknCoreClient ::
                  HsGRPC.Client ->
                    Hs.IO (GraknCore HsGRPC.ClientRequest HsGRPC.ClientResult)
graknCoreClient client
  = (Hs.pure GraknCore) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName
               "/grakn.protocol.GraknCore/databases_contains")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/grakn.protocol.GraknCore/databases_create")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/grakn.protocol.GraknCore/databases_all")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/grakn.protocol.GraknCore/database_schema")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/grakn.protocol.GraknCore/database_delete")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/grakn.protocol.GraknCore/session_open")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/grakn.protocol.GraknCore/session_close")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/grakn.protocol.GraknCore/session_pulse")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/grakn.protocol.GraknCore/transaction")))