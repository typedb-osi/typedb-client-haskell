{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Concept where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data ConceptManager = ConceptManager{}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager where
        nameOf _ = (Hs.fromString "ConceptManager")
 
instance HsProtobuf.HasDefault ConceptManager
 
instance HsProtobuf.Message ConceptManager where
        encodeMessage _ ConceptManager{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ConceptManager)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ConceptManager where
        toJSONPB (ConceptManager) = (HsJSONPB.object [])
        toEncodingPB (ConceptManager) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ConceptManager where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager"
               (\ obj -> (Hs.pure ConceptManager)))
 
instance HsJSONPB.ToJSON ConceptManager where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype ConceptManager_Req = ConceptManager_Req{conceptManager_ReqReq
                                                :: Hs.Maybe ConceptManager_ReqReq}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_Req where
        nameOf _ = (Hs.fromString "ConceptManager_Req")
 
instance HsProtobuf.HasDefault ConceptManager_Req
 
instance HsProtobuf.Message ConceptManager_Req where
        encodeMessage _
          ConceptManager_Req{conceptManager_ReqReq = conceptManager_ReqReq}
          = (Hs.mconcat
               [case conceptManager_ReqReq of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ConceptManager_ReqReqGetThingTypeReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Concept.ConceptManager_GetThingType_Req)
                                        @(HsProtobuf.Nested Concept.ConceptManager_GetThingType_Req)
                                        (Hs.Just y)))
                             ConceptManager_ReqReqGetThingReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Concept.ConceptManager_GetThing_Req)
                                        @(HsProtobuf.Nested Concept.ConceptManager_GetThing_Req)
                                        (Hs.Just y)))
                             ConceptManager_ReqReqPutEntityTypeReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Concept.ConceptManager_PutEntityType_Req)
                                        @(HsProtobuf.Nested Concept.ConceptManager_PutEntityType_Req)
                                        (Hs.Just y)))
                             ConceptManager_ReqReqPutAttributeTypeReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce
                                        @(Hs.Maybe Concept.ConceptManager_PutAttributeType_Req)
                                        @(HsProtobuf.Nested Concept.ConceptManager_PutAttributeType_Req)
                                        (Hs.Just y)))
                             ConceptManager_ReqReqPutRelationTypeReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (Hs.coerce
                                        @(Hs.Maybe Concept.ConceptManager_PutRelationType_Req)
                                        @(HsProtobuf.Nested Concept.ConceptManager_PutRelationType_Req)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure ConceptManager_Req) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap ConceptManager_ReqReqGetThingTypeReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ConceptManager_GetThingType_Req))
                        @(_ (Hs.Maybe Concept.ConceptManager_GetThingType_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap ConceptManager_ReqReqGetThingReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ConceptManager_GetThing_Req))
                        @(_ (Hs.Maybe Concept.ConceptManager_GetThing_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap ConceptManager_ReqReqPutEntityTypeReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ConceptManager_PutEntityType_Req))
                        @(_ (Hs.Maybe Concept.ConceptManager_PutEntityType_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap ConceptManager_ReqReqPutAttributeTypeReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ConceptManager_PutAttributeType_Req))
                        @(_ (Hs.Maybe Concept.ConceptManager_PutAttributeType_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 5),
                   (Hs.pure (Hs.fmap ConceptManager_ReqReqPutRelationTypeReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ConceptManager_PutRelationType_Req))
                        @(_ (Hs.Maybe Concept.ConceptManager_PutRelationType_Req))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ConceptManager_Req where
        toJSONPB (ConceptManager_Req f1_or_f2_or_f3_or_f4_or_f5)
          = (HsJSONPB.object
               [(let encodeReq
                       = (case f1_or_f2_or_f3_or_f4_or_f5 of
                              Hs.Just (ConceptManager_ReqReqGetThingTypeReq f1)
                                -> (HsJSONPB.pair "get_thing_type_req" f1)
                              Hs.Just (ConceptManager_ReqReqGetThingReq f2)
                                -> (HsJSONPB.pair "get_thing_req" f2)
                              Hs.Just (ConceptManager_ReqReqPutEntityTypeReq f3)
                                -> (HsJSONPB.pair "put_entity_type_req" f3)
                              Hs.Just (ConceptManager_ReqReqPutAttributeTypeReq f4)
                                -> (HsJSONPB.pair "put_attribute_type_req" f4)
                              Hs.Just (ConceptManager_ReqReqPutRelationTypeReq f5)
                                -> (HsJSONPB.pair "put_relation_type_req" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.objectOrNull [encodeReq] options)) options else
                       encodeReq options)])
        toEncodingPB (ConceptManager_Req f1_or_f2_or_f3_or_f4_or_f5)
          = (HsJSONPB.pairs
               [(let encodeReq
                       = (case f1_or_f2_or_f3_or_f4_or_f5 of
                              Hs.Just (ConceptManager_ReqReqGetThingTypeReq f1)
                                -> (HsJSONPB.pair "get_thing_type_req" f1)
                              Hs.Just (ConceptManager_ReqReqGetThingReq f2)
                                -> (HsJSONPB.pair "get_thing_req" f2)
                              Hs.Just (ConceptManager_ReqReqPutEntityTypeReq f3)
                                -> (HsJSONPB.pair "put_entity_type_req" f3)
                              Hs.Just (ConceptManager_ReqReqPutAttributeTypeReq f4)
                                -> (HsJSONPB.pair "put_attribute_type_req" f4)
                              Hs.Just (ConceptManager_ReqReqPutRelationTypeReq f5)
                                -> (HsJSONPB.pair "put_relation_type_req" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.pairsOrNull [encodeReq] options)) options else
                       encodeReq options)])
 
instance HsJSONPB.FromJSONPB ConceptManager_Req where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_Req"
               (\ obj ->
                  (Hs.pure ConceptManager_Req) <*>
                    (let parseReq parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ConceptManager_ReqReqGetThingTypeReq <$>
                                  (HsJSONPB.parseField parseObj "get_thing_type_req"),
                                Hs.Just Hs.. ConceptManager_ReqReqGetThingReq <$>
                                  (HsJSONPB.parseField parseObj "get_thing_req"),
                                Hs.Just Hs.. ConceptManager_ReqReqPutEntityTypeReq <$>
                                  (HsJSONPB.parseField parseObj "put_entity_type_req"),
                                Hs.Just Hs.. ConceptManager_ReqReqPutAttributeTypeReq <$>
                                  (HsJSONPB.parseField parseObj "put_attribute_type_req"),
                                Hs.Just Hs.. ConceptManager_ReqReqPutRelationTypeReq <$>
                                  (HsJSONPB.parseField parseObj "put_relation_type_req"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "req") Hs.>>= (HsJSONPB.withObject "req" parseReq)) <|>
                         (parseReq obj))))
 
instance HsJSONPB.ToJSON ConceptManager_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_Req where
        declareNamedSchema _
          = do let declare_req = HsJSONPB.declareSchemaRef
               conceptManager_ReqReq <- declare_req Proxy.Proxy
               let _ = Hs.pure ConceptManager_Req <*> HsJSONPB.asProxy declare_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("req", conceptManager_ReqReq)]}})
 
data ConceptManager_ReqReq = ConceptManager_ReqReqGetThingTypeReq Concept.ConceptManager_GetThingType_Req
                           | ConceptManager_ReqReqGetThingReq Concept.ConceptManager_GetThing_Req
                           | ConceptManager_ReqReqPutEntityTypeReq Concept.ConceptManager_PutEntityType_Req
                           | ConceptManager_ReqReqPutAttributeTypeReq Concept.ConceptManager_PutAttributeType_Req
                           | ConceptManager_ReqReqPutRelationTypeReq Concept.ConceptManager_PutRelationType_Req
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_ReqReq where
        nameOf _ = (Hs.fromString "ConceptManager_ReqReq")
 
instance HsJSONPB.ToSchema ConceptManager_ReqReq where
        declareNamedSchema _
          = do let declare_get_thing_type_req = HsJSONPB.declareSchemaRef
               conceptManager_ReqReqGetThingTypeReq <- declare_get_thing_type_req
                                                         Proxy.Proxy
               let _ = Hs.pure ConceptManager_ReqReqGetThingTypeReq <*>
                         HsJSONPB.asProxy declare_get_thing_type_req
               let declare_get_thing_req = HsJSONPB.declareSchemaRef
               conceptManager_ReqReqGetThingReq <- declare_get_thing_req
                                                     Proxy.Proxy
               let _ = Hs.pure ConceptManager_ReqReqGetThingReq <*>
                         HsJSONPB.asProxy declare_get_thing_req
               let declare_put_entity_type_req = HsJSONPB.declareSchemaRef
               conceptManager_ReqReqPutEntityTypeReq <- declare_put_entity_type_req
                                                          Proxy.Proxy
               let _ = Hs.pure ConceptManager_ReqReqPutEntityTypeReq <*>
                         HsJSONPB.asProxy declare_put_entity_type_req
               let declare_put_attribute_type_req = HsJSONPB.declareSchemaRef
               conceptManager_ReqReqPutAttributeTypeReq <- declare_put_attribute_type_req
                                                             Proxy.Proxy
               let _ = Hs.pure ConceptManager_ReqReqPutAttributeTypeReq <*>
                         HsJSONPB.asProxy declare_put_attribute_type_req
               let declare_put_relation_type_req = HsJSONPB.declareSchemaRef
               conceptManager_ReqReqPutRelationTypeReq <- declare_put_relation_type_req
                                                            Proxy.Proxy
               let _ = Hs.pure ConceptManager_ReqReqPutRelationTypeReq <*>
                         HsJSONPB.asProxy declare_put_relation_type_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_ReqReq",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("get_thing_type_req",
                                                         conceptManager_ReqReqGetThingTypeReq),
                                                        ("get_thing_req",
                                                         conceptManager_ReqReqGetThingReq),
                                                        ("put_entity_type_req",
                                                         conceptManager_ReqReqPutEntityTypeReq),
                                                        ("put_attribute_type_req",
                                                         conceptManager_ReqReqPutAttributeTypeReq),
                                                        ("put_relation_type_req",
                                                         conceptManager_ReqReqPutRelationTypeReq)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype ConceptManager_Res = ConceptManager_Res{conceptManager_ResRes
                                                :: Hs.Maybe ConceptManager_ResRes}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_Res where
        nameOf _ = (Hs.fromString "ConceptManager_Res")
 
instance HsProtobuf.HasDefault ConceptManager_Res
 
instance HsProtobuf.Message ConceptManager_Res where
        encodeMessage _
          ConceptManager_Res{conceptManager_ResRes = conceptManager_ResRes}
          = (Hs.mconcat
               [case conceptManager_ResRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ConceptManager_ResResGetThingTypeRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Concept.ConceptManager_GetThingType_Res)
                                        @(HsProtobuf.Nested Concept.ConceptManager_GetThingType_Res)
                                        (Hs.Just y)))
                             ConceptManager_ResResGetThingRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Concept.ConceptManager_GetThing_Res)
                                        @(HsProtobuf.Nested Concept.ConceptManager_GetThing_Res)
                                        (Hs.Just y)))
                             ConceptManager_ResResPutEntityTypeRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Concept.ConceptManager_PutEntityType_Res)
                                        @(HsProtobuf.Nested Concept.ConceptManager_PutEntityType_Res)
                                        (Hs.Just y)))
                             ConceptManager_ResResPutAttributeTypeRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce
                                        @(Hs.Maybe Concept.ConceptManager_PutAttributeType_Res)
                                        @(HsProtobuf.Nested Concept.ConceptManager_PutAttributeType_Res)
                                        (Hs.Just y)))
                             ConceptManager_ResResPutRelationTypeRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (Hs.coerce
                                        @(Hs.Maybe Concept.ConceptManager_PutRelationType_Res)
                                        @(HsProtobuf.Nested Concept.ConceptManager_PutRelationType_Res)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure ConceptManager_Res) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap ConceptManager_ResResGetThingTypeRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ConceptManager_GetThingType_Res))
                        @(_ (Hs.Maybe Concept.ConceptManager_GetThingType_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap ConceptManager_ResResGetThingRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ConceptManager_GetThing_Res))
                        @(_ (Hs.Maybe Concept.ConceptManager_GetThing_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap ConceptManager_ResResPutEntityTypeRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ConceptManager_PutEntityType_Res))
                        @(_ (Hs.Maybe Concept.ConceptManager_PutEntityType_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap ConceptManager_ResResPutAttributeTypeRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ConceptManager_PutAttributeType_Res))
                        @(_ (Hs.Maybe Concept.ConceptManager_PutAttributeType_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 5),
                   (Hs.pure (Hs.fmap ConceptManager_ResResPutRelationTypeRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ConceptManager_PutRelationType_Res))
                        @(_ (Hs.Maybe Concept.ConceptManager_PutRelationType_Res))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ConceptManager_Res where
        toJSONPB (ConceptManager_Res f1_or_f2_or_f3_or_f4_or_f5)
          = (HsJSONPB.object
               [(let encodeRes
                       = (case f1_or_f2_or_f3_or_f4_or_f5 of
                              Hs.Just (ConceptManager_ResResGetThingTypeRes f1)
                                -> (HsJSONPB.pair "get_thing_type_res" f1)
                              Hs.Just (ConceptManager_ResResGetThingRes f2)
                                -> (HsJSONPB.pair "get_thing_res" f2)
                              Hs.Just (ConceptManager_ResResPutEntityTypeRes f3)
                                -> (HsJSONPB.pair "put_entity_type_res" f3)
                              Hs.Just (ConceptManager_ResResPutAttributeTypeRes f4)
                                -> (HsJSONPB.pair "put_attribute_type_res" f4)
                              Hs.Just (ConceptManager_ResResPutRelationTypeRes f5)
                                -> (HsJSONPB.pair "put_relation_type_res" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB (ConceptManager_Res f1_or_f2_or_f3_or_f4_or_f5)
          = (HsJSONPB.pairs
               [(let encodeRes
                       = (case f1_or_f2_or_f3_or_f4_or_f5 of
                              Hs.Just (ConceptManager_ResResGetThingTypeRes f1)
                                -> (HsJSONPB.pair "get_thing_type_res" f1)
                              Hs.Just (ConceptManager_ResResGetThingRes f2)
                                -> (HsJSONPB.pair "get_thing_res" f2)
                              Hs.Just (ConceptManager_ResResPutEntityTypeRes f3)
                                -> (HsJSONPB.pair "put_entity_type_res" f3)
                              Hs.Just (ConceptManager_ResResPutAttributeTypeRes f4)
                                -> (HsJSONPB.pair "put_attribute_type_res" f4)
                              Hs.Just (ConceptManager_ResResPutRelationTypeRes f5)
                                -> (HsJSONPB.pair "put_relation_type_res" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB ConceptManager_Res where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_Res"
               (\ obj ->
                  (Hs.pure ConceptManager_Res) <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ConceptManager_ResResGetThingTypeRes <$>
                                  (HsJSONPB.parseField parseObj "get_thing_type_res"),
                                Hs.Just Hs.. ConceptManager_ResResGetThingRes <$>
                                  (HsJSONPB.parseField parseObj "get_thing_res"),
                                Hs.Just Hs.. ConceptManager_ResResPutEntityTypeRes <$>
                                  (HsJSONPB.parseField parseObj "put_entity_type_res"),
                                Hs.Just Hs.. ConceptManager_ResResPutAttributeTypeRes <$>
                                  (HsJSONPB.parseField parseObj "put_attribute_type_res"),
                                Hs.Just Hs.. ConceptManager_ResResPutRelationTypeRes <$>
                                  (HsJSONPB.parseField parseObj "put_relation_type_res"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON ConceptManager_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_Res where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               conceptManager_ResRes <- declare_res Proxy.Proxy
               let _ = Hs.pure ConceptManager_Res <*> HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res", conceptManager_ResRes)]}})
 
data ConceptManager_ResRes = ConceptManager_ResResGetThingTypeRes Concept.ConceptManager_GetThingType_Res
                           | ConceptManager_ResResGetThingRes Concept.ConceptManager_GetThing_Res
                           | ConceptManager_ResResPutEntityTypeRes Concept.ConceptManager_PutEntityType_Res
                           | ConceptManager_ResResPutAttributeTypeRes Concept.ConceptManager_PutAttributeType_Res
                           | ConceptManager_ResResPutRelationTypeRes Concept.ConceptManager_PutRelationType_Res
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_ResRes where
        nameOf _ = (Hs.fromString "ConceptManager_ResRes")
 
instance HsJSONPB.ToSchema ConceptManager_ResRes where
        declareNamedSchema _
          = do let declare_get_thing_type_res = HsJSONPB.declareSchemaRef
               conceptManager_ResResGetThingTypeRes <- declare_get_thing_type_res
                                                         Proxy.Proxy
               let _ = Hs.pure ConceptManager_ResResGetThingTypeRes <*>
                         HsJSONPB.asProxy declare_get_thing_type_res
               let declare_get_thing_res = HsJSONPB.declareSchemaRef
               conceptManager_ResResGetThingRes <- declare_get_thing_res
                                                     Proxy.Proxy
               let _ = Hs.pure ConceptManager_ResResGetThingRes <*>
                         HsJSONPB.asProxy declare_get_thing_res
               let declare_put_entity_type_res = HsJSONPB.declareSchemaRef
               conceptManager_ResResPutEntityTypeRes <- declare_put_entity_type_res
                                                          Proxy.Proxy
               let _ = Hs.pure ConceptManager_ResResPutEntityTypeRes <*>
                         HsJSONPB.asProxy declare_put_entity_type_res
               let declare_put_attribute_type_res = HsJSONPB.declareSchemaRef
               conceptManager_ResResPutAttributeTypeRes <- declare_put_attribute_type_res
                                                             Proxy.Proxy
               let _ = Hs.pure ConceptManager_ResResPutAttributeTypeRes <*>
                         HsJSONPB.asProxy declare_put_attribute_type_res
               let declare_put_relation_type_res = HsJSONPB.declareSchemaRef
               conceptManager_ResResPutRelationTypeRes <- declare_put_relation_type_res
                                                            Proxy.Proxy
               let _ = Hs.pure ConceptManager_ResResPutRelationTypeRes <*>
                         HsJSONPB.asProxy declare_put_relation_type_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_ResRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("get_thing_type_res",
                                                         conceptManager_ResResGetThingTypeRes),
                                                        ("get_thing_res",
                                                         conceptManager_ResResGetThingRes),
                                                        ("put_entity_type_res",
                                                         conceptManager_ResResPutEntityTypeRes),
                                                        ("put_attribute_type_res",
                                                         conceptManager_ResResPutAttributeTypeRes),
                                                        ("put_relation_type_res",
                                                         conceptManager_ResResPutRelationTypeRes)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data ConceptManager_GetThingType = ConceptManager_GetThingType{}
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_GetThingType where
        nameOf _ = (Hs.fromString "ConceptManager_GetThingType")
 
instance HsProtobuf.HasDefault ConceptManager_GetThingType
 
instance HsProtobuf.Message ConceptManager_GetThingType where
        encodeMessage _ ConceptManager_GetThingType{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ConceptManager_GetThingType)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ConceptManager_GetThingType where
        toJSONPB (ConceptManager_GetThingType) = (HsJSONPB.object [])
        toEncodingPB (ConceptManager_GetThingType) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ConceptManager_GetThingType where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_GetThingType"
               (\ obj -> (Hs.pure ConceptManager_GetThingType)))
 
instance HsJSONPB.ToJSON ConceptManager_GetThingType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_GetThingType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_GetThingType where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_GetThingType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype ConceptManager_GetThingType_Req = ConceptManager_GetThingType_Req{conceptManager_GetThingType_ReqLabel
                                                                          :: Hs.Text}
                                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_GetThingType_Req where
        nameOf _ = (Hs.fromString "ConceptManager_GetThingType_Req")
 
instance HsProtobuf.HasDefault ConceptManager_GetThingType_Req
 
instance HsProtobuf.Message ConceptManager_GetThingType_Req where
        encodeMessage _
          ConceptManager_GetThingType_Req{conceptManager_GetThingType_ReqLabel
                                            = conceptManager_GetThingType_ReqLabel}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   conceptManager_GetThingType_ReqLabel)])
        decodeMessage _
          = (Hs.pure ConceptManager_GetThingType_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ConceptManager_GetThingType_Req where
        toJSONPB (ConceptManager_GetThingType_Req f1)
          = (HsJSONPB.object ["label" .= f1])
        toEncodingPB (ConceptManager_GetThingType_Req f1)
          = (HsJSONPB.pairs ["label" .= f1])
 
instance HsJSONPB.FromJSONPB ConceptManager_GetThingType_Req where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_GetThingType_Req"
               (\ obj ->
                  (Hs.pure ConceptManager_GetThingType_Req) <*> obj .: "label"))
 
instance HsJSONPB.ToJSON ConceptManager_GetThingType_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_GetThingType_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_GetThingType_Req where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               conceptManager_GetThingType_ReqLabel <- declare_label Proxy.Proxy
               let _ = Hs.pure ConceptManager_GetThingType_Req <*>
                         HsJSONPB.asProxy declare_label
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_GetThingType_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label",
                                                         conceptManager_GetThingType_ReqLabel)]}})
 
newtype ConceptManager_GetThingType_Res = ConceptManager_GetThingType_Res{conceptManager_GetThingType_ResRes
                                                                          ::
                                                                          Hs.Maybe
                                                                            ConceptManager_GetThingType_ResRes}
                                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_GetThingType_Res where
        nameOf _ = (Hs.fromString "ConceptManager_GetThingType_Res")
 
instance HsProtobuf.HasDefault ConceptManager_GetThingType_Res
 
instance HsProtobuf.Message ConceptManager_GetThingType_Res where
        encodeMessage _
          ConceptManager_GetThingType_Res{conceptManager_GetThingType_ResRes
                                            = conceptManager_GetThingType_ResRes}
          = (Hs.mconcat
               [case conceptManager_GetThingType_ResRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ConceptManager_GetThingType_ResResThingType y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Concept.Type)
                                        @(HsProtobuf.Nested Concept.Type)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure ConceptManager_GetThingType_Res) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap ConceptManager_GetThingType_ResResThingType)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                        @(_ (Hs.Maybe Concept.Type))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ConceptManager_GetThingType_Res where
        toJSONPB (ConceptManager_GetThingType_Res f1)
          = (HsJSONPB.object
               [(let encodeRes
                       = (case f1 of
                              Hs.Just (ConceptManager_GetThingType_ResResThingType f1)
                                -> (HsJSONPB.pair "thing_type" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB (ConceptManager_GetThingType_Res f1)
          = (HsJSONPB.pairs
               [(let encodeRes
                       = (case f1 of
                              Hs.Just (ConceptManager_GetThingType_ResResThingType f1)
                                -> (HsJSONPB.pair "thing_type" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB ConceptManager_GetThingType_Res where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_GetThingType_Res"
               (\ obj ->
                  (Hs.pure ConceptManager_GetThingType_Res) <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ConceptManager_GetThingType_ResResThingType <$>
                                  (HsJSONPB.parseField parseObj "thing_type"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON ConceptManager_GetThingType_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_GetThingType_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_GetThingType_Res where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               conceptManager_GetThingType_ResRes <- declare_res Proxy.Proxy
               let _ = Hs.pure ConceptManager_GetThingType_Res <*>
                         HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_GetThingType_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res",
                                                         conceptManager_GetThingType_ResRes)]}})
 
data ConceptManager_GetThingType_ResRes = ConceptManager_GetThingType_ResResThingType Concept.Type
                                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_GetThingType_ResRes where
        nameOf _ = (Hs.fromString "ConceptManager_GetThingType_ResRes")
 
instance HsJSONPB.ToSchema ConceptManager_GetThingType_ResRes where
        declareNamedSchema _
          = do let declare_thing_type = HsJSONPB.declareSchemaRef
               conceptManager_GetThingType_ResResThingType <- declare_thing_type
                                                                Proxy.Proxy
               let _ = Hs.pure ConceptManager_GetThingType_ResResThingType <*>
                         HsJSONPB.asProxy declare_thing_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_GetThingType_ResRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("thing_type",
                                                         conceptManager_GetThingType_ResResThingType)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data ConceptManager_GetThing = ConceptManager_GetThing{}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_GetThing where
        nameOf _ = (Hs.fromString "ConceptManager_GetThing")
 
instance HsProtobuf.HasDefault ConceptManager_GetThing
 
instance HsProtobuf.Message ConceptManager_GetThing where
        encodeMessage _ ConceptManager_GetThing{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ConceptManager_GetThing)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ConceptManager_GetThing where
        toJSONPB (ConceptManager_GetThing) = (HsJSONPB.object [])
        toEncodingPB (ConceptManager_GetThing) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ConceptManager_GetThing where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_GetThing"
               (\ obj -> (Hs.pure ConceptManager_GetThing)))
 
instance HsJSONPB.ToJSON ConceptManager_GetThing where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_GetThing where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_GetThing where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_GetThing",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype ConceptManager_GetThing_Req = ConceptManager_GetThing_Req{conceptManager_GetThing_ReqIid
                                                                  :: Hs.ByteString}
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_GetThing_Req where
        nameOf _ = (Hs.fromString "ConceptManager_GetThing_Req")
 
instance HsProtobuf.HasDefault ConceptManager_GetThing_Req
 
instance HsProtobuf.Message ConceptManager_GetThing_Req where
        encodeMessage _
          ConceptManager_GetThing_Req{conceptManager_GetThing_ReqIid =
                                        conceptManager_GetThing_ReqIid}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   conceptManager_GetThing_ReqIid)])
        decodeMessage _
          = (Hs.pure ConceptManager_GetThing_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "iid")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ConceptManager_GetThing_Req where
        toJSONPB (ConceptManager_GetThing_Req f1)
          = (HsJSONPB.object ["iid" .= f1])
        toEncodingPB (ConceptManager_GetThing_Req f1)
          = (HsJSONPB.pairs ["iid" .= f1])
 
instance HsJSONPB.FromJSONPB ConceptManager_GetThing_Req where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_GetThing_Req"
               (\ obj -> (Hs.pure ConceptManager_GetThing_Req) <*> obj .: "iid"))
 
instance HsJSONPB.ToJSON ConceptManager_GetThing_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_GetThing_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_GetThing_Req where
        declareNamedSchema _
          = do let declare_iid = HsJSONPB.declareSchemaRef
               conceptManager_GetThing_ReqIid <- declare_iid Proxy.Proxy
               let _ = Hs.pure ConceptManager_GetThing_Req <*>
                         HsJSONPB.asProxy declare_iid
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_GetThing_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("iid", conceptManager_GetThing_ReqIid)]}})
 
newtype ConceptManager_GetThing_Res = ConceptManager_GetThing_Res{conceptManager_GetThing_ResRes
                                                                  ::
                                                                  Hs.Maybe
                                                                    ConceptManager_GetThing_ResRes}
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_GetThing_Res where
        nameOf _ = (Hs.fromString "ConceptManager_GetThing_Res")
 
instance HsProtobuf.HasDefault ConceptManager_GetThing_Res
 
instance HsProtobuf.Message ConceptManager_GetThing_Res where
        encodeMessage _
          ConceptManager_GetThing_Res{conceptManager_GetThing_ResRes =
                                        conceptManager_GetThing_ResRes}
          = (Hs.mconcat
               [case conceptManager_GetThing_ResRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ConceptManager_GetThing_ResResThing y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing)
                                        @(HsProtobuf.Nested Concept.Thing)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure ConceptManager_GetThing_Res) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap ConceptManager_GetThing_ResResThing)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing))
                        @(_ (Hs.Maybe Concept.Thing))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ConceptManager_GetThing_Res where
        toJSONPB (ConceptManager_GetThing_Res f1)
          = (HsJSONPB.object
               [(let encodeRes
                       = (case f1 of
                              Hs.Just (ConceptManager_GetThing_ResResThing f1)
                                -> (HsJSONPB.pair "thing" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB (ConceptManager_GetThing_Res f1)
          = (HsJSONPB.pairs
               [(let encodeRes
                       = (case f1 of
                              Hs.Just (ConceptManager_GetThing_ResResThing f1)
                                -> (HsJSONPB.pair "thing" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB ConceptManager_GetThing_Res where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_GetThing_Res"
               (\ obj ->
                  (Hs.pure ConceptManager_GetThing_Res) <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ConceptManager_GetThing_ResResThing <$>
                                  (HsJSONPB.parseField parseObj "thing"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON ConceptManager_GetThing_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_GetThing_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_GetThing_Res where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               conceptManager_GetThing_ResRes <- declare_res Proxy.Proxy
               let _ = Hs.pure ConceptManager_GetThing_Res <*>
                         HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_GetThing_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res", conceptManager_GetThing_ResRes)]}})
 
data ConceptManager_GetThing_ResRes = ConceptManager_GetThing_ResResThing Concept.Thing
                                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_GetThing_ResRes where
        nameOf _ = (Hs.fromString "ConceptManager_GetThing_ResRes")
 
instance HsJSONPB.ToSchema ConceptManager_GetThing_ResRes where
        declareNamedSchema _
          = do let declare_thing = HsJSONPB.declareSchemaRef
               conceptManager_GetThing_ResResThing <- declare_thing Proxy.Proxy
               let _ = Hs.pure ConceptManager_GetThing_ResResThing <*>
                         HsJSONPB.asProxy declare_thing
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_GetThing_ResRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("thing",
                                                         conceptManager_GetThing_ResResThing)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data ConceptManager_PutEntityType = ConceptManager_PutEntityType{}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_PutEntityType where
        nameOf _ = (Hs.fromString "ConceptManager_PutEntityType")
 
instance HsProtobuf.HasDefault ConceptManager_PutEntityType
 
instance HsProtobuf.Message ConceptManager_PutEntityType where
        encodeMessage _ ConceptManager_PutEntityType{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ConceptManager_PutEntityType)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ConceptManager_PutEntityType where
        toJSONPB (ConceptManager_PutEntityType) = (HsJSONPB.object [])
        toEncodingPB (ConceptManager_PutEntityType) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ConceptManager_PutEntityType where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_PutEntityType"
               (\ obj -> (Hs.pure ConceptManager_PutEntityType)))
 
instance HsJSONPB.ToJSON ConceptManager_PutEntityType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_PutEntityType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_PutEntityType where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_PutEntityType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype ConceptManager_PutEntityType_Req = ConceptManager_PutEntityType_Req{conceptManager_PutEntityType_ReqLabel
                                                                            :: Hs.Text}
                                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_PutEntityType_Req where
        nameOf _ = (Hs.fromString "ConceptManager_PutEntityType_Req")
 
instance HsProtobuf.HasDefault ConceptManager_PutEntityType_Req
 
instance HsProtobuf.Message ConceptManager_PutEntityType_Req where
        encodeMessage _
          ConceptManager_PutEntityType_Req{conceptManager_PutEntityType_ReqLabel
                                             = conceptManager_PutEntityType_ReqLabel}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   conceptManager_PutEntityType_ReqLabel)])
        decodeMessage _
          = (Hs.pure ConceptManager_PutEntityType_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ConceptManager_PutEntityType_Req where
        toJSONPB (ConceptManager_PutEntityType_Req f1)
          = (HsJSONPB.object ["label" .= f1])
        toEncodingPB (ConceptManager_PutEntityType_Req f1)
          = (HsJSONPB.pairs ["label" .= f1])
 
instance HsJSONPB.FromJSONPB ConceptManager_PutEntityType_Req where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_PutEntityType_Req"
               (\ obj ->
                  (Hs.pure ConceptManager_PutEntityType_Req) <*> obj .: "label"))
 
instance HsJSONPB.ToJSON ConceptManager_PutEntityType_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_PutEntityType_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_PutEntityType_Req where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               conceptManager_PutEntityType_ReqLabel <- declare_label Proxy.Proxy
               let _ = Hs.pure ConceptManager_PutEntityType_Req <*>
                         HsJSONPB.asProxy declare_label
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_PutEntityType_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label",
                                                         conceptManager_PutEntityType_ReqLabel)]}})
 
newtype ConceptManager_PutEntityType_Res = ConceptManager_PutEntityType_Res{conceptManager_PutEntityType_ResEntityType
                                                                            ::
                                                                            Hs.Maybe Concept.Type}
                                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_PutEntityType_Res where
        nameOf _ = (Hs.fromString "ConceptManager_PutEntityType_Res")
 
instance HsProtobuf.HasDefault ConceptManager_PutEntityType_Res
 
instance HsProtobuf.Message ConceptManager_PutEntityType_Res where
        encodeMessage _
          ConceptManager_PutEntityType_Res{conceptManager_PutEntityType_ResEntityType
                                             = conceptManager_PutEntityType_ResEntityType}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Type)
                      @(HsProtobuf.Nested Concept.Type)
                      conceptManager_PutEntityType_ResEntityType))])
        decodeMessage _
          = (Hs.pure ConceptManager_PutEntityType_Res) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                 @(_ (Hs.Maybe Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "entity_type")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ConceptManager_PutEntityType_Res where
        toJSONPB (ConceptManager_PutEntityType_Res f1)
          = (HsJSONPB.object ["entity_type" .= f1])
        toEncodingPB (ConceptManager_PutEntityType_Res f1)
          = (HsJSONPB.pairs ["entity_type" .= f1])
 
instance HsJSONPB.FromJSONPB ConceptManager_PutEntityType_Res where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_PutEntityType_Res"
               (\ obj ->
                  (Hs.pure ConceptManager_PutEntityType_Res) <*>
                    obj .: "entity_type"))
 
instance HsJSONPB.ToJSON ConceptManager_PutEntityType_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_PutEntityType_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_PutEntityType_Res where
        declareNamedSchema _
          = do let declare_entity_type = HsJSONPB.declareSchemaRef
               conceptManager_PutEntityType_ResEntityType <- declare_entity_type
                                                               Proxy.Proxy
               let _ = Hs.pure ConceptManager_PutEntityType_Res <*>
                         HsJSONPB.asProxy declare_entity_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_PutEntityType_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("entity_type",
                                                         conceptManager_PutEntityType_ResEntityType)]}})
 
data ConceptManager_PutAttributeType = ConceptManager_PutAttributeType{}
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_PutAttributeType where
        nameOf _ = (Hs.fromString "ConceptManager_PutAttributeType")
 
instance HsProtobuf.HasDefault ConceptManager_PutAttributeType
 
instance HsProtobuf.Message ConceptManager_PutAttributeType where
        encodeMessage _ ConceptManager_PutAttributeType{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ConceptManager_PutAttributeType)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ConceptManager_PutAttributeType where
        toJSONPB (ConceptManager_PutAttributeType) = (HsJSONPB.object [])
        toEncodingPB (ConceptManager_PutAttributeType)
          = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ConceptManager_PutAttributeType where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_PutAttributeType"
               (\ obj -> (Hs.pure ConceptManager_PutAttributeType)))
 
instance HsJSONPB.ToJSON ConceptManager_PutAttributeType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_PutAttributeType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_PutAttributeType where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_PutAttributeType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ConceptManager_PutAttributeType_Req = ConceptManager_PutAttributeType_Req{conceptManager_PutAttributeType_ReqLabel
                                                                               :: Hs.Text,
                                                                               conceptManager_PutAttributeType_ReqValueType
                                                                               ::
                                                                               HsProtobuf.Enumerated
                                                                                 Concept.AttributeType_ValueType}
                                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_PutAttributeType_Req where
        nameOf _ = (Hs.fromString "ConceptManager_PutAttributeType_Req")
 
instance HsProtobuf.HasDefault ConceptManager_PutAttributeType_Req
 
instance HsProtobuf.Message ConceptManager_PutAttributeType_Req
         where
        encodeMessage _
          ConceptManager_PutAttributeType_Req{conceptManager_PutAttributeType_ReqLabel
                                                = conceptManager_PutAttributeType_ReqLabel,
                                              conceptManager_PutAttributeType_ReqValueType =
                                                conceptManager_PutAttributeType_ReqValueType}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   conceptManager_PutAttributeType_ReqLabel),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   conceptManager_PutAttributeType_ReqValueType)])
        decodeMessage _
          = (Hs.pure ConceptManager_PutAttributeType_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path ("AttributeType" Hs.:| ["ValueType"])))))
                (HsProtobuf.Single "value_type")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ConceptManager_PutAttributeType_Req
         where
        toJSONPB (ConceptManager_PutAttributeType_Req f1 f2)
          = (HsJSONPB.object ["label" .= f1, "value_type" .= f2])
        toEncodingPB (ConceptManager_PutAttributeType_Req f1 f2)
          = (HsJSONPB.pairs ["label" .= f1, "value_type" .= f2])
 
instance HsJSONPB.FromJSONPB ConceptManager_PutAttributeType_Req
         where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_PutAttributeType_Req"
               (\ obj ->
                  (Hs.pure ConceptManager_PutAttributeType_Req) <*> obj .: "label"
                    <*> obj .: "value_type"))
 
instance HsJSONPB.ToJSON ConceptManager_PutAttributeType_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_PutAttributeType_Req
         where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_PutAttributeType_Req
         where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               conceptManager_PutAttributeType_ReqLabel <- declare_label
                                                             Proxy.Proxy
               let declare_value_type = HsJSONPB.declareSchemaRef
               conceptManager_PutAttributeType_ReqValueType <- declare_value_type
                                                                 Proxy.Proxy
               let _ = Hs.pure ConceptManager_PutAttributeType_Req <*>
                         HsJSONPB.asProxy declare_label
                         <*> HsJSONPB.asProxy declare_value_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_PutAttributeType_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label",
                                                         conceptManager_PutAttributeType_ReqLabel),
                                                        ("value_type",
                                                         conceptManager_PutAttributeType_ReqValueType)]}})
 
newtype ConceptManager_PutAttributeType_Res = ConceptManager_PutAttributeType_Res{conceptManager_PutAttributeType_ResAttributeType
                                                                                  ::
                                                                                  Hs.Maybe
                                                                                    Concept.Type}
                                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                        Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_PutAttributeType_Res where
        nameOf _ = (Hs.fromString "ConceptManager_PutAttributeType_Res")
 
instance HsProtobuf.HasDefault ConceptManager_PutAttributeType_Res
 
instance HsProtobuf.Message ConceptManager_PutAttributeType_Res
         where
        encodeMessage _
          ConceptManager_PutAttributeType_Res{conceptManager_PutAttributeType_ResAttributeType
                                                = conceptManager_PutAttributeType_ResAttributeType}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Type)
                      @(HsProtobuf.Nested Concept.Type)
                      conceptManager_PutAttributeType_ResAttributeType))])
        decodeMessage _
          = (Hs.pure ConceptManager_PutAttributeType_Res) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                 @(_ (Hs.Maybe Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "attribute_type")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ConceptManager_PutAttributeType_Res
         where
        toJSONPB (ConceptManager_PutAttributeType_Res f1)
          = (HsJSONPB.object ["attribute_type" .= f1])
        toEncodingPB (ConceptManager_PutAttributeType_Res f1)
          = (HsJSONPB.pairs ["attribute_type" .= f1])
 
instance HsJSONPB.FromJSONPB ConceptManager_PutAttributeType_Res
         where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_PutAttributeType_Res"
               (\ obj ->
                  (Hs.pure ConceptManager_PutAttributeType_Res) <*>
                    obj .: "attribute_type"))
 
instance HsJSONPB.ToJSON ConceptManager_PutAttributeType_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_PutAttributeType_Res
         where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_PutAttributeType_Res
         where
        declareNamedSchema _
          = do let declare_attribute_type = HsJSONPB.declareSchemaRef
               conceptManager_PutAttributeType_ResAttributeType <- declare_attribute_type
                                                                     Proxy.Proxy
               let _ = Hs.pure ConceptManager_PutAttributeType_Res <*>
                         HsJSONPB.asProxy declare_attribute_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_PutAttributeType_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("attribute_type",
                                                         conceptManager_PutAttributeType_ResAttributeType)]}})
 
data ConceptManager_PutRelationType = ConceptManager_PutRelationType{}
                                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_PutRelationType where
        nameOf _ = (Hs.fromString "ConceptManager_PutRelationType")
 
instance HsProtobuf.HasDefault ConceptManager_PutRelationType
 
instance HsProtobuf.Message ConceptManager_PutRelationType where
        encodeMessage _ ConceptManager_PutRelationType{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ConceptManager_PutRelationType)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ConceptManager_PutRelationType where
        toJSONPB (ConceptManager_PutRelationType) = (HsJSONPB.object [])
        toEncodingPB (ConceptManager_PutRelationType) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ConceptManager_PutRelationType where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_PutRelationType"
               (\ obj -> (Hs.pure ConceptManager_PutRelationType)))
 
instance HsJSONPB.ToJSON ConceptManager_PutRelationType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_PutRelationType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_PutRelationType where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_PutRelationType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype ConceptManager_PutRelationType_Req = ConceptManager_PutRelationType_Req{conceptManager_PutRelationType_ReqLabel
                                                                                :: Hs.Text}
                                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                       Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_PutRelationType_Req where
        nameOf _ = (Hs.fromString "ConceptManager_PutRelationType_Req")
 
instance HsProtobuf.HasDefault ConceptManager_PutRelationType_Req
 
instance HsProtobuf.Message ConceptManager_PutRelationType_Req
         where
        encodeMessage _
          ConceptManager_PutRelationType_Req{conceptManager_PutRelationType_ReqLabel
                                               = conceptManager_PutRelationType_ReqLabel}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   conceptManager_PutRelationType_ReqLabel)])
        decodeMessage _
          = (Hs.pure ConceptManager_PutRelationType_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ConceptManager_PutRelationType_Req where
        toJSONPB (ConceptManager_PutRelationType_Req f1)
          = (HsJSONPB.object ["label" .= f1])
        toEncodingPB (ConceptManager_PutRelationType_Req f1)
          = (HsJSONPB.pairs ["label" .= f1])
 
instance HsJSONPB.FromJSONPB ConceptManager_PutRelationType_Req
         where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_PutRelationType_Req"
               (\ obj ->
                  (Hs.pure ConceptManager_PutRelationType_Req) <*> obj .: "label"))
 
instance HsJSONPB.ToJSON ConceptManager_PutRelationType_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_PutRelationType_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_PutRelationType_Req where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               conceptManager_PutRelationType_ReqLabel <- declare_label
                                                            Proxy.Proxy
               let _ = Hs.pure ConceptManager_PutRelationType_Req <*>
                         HsJSONPB.asProxy declare_label
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_PutRelationType_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label",
                                                         conceptManager_PutRelationType_ReqLabel)]}})
 
newtype ConceptManager_PutRelationType_Res = ConceptManager_PutRelationType_Res{conceptManager_PutRelationType_ResRelationType
                                                                                ::
                                                                                Hs.Maybe
                                                                                  Concept.Type}
                                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                       Hs.NFData)
 
instance HsProtobuf.Named ConceptManager_PutRelationType_Res where
        nameOf _ = (Hs.fromString "ConceptManager_PutRelationType_Res")
 
instance HsProtobuf.HasDefault ConceptManager_PutRelationType_Res
 
instance HsProtobuf.Message ConceptManager_PutRelationType_Res
         where
        encodeMessage _
          ConceptManager_PutRelationType_Res{conceptManager_PutRelationType_ResRelationType
                                               = conceptManager_PutRelationType_ResRelationType}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Type)
                      @(HsProtobuf.Nested Concept.Type)
                      conceptManager_PutRelationType_ResRelationType))])
        decodeMessage _
          = (Hs.pure ConceptManager_PutRelationType_Res) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                 @(_ (Hs.Maybe Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "relation_type")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ConceptManager_PutRelationType_Res where
        toJSONPB (ConceptManager_PutRelationType_Res f1)
          = (HsJSONPB.object ["relation_type" .= f1])
        toEncodingPB (ConceptManager_PutRelationType_Res f1)
          = (HsJSONPB.pairs ["relation_type" .= f1])
 
instance HsJSONPB.FromJSONPB ConceptManager_PutRelationType_Res
         where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptManager_PutRelationType_Res"
               (\ obj ->
                  (Hs.pure ConceptManager_PutRelationType_Res) <*>
                    obj .: "relation_type"))
 
instance HsJSONPB.ToJSON ConceptManager_PutRelationType_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptManager_PutRelationType_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptManager_PutRelationType_Res where
        declareNamedSchema _
          = do let declare_relation_type = HsJSONPB.declareSchemaRef
               conceptManager_PutRelationType_ResRelationType <- declare_relation_type
                                                                   Proxy.Proxy
               let _ = Hs.pure ConceptManager_PutRelationType_Res <*>
                         HsJSONPB.asProxy declare_relation_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptManager_PutRelationType_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("relation_type",
                                                         conceptManager_PutRelationType_ResRelationType)]}})
 
newtype Concept = Concept{conceptConcept ::
                          Hs.Maybe ConceptConcept}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Concept where
        nameOf _ = (Hs.fromString "Concept")
 
instance HsProtobuf.HasDefault Concept
 
instance HsProtobuf.Message Concept where
        encodeMessage _ Concept{conceptConcept = conceptConcept}
          = (Hs.mconcat
               [case conceptConcept of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ConceptConceptThing y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing)
                                        @(HsProtobuf.Nested Concept.Thing)
                                        (Hs.Just y)))
                             ConceptConceptType y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Concept.Type)
                                        @(HsProtobuf.Nested Concept.Type)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Concept) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap ConceptConceptThing)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing))
                        @(_ (Hs.Maybe Concept.Thing))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap ConceptConceptType)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                        @(_ (Hs.Maybe Concept.Type))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Concept where
        toJSONPB (Concept f1_or_f2)
          = (HsJSONPB.object
               [(let encodeConcept
                       = (case f1_or_f2 of
                              Hs.Just (ConceptConceptThing f1) -> (HsJSONPB.pair "thing" f1)
                              Hs.Just (ConceptConceptType f2) -> (HsJSONPB.pair "type" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("concept" .= (HsJSONPB.objectOrNull [encodeConcept] options))
                         options
                       else encodeConcept options)])
        toEncodingPB (Concept f1_or_f2)
          = (HsJSONPB.pairs
               [(let encodeConcept
                       = (case f1_or_f2 of
                              Hs.Just (ConceptConceptThing f1) -> (HsJSONPB.pair "thing" f1)
                              Hs.Just (ConceptConceptType f2) -> (HsJSONPB.pair "type" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("concept" .= (HsJSONPB.pairsOrNull [encodeConcept] options))
                         options
                       else encodeConcept options)])
 
instance HsJSONPB.FromJSONPB Concept where
        parseJSONPB
          = (HsJSONPB.withObject "Concept"
               (\ obj ->
                  (Hs.pure Concept) <*>
                    (let parseConcept parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ConceptConceptThing <$>
                                  (HsJSONPB.parseField parseObj "thing"),
                                Hs.Just Hs.. ConceptConceptType <$>
                                  (HsJSONPB.parseField parseObj "type"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "concept") Hs.>>=
                          (HsJSONPB.withObject "concept" parseConcept))
                         <|> (parseConcept obj))))
 
instance HsJSONPB.ToJSON Concept where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Concept where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Concept where
        declareNamedSchema _
          = do let declare_concept = HsJSONPB.declareSchemaRef
               conceptConcept <- declare_concept Proxy.Proxy
               let _ = Hs.pure Concept <*> HsJSONPB.asProxy declare_concept
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Concept",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("concept", conceptConcept)]}})
 
data ConceptConcept = ConceptConceptThing Concept.Thing
                    | ConceptConceptType Concept.Type
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptConcept where
        nameOf _ = (Hs.fromString "ConceptConcept")
 
instance HsJSONPB.ToSchema ConceptConcept where
        declareNamedSchema _
          = do let declare_thing = HsJSONPB.declareSchemaRef
               conceptConceptThing <- declare_thing Proxy.Proxy
               let _ = Hs.pure ConceptConceptThing <*>
                         HsJSONPB.asProxy declare_thing
               let declare_type = HsJSONPB.declareSchemaRef
               conceptConceptType <- declare_type Proxy.Proxy
               let _ = Hs.pure ConceptConceptType <*>
                         HsJSONPB.asProxy declare_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptConcept",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("thing", conceptConceptThing),
                                                        ("type", conceptConceptType)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data Thing = Thing{thingIid :: Hs.ByteString,
                   thingType :: Hs.Maybe Concept.Type,
                   thingValue :: Hs.Maybe Concept.Attribute_Value,
                   thingInferred :: Hs.Bool}
           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing where
        nameOf _ = (Hs.fromString "Thing")
 
instance HsProtobuf.HasDefault Thing
 
instance HsProtobuf.Message Thing where
        encodeMessage _
          Thing{thingIid = thingIid, thingType = thingType,
                thingValue = thingValue, thingInferred = thingInferred}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   thingIid),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Concept.Type)
                      @(HsProtobuf.Nested Concept.Type)
                      thingType)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Maybe Concept.Attribute_Value)
                      @(HsProtobuf.Nested Concept.Attribute_Value)
                      thingValue)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   thingInferred)])
        decodeMessage _
          = (Hs.pure Thing) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                 @(_ (Hs.Maybe Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Attribute_Value))
                 @(_ (Hs.Maybe Concept.Attribute_Value))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "iid")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots (HsProtobuf.Path ("Attribute" Hs.:| ["Value"])))))
                (HsProtobuf.Single "value")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "inferred")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Thing where
        toJSONPB (Thing f1 f2 f3 f4)
          = (HsJSONPB.object
               ["iid" .= f1, "type" .= f2, "value" .= f3, "inferred" .= f4])
        toEncodingPB (Thing f1 f2 f3 f4)
          = (HsJSONPB.pairs
               ["iid" .= f1, "type" .= f2, "value" .= f3, "inferred" .= f4])
 
instance HsJSONPB.FromJSONPB Thing where
        parseJSONPB
          = (HsJSONPB.withObject "Thing"
               (\ obj ->
                  (Hs.pure Thing) <*> obj .: "iid" <*> obj .: "type" <*>
                    obj .: "value"
                    <*> obj .: "inferred"))
 
instance HsJSONPB.ToJSON Thing where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing where
        declareNamedSchema _
          = do let declare_iid = HsJSONPB.declareSchemaRef
               thingIid <- declare_iid Proxy.Proxy
               let declare_type = HsJSONPB.declareSchemaRef
               thingType <- declare_type Proxy.Proxy
               let declare_value = HsJSONPB.declareSchemaRef
               thingValue <- declare_value Proxy.Proxy
               let declare_inferred = HsJSONPB.declareSchemaRef
               thingInferred <- declare_inferred Proxy.Proxy
               let _ = Hs.pure Thing <*> HsJSONPB.asProxy declare_iid <*>
                         HsJSONPB.asProxy declare_type
                         <*> HsJSONPB.asProxy declare_value
                         <*> HsJSONPB.asProxy declare_inferred
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Thing",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("iid", thingIid), ("type", thingType),
                                                        ("value", thingValue),
                                                        ("inferred", thingInferred)]}})
 
data Thing_Req = Thing_Req{thing_ReqIid :: Hs.ByteString,
                           thing_ReqReq :: Hs.Maybe Thing_ReqReq}
               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_Req where
        nameOf _ = (Hs.fromString "Thing_Req")
 
instance HsProtobuf.HasDefault Thing_Req
 
instance HsProtobuf.Message Thing_Req where
        encodeMessage _
          Thing_Req{thing_ReqIid = thing_ReqIid, thing_ReqReq = thing_ReqReq}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   thing_ReqIid),
                case thing_ReqReq of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Thing_ReqReqThingDeleteReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 100)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_Delete_Req)
                                        @(HsProtobuf.Nested Concept.Thing_Delete_Req)
                                        (Hs.Just y)))
                             Thing_ReqReqThingGetTypeReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 101)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_GetType_Req)
                                        @(HsProtobuf.Nested Concept.Thing_GetType_Req)
                                        (Hs.Just y)))
                             Thing_ReqReqThingGetHasReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 102)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_GetHas_Req)
                                        @(HsProtobuf.Nested Concept.Thing_GetHas_Req)
                                        (Hs.Just y)))
                             Thing_ReqReqThingSetHasReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 103)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_SetHas_Req)
                                        @(HsProtobuf.Nested Concept.Thing_SetHas_Req)
                                        (Hs.Just y)))
                             Thing_ReqReqThingUnsetHasReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 104)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_UnsetHas_Req)
                                        @(HsProtobuf.Nested Concept.Thing_UnsetHas_Req)
                                        (Hs.Just y)))
                             Thing_ReqReqThingGetRelationsReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 105)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_GetRelations_Req)
                                        @(HsProtobuf.Nested Concept.Thing_GetRelations_Req)
                                        (Hs.Just y)))
                             Thing_ReqReqThingGetPlayingReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 106)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_GetPlaying_Req)
                                        @(HsProtobuf.Nested Concept.Thing_GetPlaying_Req)
                                        (Hs.Just y)))
                             Thing_ReqReqRelationAddPlayerReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 200)
                                     (Hs.coerce @(Hs.Maybe Concept.Relation_AddPlayer_Req)
                                        @(HsProtobuf.Nested Concept.Relation_AddPlayer_Req)
                                        (Hs.Just y)))
                             Thing_ReqReqRelationRemovePlayerReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 201)
                                     (Hs.coerce @(Hs.Maybe Concept.Relation_RemovePlayer_Req)
                                        @(HsProtobuf.Nested Concept.Relation_RemovePlayer_Req)
                                        (Hs.Just y)))
                             Thing_ReqReqRelationGetPlayersReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 202)
                                     (Hs.coerce @(Hs.Maybe Concept.Relation_GetPlayers_Req)
                                        @(HsProtobuf.Nested Concept.Relation_GetPlayers_Req)
                                        (Hs.Just y)))
                             Thing_ReqReqRelationGetPlayersByRoleTypeReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 203)
                                     (Hs.coerce
                                        @(Hs.Maybe Concept.Relation_GetPlayersByRoleType_Req)
                                        @(HsProtobuf.Nested Concept.Relation_GetPlayersByRoleType_Req)
                                        (Hs.Just y)))
                             Thing_ReqReqRelationGetRelatingReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 204)
                                     (Hs.coerce @(Hs.Maybe Concept.Relation_GetRelating_Req)
                                        @(HsProtobuf.Nested Concept.Relation_GetRelating_Req)
                                        (Hs.Just y)))
                             Thing_ReqReqAttributeGetOwnersReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 300)
                                     (Hs.coerce @(Hs.Maybe Concept.Attribute_GetOwners_Req)
                                        @(HsProtobuf.Nested Concept.Attribute_GetOwners_Req)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Thing_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 100),
                   (Hs.pure (Hs.fmap Thing_ReqReqThingDeleteReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_Delete_Req))
                        @(_ (Hs.Maybe Concept.Thing_Delete_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 101),
                   (Hs.pure (Hs.fmap Thing_ReqReqThingGetTypeReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_GetType_Req))
                        @(_ (Hs.Maybe Concept.Thing_GetType_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 102),
                   (Hs.pure (Hs.fmap Thing_ReqReqThingGetHasReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_GetHas_Req))
                        @(_ (Hs.Maybe Concept.Thing_GetHas_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 103),
                   (Hs.pure (Hs.fmap Thing_ReqReqThingSetHasReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_SetHas_Req))
                        @(_ (Hs.Maybe Concept.Thing_SetHas_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 104),
                   (Hs.pure (Hs.fmap Thing_ReqReqThingUnsetHasReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_UnsetHas_Req))
                        @(_ (Hs.Maybe Concept.Thing_UnsetHas_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 105),
                   (Hs.pure (Hs.fmap Thing_ReqReqThingGetRelationsReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_GetRelations_Req))
                        @(_ (Hs.Maybe Concept.Thing_GetRelations_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 106),
                   (Hs.pure (Hs.fmap Thing_ReqReqThingGetPlayingReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_GetPlaying_Req))
                        @(_ (Hs.Maybe Concept.Thing_GetPlaying_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 200),
                   (Hs.pure (Hs.fmap Thing_ReqReqRelationAddPlayerReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Relation_AddPlayer_Req))
                        @(_ (Hs.Maybe Concept.Relation_AddPlayer_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 201),
                   (Hs.pure (Hs.fmap Thing_ReqReqRelationRemovePlayerReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.Relation_RemovePlayer_Req))
                        @(_ (Hs.Maybe Concept.Relation_RemovePlayer_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 202),
                   (Hs.pure (Hs.fmap Thing_ReqReqRelationGetPlayersReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Relation_GetPlayers_Req))
                        @(_ (Hs.Maybe Concept.Relation_GetPlayers_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 203),
                   (Hs.pure (Hs.fmap Thing_ReqReqRelationGetPlayersByRoleTypeReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.Relation_GetPlayersByRoleType_Req))
                        @(_ (Hs.Maybe Concept.Relation_GetPlayersByRoleType_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 204),
                   (Hs.pure (Hs.fmap Thing_ReqReqRelationGetRelatingReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.Relation_GetRelating_Req))
                        @(_ (Hs.Maybe Concept.Relation_GetRelating_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 300),
                   (Hs.pure (Hs.fmap Thing_ReqReqAttributeGetOwnersReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Attribute_GetOwners_Req))
                        @(_ (Hs.Maybe Concept.Attribute_GetOwners_Req))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "iid")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Thing_Req where
        toJSONPB
          (Thing_Req f1
             f100_or_f101_or_f102_or_f103_or_f104_or_f105_or_f106_or_f200_or_f201_or_f202_or_f203_or_f204_or_f300)
          = (HsJSONPB.object
               ["iid" .= f1,
                (let encodeReq
                       = (case
                            f100_or_f101_or_f102_or_f103_or_f104_or_f105_or_f106_or_f200_or_f201_or_f202_or_f203_or_f204_or_f300
                            of
                              Hs.Just (Thing_ReqReqThingDeleteReq f100)
                                -> (HsJSONPB.pair "thing_delete_req" f100)
                              Hs.Just (Thing_ReqReqThingGetTypeReq f101)
                                -> (HsJSONPB.pair "thing_get_type_req" f101)
                              Hs.Just (Thing_ReqReqThingGetHasReq f102)
                                -> (HsJSONPB.pair "thing_get_has_req" f102)
                              Hs.Just (Thing_ReqReqThingSetHasReq f103)
                                -> (HsJSONPB.pair "thing_set_has_req" f103)
                              Hs.Just (Thing_ReqReqThingUnsetHasReq f104)
                                -> (HsJSONPB.pair "thing_unset_has_req" f104)
                              Hs.Just (Thing_ReqReqThingGetRelationsReq f105)
                                -> (HsJSONPB.pair "thing_get_relations_req" f105)
                              Hs.Just (Thing_ReqReqThingGetPlayingReq f106)
                                -> (HsJSONPB.pair "thing_get_playing_req" f106)
                              Hs.Just (Thing_ReqReqRelationAddPlayerReq f200)
                                -> (HsJSONPB.pair "relation_add_player_req" f200)
                              Hs.Just (Thing_ReqReqRelationRemovePlayerReq f201)
                                -> (HsJSONPB.pair "relation_remove_player_req" f201)
                              Hs.Just (Thing_ReqReqRelationGetPlayersReq f202)
                                -> (HsJSONPB.pair "relation_get_players_req" f202)
                              Hs.Just (Thing_ReqReqRelationGetPlayersByRoleTypeReq f203)
                                -> (HsJSONPB.pair "relation_get_players_by_role_type_req" f203)
                              Hs.Just (Thing_ReqReqRelationGetRelatingReq f204)
                                -> (HsJSONPB.pair "relation_get_relating_req" f204)
                              Hs.Just (Thing_ReqReqAttributeGetOwnersReq f300)
                                -> (HsJSONPB.pair "attribute_get_owners_req" f300)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.objectOrNull [encodeReq] options)) options else
                       encodeReq options)])
        toEncodingPB
          (Thing_Req f1
             f100_or_f101_or_f102_or_f103_or_f104_or_f105_or_f106_or_f200_or_f201_or_f202_or_f203_or_f204_or_f300)
          = (HsJSONPB.pairs
               ["iid" .= f1,
                (let encodeReq
                       = (case
                            f100_or_f101_or_f102_or_f103_or_f104_or_f105_or_f106_or_f200_or_f201_or_f202_or_f203_or_f204_or_f300
                            of
                              Hs.Just (Thing_ReqReqThingDeleteReq f100)
                                -> (HsJSONPB.pair "thing_delete_req" f100)
                              Hs.Just (Thing_ReqReqThingGetTypeReq f101)
                                -> (HsJSONPB.pair "thing_get_type_req" f101)
                              Hs.Just (Thing_ReqReqThingGetHasReq f102)
                                -> (HsJSONPB.pair "thing_get_has_req" f102)
                              Hs.Just (Thing_ReqReqThingSetHasReq f103)
                                -> (HsJSONPB.pair "thing_set_has_req" f103)
                              Hs.Just (Thing_ReqReqThingUnsetHasReq f104)
                                -> (HsJSONPB.pair "thing_unset_has_req" f104)
                              Hs.Just (Thing_ReqReqThingGetRelationsReq f105)
                                -> (HsJSONPB.pair "thing_get_relations_req" f105)
                              Hs.Just (Thing_ReqReqThingGetPlayingReq f106)
                                -> (HsJSONPB.pair "thing_get_playing_req" f106)
                              Hs.Just (Thing_ReqReqRelationAddPlayerReq f200)
                                -> (HsJSONPB.pair "relation_add_player_req" f200)
                              Hs.Just (Thing_ReqReqRelationRemovePlayerReq f201)
                                -> (HsJSONPB.pair "relation_remove_player_req" f201)
                              Hs.Just (Thing_ReqReqRelationGetPlayersReq f202)
                                -> (HsJSONPB.pair "relation_get_players_req" f202)
                              Hs.Just (Thing_ReqReqRelationGetPlayersByRoleTypeReq f203)
                                -> (HsJSONPB.pair "relation_get_players_by_role_type_req" f203)
                              Hs.Just (Thing_ReqReqRelationGetRelatingReq f204)
                                -> (HsJSONPB.pair "relation_get_relating_req" f204)
                              Hs.Just (Thing_ReqReqAttributeGetOwnersReq f300)
                                -> (HsJSONPB.pair "attribute_get_owners_req" f300)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.pairsOrNull [encodeReq] options)) options else
                       encodeReq options)])
 
instance HsJSONPB.FromJSONPB Thing_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_Req"
               (\ obj ->
                  (Hs.pure Thing_Req) <*> obj .: "iid" <*>
                    (let parseReq parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Thing_ReqReqThingDeleteReq <$>
                                  (HsJSONPB.parseField parseObj "thing_delete_req"),
                                Hs.Just Hs.. Thing_ReqReqThingGetTypeReq <$>
                                  (HsJSONPB.parseField parseObj "thing_get_type_req"),
                                Hs.Just Hs.. Thing_ReqReqThingGetHasReq <$>
                                  (HsJSONPB.parseField parseObj "thing_get_has_req"),
                                Hs.Just Hs.. Thing_ReqReqThingSetHasReq <$>
                                  (HsJSONPB.parseField parseObj "thing_set_has_req"),
                                Hs.Just Hs.. Thing_ReqReqThingUnsetHasReq <$>
                                  (HsJSONPB.parseField parseObj "thing_unset_has_req"),
                                Hs.Just Hs.. Thing_ReqReqThingGetRelationsReq <$>
                                  (HsJSONPB.parseField parseObj "thing_get_relations_req"),
                                Hs.Just Hs.. Thing_ReqReqThingGetPlayingReq <$>
                                  (HsJSONPB.parseField parseObj "thing_get_playing_req"),
                                Hs.Just Hs.. Thing_ReqReqRelationAddPlayerReq <$>
                                  (HsJSONPB.parseField parseObj "relation_add_player_req"),
                                Hs.Just Hs.. Thing_ReqReqRelationRemovePlayerReq <$>
                                  (HsJSONPB.parseField parseObj "relation_remove_player_req"),
                                Hs.Just Hs.. Thing_ReqReqRelationGetPlayersReq <$>
                                  (HsJSONPB.parseField parseObj "relation_get_players_req"),
                                Hs.Just Hs.. Thing_ReqReqRelationGetPlayersByRoleTypeReq <$>
                                  (HsJSONPB.parseField parseObj
                                     "relation_get_players_by_role_type_req"),
                                Hs.Just Hs.. Thing_ReqReqRelationGetRelatingReq <$>
                                  (HsJSONPB.parseField parseObj "relation_get_relating_req"),
                                Hs.Just Hs.. Thing_ReqReqAttributeGetOwnersReq <$>
                                  (HsJSONPB.parseField parseObj "attribute_get_owners_req"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "req") Hs.>>= (HsJSONPB.withObject "req" parseReq)) <|>
                         (parseReq obj))))
 
instance HsJSONPB.ToJSON Thing_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_Req where
        declareNamedSchema _
          = do let declare_iid = HsJSONPB.declareSchemaRef
               thing_ReqIid <- declare_iid Proxy.Proxy
               let declare_req = HsJSONPB.declareSchemaRef
               thing_ReqReq <- declare_req Proxy.Proxy
               let _ = Hs.pure Thing_Req <*> HsJSONPB.asProxy declare_iid <*>
                         HsJSONPB.asProxy declare_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("iid", thing_ReqIid),
                                                        ("req", thing_ReqReq)]}})
 
data Thing_ReqReq = Thing_ReqReqThingDeleteReq Concept.Thing_Delete_Req
                  | Thing_ReqReqThingGetTypeReq Concept.Thing_GetType_Req
                  | Thing_ReqReqThingGetHasReq Concept.Thing_GetHas_Req
                  | Thing_ReqReqThingSetHasReq Concept.Thing_SetHas_Req
                  | Thing_ReqReqThingUnsetHasReq Concept.Thing_UnsetHas_Req
                  | Thing_ReqReqThingGetRelationsReq Concept.Thing_GetRelations_Req
                  | Thing_ReqReqThingGetPlayingReq Concept.Thing_GetPlaying_Req
                  | Thing_ReqReqRelationAddPlayerReq Concept.Relation_AddPlayer_Req
                  | Thing_ReqReqRelationRemovePlayerReq Concept.Relation_RemovePlayer_Req
                  | Thing_ReqReqRelationGetPlayersReq Concept.Relation_GetPlayers_Req
                  | Thing_ReqReqRelationGetPlayersByRoleTypeReq Concept.Relation_GetPlayersByRoleType_Req
                  | Thing_ReqReqRelationGetRelatingReq Concept.Relation_GetRelating_Req
                  | Thing_ReqReqAttributeGetOwnersReq Concept.Attribute_GetOwners_Req
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_ReqReq where
        nameOf _ = (Hs.fromString "Thing_ReqReq")
 
instance HsJSONPB.ToSchema Thing_ReqReq where
        declareNamedSchema _
          = do let declare_thing_delete_req = HsJSONPB.declareSchemaRef
               thing_ReqReqThingDeleteReq <- declare_thing_delete_req Proxy.Proxy
               let _ = Hs.pure Thing_ReqReqThingDeleteReq <*>
                         HsJSONPB.asProxy declare_thing_delete_req
               let declare_thing_get_type_req = HsJSONPB.declareSchemaRef
               thing_ReqReqThingGetTypeReq <- declare_thing_get_type_req
                                                Proxy.Proxy
               let _ = Hs.pure Thing_ReqReqThingGetTypeReq <*>
                         HsJSONPB.asProxy declare_thing_get_type_req
               let declare_thing_get_has_req = HsJSONPB.declareSchemaRef
               thing_ReqReqThingGetHasReq <- declare_thing_get_has_req Proxy.Proxy
               let _ = Hs.pure Thing_ReqReqThingGetHasReq <*>
                         HsJSONPB.asProxy declare_thing_get_has_req
               let declare_thing_set_has_req = HsJSONPB.declareSchemaRef
               thing_ReqReqThingSetHasReq <- declare_thing_set_has_req Proxy.Proxy
               let _ = Hs.pure Thing_ReqReqThingSetHasReq <*>
                         HsJSONPB.asProxy declare_thing_set_has_req
               let declare_thing_unset_has_req = HsJSONPB.declareSchemaRef
               thing_ReqReqThingUnsetHasReq <- declare_thing_unset_has_req
                                                 Proxy.Proxy
               let _ = Hs.pure Thing_ReqReqThingUnsetHasReq <*>
                         HsJSONPB.asProxy declare_thing_unset_has_req
               let declare_thing_get_relations_req = HsJSONPB.declareSchemaRef
               thing_ReqReqThingGetRelationsReq <- declare_thing_get_relations_req
                                                     Proxy.Proxy
               let _ = Hs.pure Thing_ReqReqThingGetRelationsReq <*>
                         HsJSONPB.asProxy declare_thing_get_relations_req
               let declare_thing_get_playing_req = HsJSONPB.declareSchemaRef
               thing_ReqReqThingGetPlayingReq <- declare_thing_get_playing_req
                                                   Proxy.Proxy
               let _ = Hs.pure Thing_ReqReqThingGetPlayingReq <*>
                         HsJSONPB.asProxy declare_thing_get_playing_req
               let declare_relation_add_player_req = HsJSONPB.declareSchemaRef
               thing_ReqReqRelationAddPlayerReq <- declare_relation_add_player_req
                                                     Proxy.Proxy
               let _ = Hs.pure Thing_ReqReqRelationAddPlayerReq <*>
                         HsJSONPB.asProxy declare_relation_add_player_req
               let declare_relation_remove_player_req = HsJSONPB.declareSchemaRef
               thing_ReqReqRelationRemovePlayerReq <- declare_relation_remove_player_req
                                                        Proxy.Proxy
               let _ = Hs.pure Thing_ReqReqRelationRemovePlayerReq <*>
                         HsJSONPB.asProxy declare_relation_remove_player_req
               let declare_relation_get_players_req = HsJSONPB.declareSchemaRef
               thing_ReqReqRelationGetPlayersReq <- declare_relation_get_players_req
                                                      Proxy.Proxy
               let _ = Hs.pure Thing_ReqReqRelationGetPlayersReq <*>
                         HsJSONPB.asProxy declare_relation_get_players_req
               let declare_relation_get_players_by_role_type_req
                     = HsJSONPB.declareSchemaRef
               thing_ReqReqRelationGetPlayersByRoleTypeReq <- declare_relation_get_players_by_role_type_req
                                                                Proxy.Proxy
               let _ = Hs.pure Thing_ReqReqRelationGetPlayersByRoleTypeReq <*>
                         HsJSONPB.asProxy declare_relation_get_players_by_role_type_req
               let declare_relation_get_relating_req = HsJSONPB.declareSchemaRef
               thing_ReqReqRelationGetRelatingReq <- declare_relation_get_relating_req
                                                       Proxy.Proxy
               let _ = Hs.pure Thing_ReqReqRelationGetRelatingReq <*>
                         HsJSONPB.asProxy declare_relation_get_relating_req
               let declare_attribute_get_owners_req = HsJSONPB.declareSchemaRef
               thing_ReqReqAttributeGetOwnersReq <- declare_attribute_get_owners_req
                                                      Proxy.Proxy
               let _ = Hs.pure Thing_ReqReqAttributeGetOwnersReq <*>
                         HsJSONPB.asProxy declare_attribute_get_owners_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_ReqReq",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("thing_delete_req",
                                                         thing_ReqReqThingDeleteReq),
                                                        ("thing_get_type_req",
                                                         thing_ReqReqThingGetTypeReq),
                                                        ("thing_get_has_req",
                                                         thing_ReqReqThingGetHasReq),
                                                        ("thing_set_has_req",
                                                         thing_ReqReqThingSetHasReq),
                                                        ("thing_unset_has_req",
                                                         thing_ReqReqThingUnsetHasReq),
                                                        ("thing_get_relations_req",
                                                         thing_ReqReqThingGetRelationsReq),
                                                        ("thing_get_playing_req",
                                                         thing_ReqReqThingGetPlayingReq),
                                                        ("relation_add_player_req",
                                                         thing_ReqReqRelationAddPlayerReq),
                                                        ("relation_remove_player_req",
                                                         thing_ReqReqRelationRemovePlayerReq),
                                                        ("relation_get_players_req",
                                                         thing_ReqReqRelationGetPlayersReq),
                                                        ("relation_get_players_by_role_type_req",
                                                         thing_ReqReqRelationGetPlayersByRoleTypeReq),
                                                        ("relation_get_relating_req",
                                                         thing_ReqReqRelationGetRelatingReq),
                                                        ("attribute_get_owners_req",
                                                         thing_ReqReqAttributeGetOwnersReq)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype Thing_Res = Thing_Res{thing_ResRes ::
                              Hs.Maybe Thing_ResRes}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_Res where
        nameOf _ = (Hs.fromString "Thing_Res")
 
instance HsProtobuf.HasDefault Thing_Res
 
instance HsProtobuf.Message Thing_Res where
        encodeMessage _ Thing_Res{thing_ResRes = thing_ResRes}
          = (Hs.mconcat
               [case thing_ResRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Thing_ResResThingDeleteRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 100)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_Delete_Res)
                                        @(HsProtobuf.Nested Concept.Thing_Delete_Res)
                                        (Hs.Just y)))
                             Thing_ResResThingGetTypeRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 101)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_GetType_Res)
                                        @(HsProtobuf.Nested Concept.Thing_GetType_Res)
                                        (Hs.Just y)))
                             Thing_ResResThingSetHasRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 102)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_SetHas_Res)
                                        @(HsProtobuf.Nested Concept.Thing_SetHas_Res)
                                        (Hs.Just y)))
                             Thing_ResResThingUnsetHasRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 103)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_UnsetHas_Res)
                                        @(HsProtobuf.Nested Concept.Thing_UnsetHas_Res)
                                        (Hs.Just y)))
                             Thing_ResResRelationAddPlayerRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 200)
                                     (Hs.coerce @(Hs.Maybe Concept.Relation_AddPlayer_Res)
                                        @(HsProtobuf.Nested Concept.Relation_AddPlayer_Res)
                                        (Hs.Just y)))
                             Thing_ResResRelationRemovePlayerRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 201)
                                     (Hs.coerce @(Hs.Maybe Concept.Relation_RemovePlayer_Res)
                                        @(HsProtobuf.Nested Concept.Relation_RemovePlayer_Res)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Thing_Res) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 100),
                   (Hs.pure (Hs.fmap Thing_ResResThingDeleteRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_Delete_Res))
                        @(_ (Hs.Maybe Concept.Thing_Delete_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 101),
                   (Hs.pure (Hs.fmap Thing_ResResThingGetTypeRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_GetType_Res))
                        @(_ (Hs.Maybe Concept.Thing_GetType_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 102),
                   (Hs.pure (Hs.fmap Thing_ResResThingSetHasRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_SetHas_Res))
                        @(_ (Hs.Maybe Concept.Thing_SetHas_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 103),
                   (Hs.pure (Hs.fmap Thing_ResResThingUnsetHasRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_UnsetHas_Res))
                        @(_ (Hs.Maybe Concept.Thing_UnsetHas_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 200),
                   (Hs.pure (Hs.fmap Thing_ResResRelationAddPlayerRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Relation_AddPlayer_Res))
                        @(_ (Hs.Maybe Concept.Relation_AddPlayer_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 201),
                   (Hs.pure (Hs.fmap Thing_ResResRelationRemovePlayerRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.Relation_RemovePlayer_Res))
                        @(_ (Hs.Maybe Concept.Relation_RemovePlayer_Res))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_Res where
        toJSONPB (Thing_Res f100_or_f101_or_f102_or_f103_or_f200_or_f201)
          = (HsJSONPB.object
               [(let encodeRes
                       = (case f100_or_f101_or_f102_or_f103_or_f200_or_f201 of
                              Hs.Just (Thing_ResResThingDeleteRes f100)
                                -> (HsJSONPB.pair "thing_delete_res" f100)
                              Hs.Just (Thing_ResResThingGetTypeRes f101)
                                -> (HsJSONPB.pair "thing_get_type_res" f101)
                              Hs.Just (Thing_ResResThingSetHasRes f102)
                                -> (HsJSONPB.pair "thing_set_has_res" f102)
                              Hs.Just (Thing_ResResThingUnsetHasRes f103)
                                -> (HsJSONPB.pair "thing_unset_has_res" f103)
                              Hs.Just (Thing_ResResRelationAddPlayerRes f200)
                                -> (HsJSONPB.pair "relation_add_player_res" f200)
                              Hs.Just (Thing_ResResRelationRemovePlayerRes f201)
                                -> (HsJSONPB.pair "relation_remove_player_res" f201)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB
          (Thing_Res f100_or_f101_or_f102_or_f103_or_f200_or_f201)
          = (HsJSONPB.pairs
               [(let encodeRes
                       = (case f100_or_f101_or_f102_or_f103_or_f200_or_f201 of
                              Hs.Just (Thing_ResResThingDeleteRes f100)
                                -> (HsJSONPB.pair "thing_delete_res" f100)
                              Hs.Just (Thing_ResResThingGetTypeRes f101)
                                -> (HsJSONPB.pair "thing_get_type_res" f101)
                              Hs.Just (Thing_ResResThingSetHasRes f102)
                                -> (HsJSONPB.pair "thing_set_has_res" f102)
                              Hs.Just (Thing_ResResThingUnsetHasRes f103)
                                -> (HsJSONPB.pair "thing_unset_has_res" f103)
                              Hs.Just (Thing_ResResRelationAddPlayerRes f200)
                                -> (HsJSONPB.pair "relation_add_player_res" f200)
                              Hs.Just (Thing_ResResRelationRemovePlayerRes f201)
                                -> (HsJSONPB.pair "relation_remove_player_res" f201)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB Thing_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_Res"
               (\ obj ->
                  (Hs.pure Thing_Res) <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Thing_ResResThingDeleteRes <$>
                                  (HsJSONPB.parseField parseObj "thing_delete_res"),
                                Hs.Just Hs.. Thing_ResResThingGetTypeRes <$>
                                  (HsJSONPB.parseField parseObj "thing_get_type_res"),
                                Hs.Just Hs.. Thing_ResResThingSetHasRes <$>
                                  (HsJSONPB.parseField parseObj "thing_set_has_res"),
                                Hs.Just Hs.. Thing_ResResThingUnsetHasRes <$>
                                  (HsJSONPB.parseField parseObj "thing_unset_has_res"),
                                Hs.Just Hs.. Thing_ResResRelationAddPlayerRes <$>
                                  (HsJSONPB.parseField parseObj "relation_add_player_res"),
                                Hs.Just Hs.. Thing_ResResRelationRemovePlayerRes <$>
                                  (HsJSONPB.parseField parseObj "relation_remove_player_res"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON Thing_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_Res where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               thing_ResRes <- declare_res Proxy.Proxy
               let _ = Hs.pure Thing_Res <*> HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res", thing_ResRes)]}})
 
data Thing_ResRes = Thing_ResResThingDeleteRes Concept.Thing_Delete_Res
                  | Thing_ResResThingGetTypeRes Concept.Thing_GetType_Res
                  | Thing_ResResThingSetHasRes Concept.Thing_SetHas_Res
                  | Thing_ResResThingUnsetHasRes Concept.Thing_UnsetHas_Res
                  | Thing_ResResRelationAddPlayerRes Concept.Relation_AddPlayer_Res
                  | Thing_ResResRelationRemovePlayerRes Concept.Relation_RemovePlayer_Res
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_ResRes where
        nameOf _ = (Hs.fromString "Thing_ResRes")
 
instance HsJSONPB.ToSchema Thing_ResRes where
        declareNamedSchema _
          = do let declare_thing_delete_res = HsJSONPB.declareSchemaRef
               thing_ResResThingDeleteRes <- declare_thing_delete_res Proxy.Proxy
               let _ = Hs.pure Thing_ResResThingDeleteRes <*>
                         HsJSONPB.asProxy declare_thing_delete_res
               let declare_thing_get_type_res = HsJSONPB.declareSchemaRef
               thing_ResResThingGetTypeRes <- declare_thing_get_type_res
                                                Proxy.Proxy
               let _ = Hs.pure Thing_ResResThingGetTypeRes <*>
                         HsJSONPB.asProxy declare_thing_get_type_res
               let declare_thing_set_has_res = HsJSONPB.declareSchemaRef
               thing_ResResThingSetHasRes <- declare_thing_set_has_res Proxy.Proxy
               let _ = Hs.pure Thing_ResResThingSetHasRes <*>
                         HsJSONPB.asProxy declare_thing_set_has_res
               let declare_thing_unset_has_res = HsJSONPB.declareSchemaRef
               thing_ResResThingUnsetHasRes <- declare_thing_unset_has_res
                                                 Proxy.Proxy
               let _ = Hs.pure Thing_ResResThingUnsetHasRes <*>
                         HsJSONPB.asProxy declare_thing_unset_has_res
               let declare_relation_add_player_res = HsJSONPB.declareSchemaRef
               thing_ResResRelationAddPlayerRes <- declare_relation_add_player_res
                                                     Proxy.Proxy
               let _ = Hs.pure Thing_ResResRelationAddPlayerRes <*>
                         HsJSONPB.asProxy declare_relation_add_player_res
               let declare_relation_remove_player_res = HsJSONPB.declareSchemaRef
               thing_ResResRelationRemovePlayerRes <- declare_relation_remove_player_res
                                                        Proxy.Proxy
               let _ = Hs.pure Thing_ResResRelationRemovePlayerRes <*>
                         HsJSONPB.asProxy declare_relation_remove_player_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_ResRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("thing_delete_res",
                                                         thing_ResResThingDeleteRes),
                                                        ("thing_get_type_res",
                                                         thing_ResResThingGetTypeRes),
                                                        ("thing_set_has_res",
                                                         thing_ResResThingSetHasRes),
                                                        ("thing_unset_has_res",
                                                         thing_ResResThingUnsetHasRes),
                                                        ("relation_add_player_res",
                                                         thing_ResResRelationAddPlayerRes),
                                                        ("relation_remove_player_res",
                                                         thing_ResResRelationRemovePlayerRes)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype Thing_ResPart = Thing_ResPart{thing_ResPartRes ::
                                      Hs.Maybe Thing_ResPartRes}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_ResPart where
        nameOf _ = (Hs.fromString "Thing_ResPart")
 
instance HsProtobuf.HasDefault Thing_ResPart
 
instance HsProtobuf.Message Thing_ResPart where
        encodeMessage _ Thing_ResPart{thing_ResPartRes = thing_ResPartRes}
          = (Hs.mconcat
               [case thing_ResPartRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Thing_ResPartResThingGetHasResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 100)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_GetHas_ResPart)
                                        @(HsProtobuf.Nested Concept.Thing_GetHas_ResPart)
                                        (Hs.Just y)))
                             Thing_ResPartResThingGetRelationsResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 101)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_GetRelations_ResPart)
                                        @(HsProtobuf.Nested Concept.Thing_GetRelations_ResPart)
                                        (Hs.Just y)))
                             Thing_ResPartResThingGetPlayingResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 102)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_GetPlaying_ResPart)
                                        @(HsProtobuf.Nested Concept.Thing_GetPlaying_ResPart)
                                        (Hs.Just y)))
                             Thing_ResPartResRelationGetPlayersResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 200)
                                     (Hs.coerce @(Hs.Maybe Concept.Relation_GetPlayers_ResPart)
                                        @(HsProtobuf.Nested Concept.Relation_GetPlayers_ResPart)
                                        (Hs.Just y)))
                             Thing_ResPartResRelationGetPlayersByRoleTypeResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 201)
                                     (Hs.coerce
                                        @(Hs.Maybe Concept.Relation_GetPlayersByRoleType_ResPart)
                                        @(HsProtobuf.Nested Concept.Relation_GetPlayersByRoleType_ResPart)
                                        (Hs.Just y)))
                             Thing_ResPartResRelationGetRelatingResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 202)
                                     (Hs.coerce @(Hs.Maybe Concept.Relation_GetRelating_ResPart)
                                        @(HsProtobuf.Nested Concept.Relation_GetRelating_ResPart)
                                        (Hs.Just y)))
                             Thing_ResPartResAttributeGetOwnersResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 300)
                                     (Hs.coerce @(Hs.Maybe Concept.Attribute_GetOwners_ResPart)
                                        @(HsProtobuf.Nested Concept.Attribute_GetOwners_ResPart)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Thing_ResPart) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 100),
                   (Hs.pure (Hs.fmap Thing_ResPartResThingGetHasResPart)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_GetHas_ResPart))
                        @(_ (Hs.Maybe Concept.Thing_GetHas_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 101),
                   (Hs.pure (Hs.fmap Thing_ResPartResThingGetRelationsResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.Thing_GetRelations_ResPart))
                        @(_ (Hs.Maybe Concept.Thing_GetRelations_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 102),
                   (Hs.pure (Hs.fmap Thing_ResPartResThingGetPlayingResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.Thing_GetPlaying_ResPart))
                        @(_ (Hs.Maybe Concept.Thing_GetPlaying_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 200),
                   (Hs.pure (Hs.fmap Thing_ResPartResRelationGetPlayersResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.Relation_GetPlayers_ResPart))
                        @(_ (Hs.Maybe Concept.Relation_GetPlayers_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 201),
                   (Hs.pure
                      (Hs.fmap Thing_ResPartResRelationGetPlayersByRoleTypeResPart))
                     <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.Relation_GetPlayersByRoleType_ResPart))
                        @(_ (Hs.Maybe Concept.Relation_GetPlayersByRoleType_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 202),
                   (Hs.pure (Hs.fmap Thing_ResPartResRelationGetRelatingResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.Relation_GetRelating_ResPart))
                        @(_ (Hs.Maybe Concept.Relation_GetRelating_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 300),
                   (Hs.pure (Hs.fmap Thing_ResPartResAttributeGetOwnersResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.Attribute_GetOwners_ResPart))
                        @(_ (Hs.Maybe Concept.Attribute_GetOwners_ResPart))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_ResPart where
        toJSONPB
          (Thing_ResPart
             f100_or_f101_or_f102_or_f200_or_f201_or_f202_or_f300)
          = (HsJSONPB.object
               [(let encodeRes
                       = (case f100_or_f101_or_f102_or_f200_or_f201_or_f202_or_f300 of
                              Hs.Just (Thing_ResPartResThingGetHasResPart f100)
                                -> (HsJSONPB.pair "thing_get_has_res_part" f100)
                              Hs.Just (Thing_ResPartResThingGetRelationsResPart f101)
                                -> (HsJSONPB.pair "thing_get_relations_res_part" f101)
                              Hs.Just (Thing_ResPartResThingGetPlayingResPart f102)
                                -> (HsJSONPB.pair "thing_get_playing_res_part" f102)
                              Hs.Just (Thing_ResPartResRelationGetPlayersResPart f200)
                                -> (HsJSONPB.pair "relation_get_players_res_part" f200)
                              Hs.Just (Thing_ResPartResRelationGetPlayersByRoleTypeResPart f201)
                                -> (HsJSONPB.pair "relation_get_players_by_role_type_res_part"
                                      f201)
                              Hs.Just (Thing_ResPartResRelationGetRelatingResPart f202)
                                -> (HsJSONPB.pair "relation_get_relating_res_part" f202)
                              Hs.Just (Thing_ResPartResAttributeGetOwnersResPart f300)
                                -> (HsJSONPB.pair "attribute_get_owners_res_part" f300)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB
          (Thing_ResPart
             f100_or_f101_or_f102_or_f200_or_f201_or_f202_or_f300)
          = (HsJSONPB.pairs
               [(let encodeRes
                       = (case f100_or_f101_or_f102_or_f200_or_f201_or_f202_or_f300 of
                              Hs.Just (Thing_ResPartResThingGetHasResPart f100)
                                -> (HsJSONPB.pair "thing_get_has_res_part" f100)
                              Hs.Just (Thing_ResPartResThingGetRelationsResPart f101)
                                -> (HsJSONPB.pair "thing_get_relations_res_part" f101)
                              Hs.Just (Thing_ResPartResThingGetPlayingResPart f102)
                                -> (HsJSONPB.pair "thing_get_playing_res_part" f102)
                              Hs.Just (Thing_ResPartResRelationGetPlayersResPart f200)
                                -> (HsJSONPB.pair "relation_get_players_res_part" f200)
                              Hs.Just (Thing_ResPartResRelationGetPlayersByRoleTypeResPart f201)
                                -> (HsJSONPB.pair "relation_get_players_by_role_type_res_part"
                                      f201)
                              Hs.Just (Thing_ResPartResRelationGetRelatingResPart f202)
                                -> (HsJSONPB.pair "relation_get_relating_res_part" f202)
                              Hs.Just (Thing_ResPartResAttributeGetOwnersResPart f300)
                                -> (HsJSONPB.pair "attribute_get_owners_res_part" f300)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB Thing_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_ResPart"
               (\ obj ->
                  (Hs.pure Thing_ResPart) <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Thing_ResPartResThingGetHasResPart <$>
                                  (HsJSONPB.parseField parseObj "thing_get_has_res_part"),
                                Hs.Just Hs.. Thing_ResPartResThingGetRelationsResPart <$>
                                  (HsJSONPB.parseField parseObj "thing_get_relations_res_part"),
                                Hs.Just Hs.. Thing_ResPartResThingGetPlayingResPart <$>
                                  (HsJSONPB.parseField parseObj "thing_get_playing_res_part"),
                                Hs.Just Hs.. Thing_ResPartResRelationGetPlayersResPart <$>
                                  (HsJSONPB.parseField parseObj "relation_get_players_res_part"),
                                Hs.Just Hs.. Thing_ResPartResRelationGetPlayersByRoleTypeResPart
                                  <$>
                                  (HsJSONPB.parseField parseObj
                                     "relation_get_players_by_role_type_res_part"),
                                Hs.Just Hs.. Thing_ResPartResRelationGetRelatingResPart <$>
                                  (HsJSONPB.parseField parseObj "relation_get_relating_res_part"),
                                Hs.Just Hs.. Thing_ResPartResAttributeGetOwnersResPart <$>
                                  (HsJSONPB.parseField parseObj "attribute_get_owners_res_part"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON Thing_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_ResPart where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               thing_ResPartRes <- declare_res Proxy.Proxy
               let _ = Hs.pure Thing_ResPart <*> HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res", thing_ResPartRes)]}})
 
data Thing_ResPartRes = Thing_ResPartResThingGetHasResPart Concept.Thing_GetHas_ResPart
                      | Thing_ResPartResThingGetRelationsResPart Concept.Thing_GetRelations_ResPart
                      | Thing_ResPartResThingGetPlayingResPart Concept.Thing_GetPlaying_ResPart
                      | Thing_ResPartResRelationGetPlayersResPart Concept.Relation_GetPlayers_ResPart
                      | Thing_ResPartResRelationGetPlayersByRoleTypeResPart Concept.Relation_GetPlayersByRoleType_ResPart
                      | Thing_ResPartResRelationGetRelatingResPart Concept.Relation_GetRelating_ResPart
                      | Thing_ResPartResAttributeGetOwnersResPart Concept.Attribute_GetOwners_ResPart
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_ResPartRes where
        nameOf _ = (Hs.fromString "Thing_ResPartRes")
 
instance HsJSONPB.ToSchema Thing_ResPartRes where
        declareNamedSchema _
          = do let declare_thing_get_has_res_part = HsJSONPB.declareSchemaRef
               thing_ResPartResThingGetHasResPart <- declare_thing_get_has_res_part
                                                       Proxy.Proxy
               let _ = Hs.pure Thing_ResPartResThingGetHasResPart <*>
                         HsJSONPB.asProxy declare_thing_get_has_res_part
               let declare_thing_get_relations_res_part
                     = HsJSONPB.declareSchemaRef
               thing_ResPartResThingGetRelationsResPart <- declare_thing_get_relations_res_part
                                                             Proxy.Proxy
               let _ = Hs.pure Thing_ResPartResThingGetRelationsResPart <*>
                         HsJSONPB.asProxy declare_thing_get_relations_res_part
               let declare_thing_get_playing_res_part = HsJSONPB.declareSchemaRef
               thing_ResPartResThingGetPlayingResPart <- declare_thing_get_playing_res_part
                                                           Proxy.Proxy
               let _ = Hs.pure Thing_ResPartResThingGetPlayingResPart <*>
                         HsJSONPB.asProxy declare_thing_get_playing_res_part
               let declare_relation_get_players_res_part
                     = HsJSONPB.declareSchemaRef
               thing_ResPartResRelationGetPlayersResPart <- declare_relation_get_players_res_part
                                                              Proxy.Proxy
               let _ = Hs.pure Thing_ResPartResRelationGetPlayersResPart <*>
                         HsJSONPB.asProxy declare_relation_get_players_res_part
               let declare_relation_get_players_by_role_type_res_part
                     = HsJSONPB.declareSchemaRef
               thing_ResPartResRelationGetPlayersByRoleTypeResPart <- declare_relation_get_players_by_role_type_res_part
                                                                        Proxy.Proxy
               let _ = Hs.pure Thing_ResPartResRelationGetPlayersByRoleTypeResPart
                         <*>
                         HsJSONPB.asProxy declare_relation_get_players_by_role_type_res_part
               let declare_relation_get_relating_res_part
                     = HsJSONPB.declareSchemaRef
               thing_ResPartResRelationGetRelatingResPart <- declare_relation_get_relating_res_part
                                                               Proxy.Proxy
               let _ = Hs.pure Thing_ResPartResRelationGetRelatingResPart <*>
                         HsJSONPB.asProxy declare_relation_get_relating_res_part
               let declare_attribute_get_owners_res_part
                     = HsJSONPB.declareSchemaRef
               thing_ResPartResAttributeGetOwnersResPart <- declare_attribute_get_owners_res_part
                                                              Proxy.Proxy
               let _ = Hs.pure Thing_ResPartResAttributeGetOwnersResPart <*>
                         HsJSONPB.asProxy declare_attribute_get_owners_res_part
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_ResPartRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("thing_get_has_res_part",
                                                         thing_ResPartResThingGetHasResPart),
                                                        ("thing_get_relations_res_part",
                                                         thing_ResPartResThingGetRelationsResPart),
                                                        ("thing_get_playing_res_part",
                                                         thing_ResPartResThingGetPlayingResPart),
                                                        ("relation_get_players_res_part",
                                                         thing_ResPartResRelationGetPlayersResPart),
                                                        ("relation_get_players_by_role_type_res_part",
                                                         thing_ResPartResRelationGetPlayersByRoleTypeResPart),
                                                        ("relation_get_relating_res_part",
                                                         thing_ResPartResRelationGetRelatingResPart),
                                                        ("attribute_get_owners_res_part",
                                                         thing_ResPartResAttributeGetOwnersResPart)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data Thing_Delete = Thing_Delete{}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_Delete where
        nameOf _ = (Hs.fromString "Thing_Delete")
 
instance HsProtobuf.HasDefault Thing_Delete
 
instance HsProtobuf.Message Thing_Delete where
        encodeMessage _ Thing_Delete{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Thing_Delete)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_Delete where
        toJSONPB (Thing_Delete) = (HsJSONPB.object [])
        toEncodingPB (Thing_Delete) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Thing_Delete where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_Delete"
               (\ obj -> (Hs.pure Thing_Delete)))
 
instance HsJSONPB.ToJSON Thing_Delete where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_Delete where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_Delete where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_Delete",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Thing_Delete_Req = Thing_Delete_Req{}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_Delete_Req where
        nameOf _ = (Hs.fromString "Thing_Delete_Req")
 
instance HsProtobuf.HasDefault Thing_Delete_Req
 
instance HsProtobuf.Message Thing_Delete_Req where
        encodeMessage _ Thing_Delete_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Thing_Delete_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_Delete_Req where
        toJSONPB (Thing_Delete_Req) = (HsJSONPB.object [])
        toEncodingPB (Thing_Delete_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Thing_Delete_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_Delete_Req"
               (\ obj -> (Hs.pure Thing_Delete_Req)))
 
instance HsJSONPB.ToJSON Thing_Delete_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_Delete_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_Delete_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_Delete_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Thing_Delete_Res = Thing_Delete_Res{}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_Delete_Res where
        nameOf _ = (Hs.fromString "Thing_Delete_Res")
 
instance HsProtobuf.HasDefault Thing_Delete_Res
 
instance HsProtobuf.Message Thing_Delete_Res where
        encodeMessage _ Thing_Delete_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Thing_Delete_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_Delete_Res where
        toJSONPB (Thing_Delete_Res) = (HsJSONPB.object [])
        toEncodingPB (Thing_Delete_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Thing_Delete_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_Delete_Res"
               (\ obj -> (Hs.pure Thing_Delete_Res)))
 
instance HsJSONPB.ToJSON Thing_Delete_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_Delete_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_Delete_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_Delete_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Thing_GetType = Thing_GetType{}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_GetType where
        nameOf _ = (Hs.fromString "Thing_GetType")
 
instance HsProtobuf.HasDefault Thing_GetType
 
instance HsProtobuf.Message Thing_GetType where
        encodeMessage _ Thing_GetType{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Thing_GetType)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_GetType where
        toJSONPB (Thing_GetType) = (HsJSONPB.object [])
        toEncodingPB (Thing_GetType) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Thing_GetType where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_GetType"
               (\ obj -> (Hs.pure Thing_GetType)))
 
instance HsJSONPB.ToJSON Thing_GetType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_GetType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_GetType where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_GetType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Thing_GetType_Req = Thing_GetType_Req{}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_GetType_Req where
        nameOf _ = (Hs.fromString "Thing_GetType_Req")
 
instance HsProtobuf.HasDefault Thing_GetType_Req
 
instance HsProtobuf.Message Thing_GetType_Req where
        encodeMessage _ Thing_GetType_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Thing_GetType_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_GetType_Req where
        toJSONPB (Thing_GetType_Req) = (HsJSONPB.object [])
        toEncodingPB (Thing_GetType_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Thing_GetType_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_GetType_Req"
               (\ obj -> (Hs.pure Thing_GetType_Req)))
 
instance HsJSONPB.ToJSON Thing_GetType_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_GetType_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_GetType_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_GetType_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Thing_GetType_Res = Thing_GetType_Res{thing_GetType_ResThingType
                                              :: Hs.Maybe Concept.Type}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_GetType_Res where
        nameOf _ = (Hs.fromString "Thing_GetType_Res")
 
instance HsProtobuf.HasDefault Thing_GetType_Res
 
instance HsProtobuf.Message Thing_GetType_Res where
        encodeMessage _
          Thing_GetType_Res{thing_GetType_ResThingType =
                              thing_GetType_ResThingType}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Type)
                      @(HsProtobuf.Nested Concept.Type)
                      thing_GetType_ResThingType))])
        decodeMessage _
          = (Hs.pure Thing_GetType_Res) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                 @(_ (Hs.Maybe Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "thing_type")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Thing_GetType_Res where
        toJSONPB (Thing_GetType_Res f1)
          = (HsJSONPB.object ["thing_type" .= f1])
        toEncodingPB (Thing_GetType_Res f1)
          = (HsJSONPB.pairs ["thing_type" .= f1])
 
instance HsJSONPB.FromJSONPB Thing_GetType_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_GetType_Res"
               (\ obj -> (Hs.pure Thing_GetType_Res) <*> obj .: "thing_type"))
 
instance HsJSONPB.ToJSON Thing_GetType_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_GetType_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_GetType_Res where
        declareNamedSchema _
          = do let declare_thing_type = HsJSONPB.declareSchemaRef
               thing_GetType_ResThingType <- declare_thing_type Proxy.Proxy
               let _ = Hs.pure Thing_GetType_Res <*>
                         HsJSONPB.asProxy declare_thing_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_GetType_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("thing_type",
                                                         thing_GetType_ResThingType)]}})
 
data Thing_SetHas = Thing_SetHas{}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_SetHas where
        nameOf _ = (Hs.fromString "Thing_SetHas")
 
instance HsProtobuf.HasDefault Thing_SetHas
 
instance HsProtobuf.Message Thing_SetHas where
        encodeMessage _ Thing_SetHas{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Thing_SetHas)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_SetHas where
        toJSONPB (Thing_SetHas) = (HsJSONPB.object [])
        toEncodingPB (Thing_SetHas) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Thing_SetHas where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_SetHas"
               (\ obj -> (Hs.pure Thing_SetHas)))
 
instance HsJSONPB.ToJSON Thing_SetHas where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_SetHas where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_SetHas where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_SetHas",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Thing_SetHas_Req = Thing_SetHas_Req{thing_SetHas_ReqAttribute
                                            :: Hs.Maybe Concept.Thing}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_SetHas_Req where
        nameOf _ = (Hs.fromString "Thing_SetHas_Req")
 
instance HsProtobuf.HasDefault Thing_SetHas_Req
 
instance HsProtobuf.Message Thing_SetHas_Req where
        encodeMessage _
          Thing_SetHas_Req{thing_SetHas_ReqAttribute =
                             thing_SetHas_ReqAttribute}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Thing)
                      @(HsProtobuf.Nested Concept.Thing)
                      thing_SetHas_ReqAttribute))])
        decodeMessage _
          = (Hs.pure Thing_SetHas_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing))
                 @(_ (Hs.Maybe Concept.Thing))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Thing")))
                (HsProtobuf.Single "attribute")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Thing_SetHas_Req where
        toJSONPB (Thing_SetHas_Req f1)
          = (HsJSONPB.object ["attribute" .= f1])
        toEncodingPB (Thing_SetHas_Req f1)
          = (HsJSONPB.pairs ["attribute" .= f1])
 
instance HsJSONPB.FromJSONPB Thing_SetHas_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_SetHas_Req"
               (\ obj -> (Hs.pure Thing_SetHas_Req) <*> obj .: "attribute"))
 
instance HsJSONPB.ToJSON Thing_SetHas_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_SetHas_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_SetHas_Req where
        declareNamedSchema _
          = do let declare_attribute = HsJSONPB.declareSchemaRef
               thing_SetHas_ReqAttribute <- declare_attribute Proxy.Proxy
               let _ = Hs.pure Thing_SetHas_Req <*>
                         HsJSONPB.asProxy declare_attribute
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_SetHas_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("attribute", thing_SetHas_ReqAttribute)]}})
 
data Thing_SetHas_Res = Thing_SetHas_Res{}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_SetHas_Res where
        nameOf _ = (Hs.fromString "Thing_SetHas_Res")
 
instance HsProtobuf.HasDefault Thing_SetHas_Res
 
instance HsProtobuf.Message Thing_SetHas_Res where
        encodeMessage _ Thing_SetHas_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Thing_SetHas_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_SetHas_Res where
        toJSONPB (Thing_SetHas_Res) = (HsJSONPB.object [])
        toEncodingPB (Thing_SetHas_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Thing_SetHas_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_SetHas_Res"
               (\ obj -> (Hs.pure Thing_SetHas_Res)))
 
instance HsJSONPB.ToJSON Thing_SetHas_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_SetHas_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_SetHas_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_SetHas_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Thing_UnsetHas = Thing_UnsetHas{}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_UnsetHas where
        nameOf _ = (Hs.fromString "Thing_UnsetHas")
 
instance HsProtobuf.HasDefault Thing_UnsetHas
 
instance HsProtobuf.Message Thing_UnsetHas where
        encodeMessage _ Thing_UnsetHas{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Thing_UnsetHas)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_UnsetHas where
        toJSONPB (Thing_UnsetHas) = (HsJSONPB.object [])
        toEncodingPB (Thing_UnsetHas) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Thing_UnsetHas where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_UnsetHas"
               (\ obj -> (Hs.pure Thing_UnsetHas)))
 
instance HsJSONPB.ToJSON Thing_UnsetHas where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_UnsetHas where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_UnsetHas where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_UnsetHas",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Thing_UnsetHas_Req = Thing_UnsetHas_Req{thing_UnsetHas_ReqAttribute
                                                :: Hs.Maybe Concept.Thing}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_UnsetHas_Req where
        nameOf _ = (Hs.fromString "Thing_UnsetHas_Req")
 
instance HsProtobuf.HasDefault Thing_UnsetHas_Req
 
instance HsProtobuf.Message Thing_UnsetHas_Req where
        encodeMessage _
          Thing_UnsetHas_Req{thing_UnsetHas_ReqAttribute =
                               thing_UnsetHas_ReqAttribute}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Thing)
                      @(HsProtobuf.Nested Concept.Thing)
                      thing_UnsetHas_ReqAttribute))])
        decodeMessage _
          = (Hs.pure Thing_UnsetHas_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing))
                 @(_ (Hs.Maybe Concept.Thing))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Thing")))
                (HsProtobuf.Single "attribute")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Thing_UnsetHas_Req where
        toJSONPB (Thing_UnsetHas_Req f1)
          = (HsJSONPB.object ["attribute" .= f1])
        toEncodingPB (Thing_UnsetHas_Req f1)
          = (HsJSONPB.pairs ["attribute" .= f1])
 
instance HsJSONPB.FromJSONPB Thing_UnsetHas_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_UnsetHas_Req"
               (\ obj -> (Hs.pure Thing_UnsetHas_Req) <*> obj .: "attribute"))
 
instance HsJSONPB.ToJSON Thing_UnsetHas_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_UnsetHas_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_UnsetHas_Req where
        declareNamedSchema _
          = do let declare_attribute = HsJSONPB.declareSchemaRef
               thing_UnsetHas_ReqAttribute <- declare_attribute Proxy.Proxy
               let _ = Hs.pure Thing_UnsetHas_Req <*>
                         HsJSONPB.asProxy declare_attribute
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_UnsetHas_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("attribute",
                                                         thing_UnsetHas_ReqAttribute)]}})
 
data Thing_UnsetHas_Res = Thing_UnsetHas_Res{}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_UnsetHas_Res where
        nameOf _ = (Hs.fromString "Thing_UnsetHas_Res")
 
instance HsProtobuf.HasDefault Thing_UnsetHas_Res
 
instance HsProtobuf.Message Thing_UnsetHas_Res where
        encodeMessage _ Thing_UnsetHas_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Thing_UnsetHas_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_UnsetHas_Res where
        toJSONPB (Thing_UnsetHas_Res) = (HsJSONPB.object [])
        toEncodingPB (Thing_UnsetHas_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Thing_UnsetHas_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_UnsetHas_Res"
               (\ obj -> (Hs.pure Thing_UnsetHas_Res)))
 
instance HsJSONPB.ToJSON Thing_UnsetHas_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_UnsetHas_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_UnsetHas_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_UnsetHas_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Thing_GetHas = Thing_GetHas{}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_GetHas where
        nameOf _ = (Hs.fromString "Thing_GetHas")
 
instance HsProtobuf.HasDefault Thing_GetHas
 
instance HsProtobuf.Message Thing_GetHas where
        encodeMessage _ Thing_GetHas{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Thing_GetHas)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_GetHas where
        toJSONPB (Thing_GetHas) = (HsJSONPB.object [])
        toEncodingPB (Thing_GetHas) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Thing_GetHas where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_GetHas"
               (\ obj -> (Hs.pure Thing_GetHas)))
 
instance HsJSONPB.ToJSON Thing_GetHas where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_GetHas where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_GetHas where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_GetHas",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Thing_GetHas_Req = Thing_GetHas_Req{thing_GetHas_ReqAttributeTypes
                                         :: Hs.Vector Concept.Type,
                                         thing_GetHas_ReqKeysOnly :: Hs.Bool}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_GetHas_Req where
        nameOf _ = (Hs.fromString "Thing_GetHas_Req")
 
instance HsProtobuf.HasDefault Thing_GetHas_Req
 
instance HsProtobuf.Message Thing_GetHas_Req where
        encodeMessage _
          Thing_GetHas_Req{thing_GetHas_ReqAttributeTypes =
                             thing_GetHas_ReqAttributeTypes,
                           thing_GetHas_ReqKeysOnly = thing_GetHas_ReqKeysOnly}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Type)
                      @(HsProtobuf.NestedVec Concept.Type)
                      thing_GetHas_ReqAttributeTypes)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   thing_GetHas_ReqKeysOnly)])
        decodeMessage _
          = (Hs.pure Thing_GetHas_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Type))
                 @(_ (Hs.Vector Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "attribute_types")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "keys_only")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Thing_GetHas_Req where
        toJSONPB (Thing_GetHas_Req f1 f2)
          = (HsJSONPB.object ["attribute_types" .= f1, "keys_only" .= f2])
        toEncodingPB (Thing_GetHas_Req f1 f2)
          = (HsJSONPB.pairs ["attribute_types" .= f1, "keys_only" .= f2])
 
instance HsJSONPB.FromJSONPB Thing_GetHas_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_GetHas_Req"
               (\ obj ->
                  (Hs.pure Thing_GetHas_Req) <*> obj .: "attribute_types" <*>
                    obj .: "keys_only"))
 
instance HsJSONPB.ToJSON Thing_GetHas_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_GetHas_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_GetHas_Req where
        declareNamedSchema _
          = do let declare_attribute_types = HsJSONPB.declareSchemaRef
               thing_GetHas_ReqAttributeTypes <- declare_attribute_types
                                                   Proxy.Proxy
               let declare_keys_only = HsJSONPB.declareSchemaRef
               thing_GetHas_ReqKeysOnly <- declare_keys_only Proxy.Proxy
               let _ = Hs.pure Thing_GetHas_Req <*>
                         HsJSONPB.asProxy declare_attribute_types
                         <*> HsJSONPB.asProxy declare_keys_only
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_GetHas_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("attribute_types",
                                                         thing_GetHas_ReqAttributeTypes),
                                                        ("keys_only", thing_GetHas_ReqKeysOnly)]}})
 
newtype Thing_GetHas_ResPart = Thing_GetHas_ResPart{thing_GetHas_ResPartAttributes
                                                    :: Hs.Vector Concept.Thing}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_GetHas_ResPart where
        nameOf _ = (Hs.fromString "Thing_GetHas_ResPart")
 
instance HsProtobuf.HasDefault Thing_GetHas_ResPart
 
instance HsProtobuf.Message Thing_GetHas_ResPart where
        encodeMessage _
          Thing_GetHas_ResPart{thing_GetHas_ResPartAttributes =
                                 thing_GetHas_ResPartAttributes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Thing)
                      @(HsProtobuf.NestedVec Concept.Thing)
                      thing_GetHas_ResPartAttributes))])
        decodeMessage _
          = (Hs.pure Thing_GetHas_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Thing))
                 @(_ (Hs.Vector Concept.Thing))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Thing")))
                (HsProtobuf.Single "attributes")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Thing_GetHas_ResPart where
        toJSONPB (Thing_GetHas_ResPart f1)
          = (HsJSONPB.object ["attributes" .= f1])
        toEncodingPB (Thing_GetHas_ResPart f1)
          = (HsJSONPB.pairs ["attributes" .= f1])
 
instance HsJSONPB.FromJSONPB Thing_GetHas_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_GetHas_ResPart"
               (\ obj -> (Hs.pure Thing_GetHas_ResPart) <*> obj .: "attributes"))
 
instance HsJSONPB.ToJSON Thing_GetHas_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_GetHas_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_GetHas_ResPart where
        declareNamedSchema _
          = do let declare_attributes = HsJSONPB.declareSchemaRef
               thing_GetHas_ResPartAttributes <- declare_attributes Proxy.Proxy
               let _ = Hs.pure Thing_GetHas_ResPart <*>
                         HsJSONPB.asProxy declare_attributes
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_GetHas_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("attributes",
                                                         thing_GetHas_ResPartAttributes)]}})
 
data Thing_GetPlaying = Thing_GetPlaying{}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_GetPlaying where
        nameOf _ = (Hs.fromString "Thing_GetPlaying")
 
instance HsProtobuf.HasDefault Thing_GetPlaying
 
instance HsProtobuf.Message Thing_GetPlaying where
        encodeMessage _ Thing_GetPlaying{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Thing_GetPlaying)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_GetPlaying where
        toJSONPB (Thing_GetPlaying) = (HsJSONPB.object [])
        toEncodingPB (Thing_GetPlaying) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Thing_GetPlaying where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_GetPlaying"
               (\ obj -> (Hs.pure Thing_GetPlaying)))
 
instance HsJSONPB.ToJSON Thing_GetPlaying where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_GetPlaying where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_GetPlaying where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_GetPlaying",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Thing_GetPlaying_Req = Thing_GetPlaying_Req{}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_GetPlaying_Req where
        nameOf _ = (Hs.fromString "Thing_GetPlaying_Req")
 
instance HsProtobuf.HasDefault Thing_GetPlaying_Req
 
instance HsProtobuf.Message Thing_GetPlaying_Req where
        encodeMessage _ Thing_GetPlaying_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Thing_GetPlaying_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_GetPlaying_Req where
        toJSONPB (Thing_GetPlaying_Req) = (HsJSONPB.object [])
        toEncodingPB (Thing_GetPlaying_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Thing_GetPlaying_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_GetPlaying_Req"
               (\ obj -> (Hs.pure Thing_GetPlaying_Req)))
 
instance HsJSONPB.ToJSON Thing_GetPlaying_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_GetPlaying_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_GetPlaying_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_GetPlaying_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Thing_GetPlaying_ResPart = Thing_GetPlaying_ResPart{thing_GetPlaying_ResPartRoleTypes
                                                            :: Hs.Vector Concept.Type}
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_GetPlaying_ResPart where
        nameOf _ = (Hs.fromString "Thing_GetPlaying_ResPart")
 
instance HsProtobuf.HasDefault Thing_GetPlaying_ResPart
 
instance HsProtobuf.Message Thing_GetPlaying_ResPart where
        encodeMessage _
          Thing_GetPlaying_ResPart{thing_GetPlaying_ResPartRoleTypes =
                                     thing_GetPlaying_ResPartRoleTypes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Type)
                      @(HsProtobuf.NestedVec Concept.Type)
                      thing_GetPlaying_ResPartRoleTypes))])
        decodeMessage _
          = (Hs.pure Thing_GetPlaying_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Type))
                 @(_ (Hs.Vector Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "role_types")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Thing_GetPlaying_ResPart where
        toJSONPB (Thing_GetPlaying_ResPart f1)
          = (HsJSONPB.object ["role_types" .= f1])
        toEncodingPB (Thing_GetPlaying_ResPart f1)
          = (HsJSONPB.pairs ["role_types" .= f1])
 
instance HsJSONPB.FromJSONPB Thing_GetPlaying_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_GetPlaying_ResPart"
               (\ obj ->
                  (Hs.pure Thing_GetPlaying_ResPart) <*> obj .: "role_types"))
 
instance HsJSONPB.ToJSON Thing_GetPlaying_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_GetPlaying_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_GetPlaying_ResPart where
        declareNamedSchema _
          = do let declare_role_types = HsJSONPB.declareSchemaRef
               thing_GetPlaying_ResPartRoleTypes <- declare_role_types Proxy.Proxy
               let _ = Hs.pure Thing_GetPlaying_ResPart <*>
                         HsJSONPB.asProxy declare_role_types
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_GetPlaying_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("role_types",
                                                         thing_GetPlaying_ResPartRoleTypes)]}})
 
data Thing_GetRelations = Thing_GetRelations{}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_GetRelations where
        nameOf _ = (Hs.fromString "Thing_GetRelations")
 
instance HsProtobuf.HasDefault Thing_GetRelations
 
instance HsProtobuf.Message Thing_GetRelations where
        encodeMessage _ Thing_GetRelations{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Thing_GetRelations)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Thing_GetRelations where
        toJSONPB (Thing_GetRelations) = (HsJSONPB.object [])
        toEncodingPB (Thing_GetRelations) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Thing_GetRelations where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_GetRelations"
               (\ obj -> (Hs.pure Thing_GetRelations)))
 
instance HsJSONPB.ToJSON Thing_GetRelations where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_GetRelations where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_GetRelations where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_GetRelations",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Thing_GetRelations_Req = Thing_GetRelations_Req{thing_GetRelations_ReqRoleTypes
                                                        :: Hs.Vector Concept.Type}
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_GetRelations_Req where
        nameOf _ = (Hs.fromString "Thing_GetRelations_Req")
 
instance HsProtobuf.HasDefault Thing_GetRelations_Req
 
instance HsProtobuf.Message Thing_GetRelations_Req where
        encodeMessage _
          Thing_GetRelations_Req{thing_GetRelations_ReqRoleTypes =
                                   thing_GetRelations_ReqRoleTypes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Type)
                      @(HsProtobuf.NestedVec Concept.Type)
                      thing_GetRelations_ReqRoleTypes))])
        decodeMessage _
          = (Hs.pure Thing_GetRelations_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Type))
                 @(_ (Hs.Vector Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "role_types")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Thing_GetRelations_Req where
        toJSONPB (Thing_GetRelations_Req f1)
          = (HsJSONPB.object ["role_types" .= f1])
        toEncodingPB (Thing_GetRelations_Req f1)
          = (HsJSONPB.pairs ["role_types" .= f1])
 
instance HsJSONPB.FromJSONPB Thing_GetRelations_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_GetRelations_Req"
               (\ obj ->
                  (Hs.pure Thing_GetRelations_Req) <*> obj .: "role_types"))
 
instance HsJSONPB.ToJSON Thing_GetRelations_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_GetRelations_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_GetRelations_Req where
        declareNamedSchema _
          = do let declare_role_types = HsJSONPB.declareSchemaRef
               thing_GetRelations_ReqRoleTypes <- declare_role_types Proxy.Proxy
               let _ = Hs.pure Thing_GetRelations_Req <*>
                         HsJSONPB.asProxy declare_role_types
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_GetRelations_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("role_types",
                                                         thing_GetRelations_ReqRoleTypes)]}})
 
newtype Thing_GetRelations_ResPart = Thing_GetRelations_ResPart{thing_GetRelations_ResPartRelations
                                                                :: Hs.Vector Concept.Thing}
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Thing_GetRelations_ResPart where
        nameOf _ = (Hs.fromString "Thing_GetRelations_ResPart")
 
instance HsProtobuf.HasDefault Thing_GetRelations_ResPart
 
instance HsProtobuf.Message Thing_GetRelations_ResPart where
        encodeMessage _
          Thing_GetRelations_ResPart{thing_GetRelations_ResPartRelations =
                                       thing_GetRelations_ResPartRelations}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Thing)
                      @(HsProtobuf.NestedVec Concept.Thing)
                      thing_GetRelations_ResPartRelations))])
        decodeMessage _
          = (Hs.pure Thing_GetRelations_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Thing))
                 @(_ (Hs.Vector Concept.Thing))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Thing")))
                (HsProtobuf.Single "relations")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Thing_GetRelations_ResPart where
        toJSONPB (Thing_GetRelations_ResPart f1)
          = (HsJSONPB.object ["relations" .= f1])
        toEncodingPB (Thing_GetRelations_ResPart f1)
          = (HsJSONPB.pairs ["relations" .= f1])
 
instance HsJSONPB.FromJSONPB Thing_GetRelations_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "Thing_GetRelations_ResPart"
               (\ obj ->
                  (Hs.pure Thing_GetRelations_ResPart) <*> obj .: "relations"))
 
instance HsJSONPB.ToJSON Thing_GetRelations_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Thing_GetRelations_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Thing_GetRelations_ResPart where
        declareNamedSchema _
          = do let declare_relations = HsJSONPB.declareSchemaRef
               thing_GetRelations_ResPartRelations <- declare_relations
                                                        Proxy.Proxy
               let _ = Hs.pure Thing_GetRelations_ResPart <*>
                         HsJSONPB.asProxy declare_relations
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Thing_GetRelations_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("relations",
                                                         thing_GetRelations_ResPartRelations)]}})
 
data Relation = Relation{}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation where
        nameOf _ = (Hs.fromString "Relation")
 
instance HsProtobuf.HasDefault Relation
 
instance HsProtobuf.Message Relation where
        encodeMessage _ Relation{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Relation)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Relation where
        toJSONPB (Relation) = (HsJSONPB.object [])
        toEncodingPB (Relation) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Relation where
        parseJSONPB
          = (HsJSONPB.withObject "Relation" (\ obj -> (Hs.pure Relation)))
 
instance HsJSONPB.ToJSON Relation where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Relation_AddPlayer = Relation_AddPlayer{}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation_AddPlayer where
        nameOf _ = (Hs.fromString "Relation_AddPlayer")
 
instance HsProtobuf.HasDefault Relation_AddPlayer
 
instance HsProtobuf.Message Relation_AddPlayer where
        encodeMessage _ Relation_AddPlayer{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Relation_AddPlayer)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Relation_AddPlayer where
        toJSONPB (Relation_AddPlayer) = (HsJSONPB.object [])
        toEncodingPB (Relation_AddPlayer) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Relation_AddPlayer where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_AddPlayer"
               (\ obj -> (Hs.pure Relation_AddPlayer)))
 
instance HsJSONPB.ToJSON Relation_AddPlayer where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_AddPlayer where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_AddPlayer where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_AddPlayer",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Relation_AddPlayer_Req = Relation_AddPlayer_Req{relation_AddPlayer_ReqRoleType
                                                     :: Hs.Maybe Concept.Type,
                                                     relation_AddPlayer_ReqPlayer ::
                                                     Hs.Maybe Concept.Thing}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation_AddPlayer_Req where
        nameOf _ = (Hs.fromString "Relation_AddPlayer_Req")
 
instance HsProtobuf.HasDefault Relation_AddPlayer_Req
 
instance HsProtobuf.Message Relation_AddPlayer_Req where
        encodeMessage _
          Relation_AddPlayer_Req{relation_AddPlayer_ReqRoleType =
                                   relation_AddPlayer_ReqRoleType,
                                 relation_AddPlayer_ReqPlayer = relation_AddPlayer_ReqPlayer}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Type)
                      @(HsProtobuf.Nested Concept.Type)
                      relation_AddPlayer_ReqRoleType)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Concept.Thing)
                      @(HsProtobuf.Nested Concept.Thing)
                      relation_AddPlayer_ReqPlayer))])
        decodeMessage _
          = (Hs.pure Relation_AddPlayer_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                 @(_ (Hs.Maybe Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing))
                 @(_ (Hs.Maybe Concept.Thing))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "role_type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Thing")))
                (HsProtobuf.Single "player")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Relation_AddPlayer_Req where
        toJSONPB (Relation_AddPlayer_Req f1 f2)
          = (HsJSONPB.object ["role_type" .= f1, "player" .= f2])
        toEncodingPB (Relation_AddPlayer_Req f1 f2)
          = (HsJSONPB.pairs ["role_type" .= f1, "player" .= f2])
 
instance HsJSONPB.FromJSONPB Relation_AddPlayer_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_AddPlayer_Req"
               (\ obj ->
                  (Hs.pure Relation_AddPlayer_Req) <*> obj .: "role_type" <*>
                    obj .: "player"))
 
instance HsJSONPB.ToJSON Relation_AddPlayer_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_AddPlayer_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_AddPlayer_Req where
        declareNamedSchema _
          = do let declare_role_type = HsJSONPB.declareSchemaRef
               relation_AddPlayer_ReqRoleType <- declare_role_type Proxy.Proxy
               let declare_player = HsJSONPB.declareSchemaRef
               relation_AddPlayer_ReqPlayer <- declare_player Proxy.Proxy
               let _ = Hs.pure Relation_AddPlayer_Req <*>
                         HsJSONPB.asProxy declare_role_type
                         <*> HsJSONPB.asProxy declare_player
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_AddPlayer_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("role_type",
                                                         relation_AddPlayer_ReqRoleType),
                                                        ("player", relation_AddPlayer_ReqPlayer)]}})
 
data Relation_AddPlayer_Res = Relation_AddPlayer_Res{}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation_AddPlayer_Res where
        nameOf _ = (Hs.fromString "Relation_AddPlayer_Res")
 
instance HsProtobuf.HasDefault Relation_AddPlayer_Res
 
instance HsProtobuf.Message Relation_AddPlayer_Res where
        encodeMessage _ Relation_AddPlayer_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Relation_AddPlayer_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Relation_AddPlayer_Res where
        toJSONPB (Relation_AddPlayer_Res) = (HsJSONPB.object [])
        toEncodingPB (Relation_AddPlayer_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Relation_AddPlayer_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_AddPlayer_Res"
               (\ obj -> (Hs.pure Relation_AddPlayer_Res)))
 
instance HsJSONPB.ToJSON Relation_AddPlayer_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_AddPlayer_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_AddPlayer_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_AddPlayer_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Relation_RemovePlayer = Relation_RemovePlayer{}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation_RemovePlayer where
        nameOf _ = (Hs.fromString "Relation_RemovePlayer")
 
instance HsProtobuf.HasDefault Relation_RemovePlayer
 
instance HsProtobuf.Message Relation_RemovePlayer where
        encodeMessage _ Relation_RemovePlayer{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Relation_RemovePlayer)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Relation_RemovePlayer where
        toJSONPB (Relation_RemovePlayer) = (HsJSONPB.object [])
        toEncodingPB (Relation_RemovePlayer) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Relation_RemovePlayer where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_RemovePlayer"
               (\ obj -> (Hs.pure Relation_RemovePlayer)))
 
instance HsJSONPB.ToJSON Relation_RemovePlayer where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_RemovePlayer where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_RemovePlayer where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_RemovePlayer",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Relation_RemovePlayer_Req = Relation_RemovePlayer_Req{relation_RemovePlayer_ReqRoleType
                                                           :: Hs.Maybe Concept.Type,
                                                           relation_RemovePlayer_ReqPlayer ::
                                                           Hs.Maybe Concept.Thing}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation_RemovePlayer_Req where
        nameOf _ = (Hs.fromString "Relation_RemovePlayer_Req")
 
instance HsProtobuf.HasDefault Relation_RemovePlayer_Req
 
instance HsProtobuf.Message Relation_RemovePlayer_Req where
        encodeMessage _
          Relation_RemovePlayer_Req{relation_RemovePlayer_ReqRoleType =
                                      relation_RemovePlayer_ReqRoleType,
                                    relation_RemovePlayer_ReqPlayer =
                                      relation_RemovePlayer_ReqPlayer}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Type)
                      @(HsProtobuf.Nested Concept.Type)
                      relation_RemovePlayer_ReqRoleType)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Concept.Thing)
                      @(HsProtobuf.Nested Concept.Thing)
                      relation_RemovePlayer_ReqPlayer))])
        decodeMessage _
          = (Hs.pure Relation_RemovePlayer_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                 @(_ (Hs.Maybe Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing))
                 @(_ (Hs.Maybe Concept.Thing))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "role_type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Thing")))
                (HsProtobuf.Single "player")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Relation_RemovePlayer_Req where
        toJSONPB (Relation_RemovePlayer_Req f1 f2)
          = (HsJSONPB.object ["role_type" .= f1, "player" .= f2])
        toEncodingPB (Relation_RemovePlayer_Req f1 f2)
          = (HsJSONPB.pairs ["role_type" .= f1, "player" .= f2])
 
instance HsJSONPB.FromJSONPB Relation_RemovePlayer_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_RemovePlayer_Req"
               (\ obj ->
                  (Hs.pure Relation_RemovePlayer_Req) <*> obj .: "role_type" <*>
                    obj .: "player"))
 
instance HsJSONPB.ToJSON Relation_RemovePlayer_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_RemovePlayer_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_RemovePlayer_Req where
        declareNamedSchema _
          = do let declare_role_type = HsJSONPB.declareSchemaRef
               relation_RemovePlayer_ReqRoleType <- declare_role_type Proxy.Proxy
               let declare_player = HsJSONPB.declareSchemaRef
               relation_RemovePlayer_ReqPlayer <- declare_player Proxy.Proxy
               let _ = Hs.pure Relation_RemovePlayer_Req <*>
                         HsJSONPB.asProxy declare_role_type
                         <*> HsJSONPB.asProxy declare_player
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_RemovePlayer_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("role_type",
                                                         relation_RemovePlayer_ReqRoleType),
                                                        ("player",
                                                         relation_RemovePlayer_ReqPlayer)]}})
 
data Relation_RemovePlayer_Res = Relation_RemovePlayer_Res{}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation_RemovePlayer_Res where
        nameOf _ = (Hs.fromString "Relation_RemovePlayer_Res")
 
instance HsProtobuf.HasDefault Relation_RemovePlayer_Res
 
instance HsProtobuf.Message Relation_RemovePlayer_Res where
        encodeMessage _ Relation_RemovePlayer_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Relation_RemovePlayer_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Relation_RemovePlayer_Res where
        toJSONPB (Relation_RemovePlayer_Res) = (HsJSONPB.object [])
        toEncodingPB (Relation_RemovePlayer_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Relation_RemovePlayer_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_RemovePlayer_Res"
               (\ obj -> (Hs.pure Relation_RemovePlayer_Res)))
 
instance HsJSONPB.ToJSON Relation_RemovePlayer_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_RemovePlayer_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_RemovePlayer_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_RemovePlayer_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Relation_GetPlayers = Relation_GetPlayers{}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation_GetPlayers where
        nameOf _ = (Hs.fromString "Relation_GetPlayers")
 
instance HsProtobuf.HasDefault Relation_GetPlayers
 
instance HsProtobuf.Message Relation_GetPlayers where
        encodeMessage _ Relation_GetPlayers{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Relation_GetPlayers)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Relation_GetPlayers where
        toJSONPB (Relation_GetPlayers) = (HsJSONPB.object [])
        toEncodingPB (Relation_GetPlayers) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Relation_GetPlayers where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_GetPlayers"
               (\ obj -> (Hs.pure Relation_GetPlayers)))
 
instance HsJSONPB.ToJSON Relation_GetPlayers where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_GetPlayers where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_GetPlayers where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_GetPlayers",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Relation_GetPlayers_Req = Relation_GetPlayers_Req{relation_GetPlayers_ReqRoleTypes
                                                          :: Hs.Vector Concept.Type}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation_GetPlayers_Req where
        nameOf _ = (Hs.fromString "Relation_GetPlayers_Req")
 
instance HsProtobuf.HasDefault Relation_GetPlayers_Req
 
instance HsProtobuf.Message Relation_GetPlayers_Req where
        encodeMessage _
          Relation_GetPlayers_Req{relation_GetPlayers_ReqRoleTypes =
                                    relation_GetPlayers_ReqRoleTypes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Type)
                      @(HsProtobuf.NestedVec Concept.Type)
                      relation_GetPlayers_ReqRoleTypes))])
        decodeMessage _
          = (Hs.pure Relation_GetPlayers_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Type))
                 @(_ (Hs.Vector Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "role_types")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Relation_GetPlayers_Req where
        toJSONPB (Relation_GetPlayers_Req f1)
          = (HsJSONPB.object ["role_types" .= f1])
        toEncodingPB (Relation_GetPlayers_Req f1)
          = (HsJSONPB.pairs ["role_types" .= f1])
 
instance HsJSONPB.FromJSONPB Relation_GetPlayers_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_GetPlayers_Req"
               (\ obj ->
                  (Hs.pure Relation_GetPlayers_Req) <*> obj .: "role_types"))
 
instance HsJSONPB.ToJSON Relation_GetPlayers_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_GetPlayers_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_GetPlayers_Req where
        declareNamedSchema _
          = do let declare_role_types = HsJSONPB.declareSchemaRef
               relation_GetPlayers_ReqRoleTypes <- declare_role_types Proxy.Proxy
               let _ = Hs.pure Relation_GetPlayers_Req <*>
                         HsJSONPB.asProxy declare_role_types
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_GetPlayers_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("role_types",
                                                         relation_GetPlayers_ReqRoleTypes)]}})
 
newtype Relation_GetPlayers_ResPart = Relation_GetPlayers_ResPart{relation_GetPlayers_ResPartThings
                                                                  :: Hs.Vector Concept.Thing}
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation_GetPlayers_ResPart where
        nameOf _ = (Hs.fromString "Relation_GetPlayers_ResPart")
 
instance HsProtobuf.HasDefault Relation_GetPlayers_ResPart
 
instance HsProtobuf.Message Relation_GetPlayers_ResPart where
        encodeMessage _
          Relation_GetPlayers_ResPart{relation_GetPlayers_ResPartThings =
                                        relation_GetPlayers_ResPartThings}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Thing)
                      @(HsProtobuf.NestedVec Concept.Thing)
                      relation_GetPlayers_ResPartThings))])
        decodeMessage _
          = (Hs.pure Relation_GetPlayers_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Thing))
                 @(_ (Hs.Vector Concept.Thing))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Thing")))
                (HsProtobuf.Single "things")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Relation_GetPlayers_ResPart where
        toJSONPB (Relation_GetPlayers_ResPart f1)
          = (HsJSONPB.object ["things" .= f1])
        toEncodingPB (Relation_GetPlayers_ResPart f1)
          = (HsJSONPB.pairs ["things" .= f1])
 
instance HsJSONPB.FromJSONPB Relation_GetPlayers_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_GetPlayers_ResPart"
               (\ obj ->
                  (Hs.pure Relation_GetPlayers_ResPart) <*> obj .: "things"))
 
instance HsJSONPB.ToJSON Relation_GetPlayers_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_GetPlayers_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_GetPlayers_ResPart where
        declareNamedSchema _
          = do let declare_things = HsJSONPB.declareSchemaRef
               relation_GetPlayers_ResPartThings <- declare_things Proxy.Proxy
               let _ = Hs.pure Relation_GetPlayers_ResPart <*>
                         HsJSONPB.asProxy declare_things
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_GetPlayers_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("things",
                                                         relation_GetPlayers_ResPartThings)]}})
 
data Relation_GetPlayersByRoleType = Relation_GetPlayersByRoleType{}
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation_GetPlayersByRoleType where
        nameOf _ = (Hs.fromString "Relation_GetPlayersByRoleType")
 
instance HsProtobuf.HasDefault Relation_GetPlayersByRoleType
 
instance HsProtobuf.Message Relation_GetPlayersByRoleType where
        encodeMessage _ Relation_GetPlayersByRoleType{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Relation_GetPlayersByRoleType)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Relation_GetPlayersByRoleType where
        toJSONPB (Relation_GetPlayersByRoleType) = (HsJSONPB.object [])
        toEncodingPB (Relation_GetPlayersByRoleType) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Relation_GetPlayersByRoleType where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_GetPlayersByRoleType"
               (\ obj -> (Hs.pure Relation_GetPlayersByRoleType)))
 
instance HsJSONPB.ToJSON Relation_GetPlayersByRoleType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_GetPlayersByRoleType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_GetPlayersByRoleType where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_GetPlayersByRoleType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Relation_GetPlayersByRoleType_RoleTypeWithPlayer = Relation_GetPlayersByRoleType_RoleTypeWithPlayer{relation_GetPlayersByRoleType_RoleTypeWithPlayerRoleType
                                                                                                         ::
                                                                                                         Hs.Maybe
                                                                                                           Concept.Type,
                                                                                                         relation_GetPlayersByRoleType_RoleTypeWithPlayerPlayer
                                                                                                         ::
                                                                                                         Hs.Maybe
                                                                                                           Concept.Thing}
                                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                                Hs.NFData)
 
instance HsProtobuf.Named
         Relation_GetPlayersByRoleType_RoleTypeWithPlayer where
        nameOf _
          = (Hs.fromString
               "Relation_GetPlayersByRoleType_RoleTypeWithPlayer")
 
instance HsProtobuf.HasDefault
         Relation_GetPlayersByRoleType_RoleTypeWithPlayer
 
instance HsProtobuf.Message
         Relation_GetPlayersByRoleType_RoleTypeWithPlayer where
        encodeMessage _
          Relation_GetPlayersByRoleType_RoleTypeWithPlayer{relation_GetPlayersByRoleType_RoleTypeWithPlayerRoleType
                                                             =
                                                             relation_GetPlayersByRoleType_RoleTypeWithPlayerRoleType,
                                                           relation_GetPlayersByRoleType_RoleTypeWithPlayerPlayer
                                                             =
                                                             relation_GetPlayersByRoleType_RoleTypeWithPlayerPlayer}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Type)
                      @(HsProtobuf.Nested Concept.Type)
                      relation_GetPlayersByRoleType_RoleTypeWithPlayerRoleType)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Concept.Thing)
                      @(HsProtobuf.Nested Concept.Thing)
                      relation_GetPlayersByRoleType_RoleTypeWithPlayerPlayer))])
        decodeMessage _
          = (Hs.pure Relation_GetPlayersByRoleType_RoleTypeWithPlayer) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                 @(_ (Hs.Maybe Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing))
                 @(_ (Hs.Maybe Concept.Thing))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "role_type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Thing")))
                (HsProtobuf.Single "player")
                []
                "")]
 
instance HsJSONPB.ToJSONPB
         Relation_GetPlayersByRoleType_RoleTypeWithPlayer where
        toJSONPB (Relation_GetPlayersByRoleType_RoleTypeWithPlayer f1 f2)
          = (HsJSONPB.object ["role_type" .= f1, "player" .= f2])
        toEncodingPB
          (Relation_GetPlayersByRoleType_RoleTypeWithPlayer f1 f2)
          = (HsJSONPB.pairs ["role_type" .= f1, "player" .= f2])
 
instance HsJSONPB.FromJSONPB
         Relation_GetPlayersByRoleType_RoleTypeWithPlayer where
        parseJSONPB
          = (HsJSONPB.withObject
               "Relation_GetPlayersByRoleType_RoleTypeWithPlayer"
               (\ obj ->
                  (Hs.pure Relation_GetPlayersByRoleType_RoleTypeWithPlayer) <*>
                    obj .: "role_type"
                    <*> obj .: "player"))
 
instance HsJSONPB.ToJSON
         Relation_GetPlayersByRoleType_RoleTypeWithPlayer where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON
         Relation_GetPlayersByRoleType_RoleTypeWithPlayer where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema
         Relation_GetPlayersByRoleType_RoleTypeWithPlayer where
        declareNamedSchema _
          = do let declare_role_type = HsJSONPB.declareSchemaRef
               relation_GetPlayersByRoleType_RoleTypeWithPlayerRoleType <- declare_role_type
                                                                             Proxy.Proxy
               let declare_player = HsJSONPB.declareSchemaRef
               relation_GetPlayersByRoleType_RoleTypeWithPlayerPlayer <- declare_player
                                                                           Proxy.Proxy
               let _ = Hs.pure Relation_GetPlayersByRoleType_RoleTypeWithPlayer
                         <*> HsJSONPB.asProxy declare_role_type
                         <*> HsJSONPB.asProxy declare_player
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_GetPlayersByRoleType_RoleTypeWithPlayer",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("role_type",
                                                         relation_GetPlayersByRoleType_RoleTypeWithPlayerRoleType),
                                                        ("player",
                                                         relation_GetPlayersByRoleType_RoleTypeWithPlayerPlayer)]}})
 
data Relation_GetPlayersByRoleType_Req = Relation_GetPlayersByRoleType_Req{}
                                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation_GetPlayersByRoleType_Req where
        nameOf _ = (Hs.fromString "Relation_GetPlayersByRoleType_Req")
 
instance HsProtobuf.HasDefault Relation_GetPlayersByRoleType_Req
 
instance HsProtobuf.Message Relation_GetPlayersByRoleType_Req where
        encodeMessage _ Relation_GetPlayersByRoleType_Req{}
          = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Relation_GetPlayersByRoleType_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Relation_GetPlayersByRoleType_Req where
        toJSONPB (Relation_GetPlayersByRoleType_Req) = (HsJSONPB.object [])
        toEncodingPB (Relation_GetPlayersByRoleType_Req)
          = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Relation_GetPlayersByRoleType_Req
         where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_GetPlayersByRoleType_Req"
               (\ obj -> (Hs.pure Relation_GetPlayersByRoleType_Req)))
 
instance HsJSONPB.ToJSON Relation_GetPlayersByRoleType_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_GetPlayersByRoleType_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_GetPlayersByRoleType_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_GetPlayersByRoleType_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Relation_GetPlayersByRoleType_ResPart = Relation_GetPlayersByRoleType_ResPart{relation_GetPlayersByRoleType_ResPartRoleTypesWithPlayers
                                                                                      ::
                                                                                      Hs.Vector
                                                                                        Concept.GetPlayersByRoleType_RoleTypeWithPlayer}
                                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                          Hs.NFData)
 
instance HsProtobuf.Named Relation_GetPlayersByRoleType_ResPart
         where
        nameOf _ = (Hs.fromString "Relation_GetPlayersByRoleType_ResPart")
 
instance HsProtobuf.HasDefault
         Relation_GetPlayersByRoleType_ResPart
 
instance HsProtobuf.Message Relation_GetPlayersByRoleType_ResPart
         where
        encodeMessage _
          Relation_GetPlayersByRoleType_ResPart{relation_GetPlayersByRoleType_ResPartRoleTypesWithPlayers
                                                  =
                                                  relation_GetPlayersByRoleType_ResPartRoleTypesWithPlayers}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce
                      @(Hs.Vector Concept.GetPlayersByRoleType_RoleTypeWithPlayer)
                      @(HsProtobuf.NestedVec Concept.GetPlayersByRoleType_RoleTypeWithPlayer)
                      relation_GetPlayersByRoleType_ResPartRoleTypesWithPlayers))])
        decodeMessage _
          = (Hs.pure Relation_GetPlayersByRoleType_ResPart) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Concept.GetPlayersByRoleType_RoleTypeWithPlayer))
                 @(_ (Hs.Vector Concept.GetPlayersByRoleType_RoleTypeWithPlayer))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "RoleTypeWithPlayer")))
                (HsProtobuf.Single "role_types_with_players")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Relation_GetPlayersByRoleType_ResPart
         where
        toJSONPB (Relation_GetPlayersByRoleType_ResPart f1)
          = (HsJSONPB.object ["role_types_with_players" .= f1])
        toEncodingPB (Relation_GetPlayersByRoleType_ResPart f1)
          = (HsJSONPB.pairs ["role_types_with_players" .= f1])
 
instance HsJSONPB.FromJSONPB Relation_GetPlayersByRoleType_ResPart
         where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_GetPlayersByRoleType_ResPart"
               (\ obj ->
                  (Hs.pure Relation_GetPlayersByRoleType_ResPart) <*>
                    obj .: "role_types_with_players"))
 
instance HsJSONPB.ToJSON Relation_GetPlayersByRoleType_ResPart
         where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_GetPlayersByRoleType_ResPart
         where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_GetPlayersByRoleType_ResPart
         where
        declareNamedSchema _
          = do let declare_role_types_with_players
                     = HsJSONPB.declareSchemaRef
               relation_GetPlayersByRoleType_ResPartRoleTypesWithPlayers <- declare_role_types_with_players
                                                                              Proxy.Proxy
               let _ = Hs.pure Relation_GetPlayersByRoleType_ResPart <*>
                         HsJSONPB.asProxy declare_role_types_with_players
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_GetPlayersByRoleType_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("role_types_with_players",
                                                         relation_GetPlayersByRoleType_ResPartRoleTypesWithPlayers)]}})
 
data Relation_GetRelating = Relation_GetRelating{}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation_GetRelating where
        nameOf _ = (Hs.fromString "Relation_GetRelating")
 
instance HsProtobuf.HasDefault Relation_GetRelating
 
instance HsProtobuf.Message Relation_GetRelating where
        encodeMessage _ Relation_GetRelating{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Relation_GetRelating)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Relation_GetRelating where
        toJSONPB (Relation_GetRelating) = (HsJSONPB.object [])
        toEncodingPB (Relation_GetRelating) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Relation_GetRelating where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_GetRelating"
               (\ obj -> (Hs.pure Relation_GetRelating)))
 
instance HsJSONPB.ToJSON Relation_GetRelating where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_GetRelating where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_GetRelating where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_GetRelating",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Relation_GetRelating_Req = Relation_GetRelating_Req{}
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation_GetRelating_Req where
        nameOf _ = (Hs.fromString "Relation_GetRelating_Req")
 
instance HsProtobuf.HasDefault Relation_GetRelating_Req
 
instance HsProtobuf.Message Relation_GetRelating_Req where
        encodeMessage _ Relation_GetRelating_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Relation_GetRelating_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Relation_GetRelating_Req where
        toJSONPB (Relation_GetRelating_Req) = (HsJSONPB.object [])
        toEncodingPB (Relation_GetRelating_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Relation_GetRelating_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_GetRelating_Req"
               (\ obj -> (Hs.pure Relation_GetRelating_Req)))
 
instance HsJSONPB.ToJSON Relation_GetRelating_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_GetRelating_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_GetRelating_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_GetRelating_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Relation_GetRelating_ResPart = Relation_GetRelating_ResPart{relation_GetRelating_ResPartRoleTypes
                                                                    :: Hs.Vector Concept.Type}
                                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Relation_GetRelating_ResPart where
        nameOf _ = (Hs.fromString "Relation_GetRelating_ResPart")
 
instance HsProtobuf.HasDefault Relation_GetRelating_ResPart
 
instance HsProtobuf.Message Relation_GetRelating_ResPart where
        encodeMessage _
          Relation_GetRelating_ResPart{relation_GetRelating_ResPartRoleTypes
                                         = relation_GetRelating_ResPartRoleTypes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Type)
                      @(HsProtobuf.NestedVec Concept.Type)
                      relation_GetRelating_ResPartRoleTypes))])
        decodeMessage _
          = (Hs.pure Relation_GetRelating_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Type))
                 @(_ (Hs.Vector Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "role_types")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Relation_GetRelating_ResPart where
        toJSONPB (Relation_GetRelating_ResPart f1)
          = (HsJSONPB.object ["role_types" .= f1])
        toEncodingPB (Relation_GetRelating_ResPart f1)
          = (HsJSONPB.pairs ["role_types" .= f1])
 
instance HsJSONPB.FromJSONPB Relation_GetRelating_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "Relation_GetRelating_ResPart"
               (\ obj ->
                  (Hs.pure Relation_GetRelating_ResPart) <*> obj .: "role_types"))
 
instance HsJSONPB.ToJSON Relation_GetRelating_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Relation_GetRelating_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Relation_GetRelating_ResPart where
        declareNamedSchema _
          = do let declare_role_types = HsJSONPB.declareSchemaRef
               relation_GetRelating_ResPartRoleTypes <- declare_role_types
                                                          Proxy.Proxy
               let _ = Hs.pure Relation_GetRelating_ResPart <*>
                         HsJSONPB.asProxy declare_role_types
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Relation_GetRelating_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("role_types",
                                                         relation_GetRelating_ResPartRoleTypes)]}})
 
data Attribute = Attribute{}
               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Attribute where
        nameOf _ = (Hs.fromString "Attribute")
 
instance HsProtobuf.HasDefault Attribute
 
instance HsProtobuf.Message Attribute where
        encodeMessage _ Attribute{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Attribute)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Attribute where
        toJSONPB (Attribute) = (HsJSONPB.object [])
        toEncodingPB (Attribute) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Attribute where
        parseJSONPB
          = (HsJSONPB.withObject "Attribute" (\ obj -> (Hs.pure Attribute)))
 
instance HsJSONPB.ToJSON Attribute where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Attribute where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Attribute where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Attribute",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Attribute_Value = Attribute_Value{attribute_ValueValue ::
                                          Hs.Maybe Attribute_ValueValue}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Attribute_Value where
        nameOf _ = (Hs.fromString "Attribute_Value")
 
instance HsProtobuf.HasDefault Attribute_Value
 
instance HsProtobuf.Message Attribute_Value where
        encodeMessage _
          Attribute_Value{attribute_ValueValue = attribute_ValueValue}
          = (Hs.mconcat
               [case attribute_ValueValue of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Attribute_ValueValueString y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (HsProtobuf.ForceEmit y))
                             Attribute_ValueValueBoolean y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (HsProtobuf.ForceEmit y))
                             Attribute_ValueValueLong y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (HsProtobuf.ForceEmit y))
                             Attribute_ValueValueDouble y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (HsProtobuf.ForceEmit y))
                             Attribute_ValueValueDateTime y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (HsProtobuf.ForceEmit y))])
        decodeMessage _
          = (Hs.pure Attribute_Value) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.Just Hs.. Attribute_ValueValueString)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.Just Hs.. Attribute_ValueValueBoolean)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.Just Hs.. Attribute_ValueValueLong)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.Just Hs.. Attribute_ValueValueDouble)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 5),
                   (Hs.pure (Hs.Just Hs.. Attribute_ValueValueDateTime)) <*>
                     HsProtobuf.decodeMessageField)])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Attribute_Value where
        toJSONPB (Attribute_Value f1_or_f2_or_f3_or_f4_or_f5)
          = (HsJSONPB.object
               [(let encodeValue
                       = (case f1_or_f2_or_f3_or_f4_or_f5 of
                              Hs.Just (Attribute_ValueValueString f1)
                                -> (HsJSONPB.pair "string" f1)
                              Hs.Just (Attribute_ValueValueBoolean f2)
                                -> (HsJSONPB.pair "boolean" f2)
                              Hs.Just (Attribute_ValueValueLong f3) -> (HsJSONPB.pair "long" f3)
                              Hs.Just (Attribute_ValueValueDouble f4)
                                -> (HsJSONPB.pair "double" f4)
                              Hs.Just (Attribute_ValueValueDateTime f5)
                                -> (HsJSONPB.pair "date_time" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("value" .= (HsJSONPB.objectOrNull [encodeValue] options)) options
                       else encodeValue options)])
        toEncodingPB (Attribute_Value f1_or_f2_or_f3_or_f4_or_f5)
          = (HsJSONPB.pairs
               [(let encodeValue
                       = (case f1_or_f2_or_f3_or_f4_or_f5 of
                              Hs.Just (Attribute_ValueValueString f1)
                                -> (HsJSONPB.pair "string" f1)
                              Hs.Just (Attribute_ValueValueBoolean f2)
                                -> (HsJSONPB.pair "boolean" f2)
                              Hs.Just (Attribute_ValueValueLong f3) -> (HsJSONPB.pair "long" f3)
                              Hs.Just (Attribute_ValueValueDouble f4)
                                -> (HsJSONPB.pair "double" f4)
                              Hs.Just (Attribute_ValueValueDateTime f5)
                                -> (HsJSONPB.pair "date_time" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("value" .= (HsJSONPB.pairsOrNull [encodeValue] options)) options
                       else encodeValue options)])
 
instance HsJSONPB.FromJSONPB Attribute_Value where
        parseJSONPB
          = (HsJSONPB.withObject "Attribute_Value"
               (\ obj ->
                  (Hs.pure Attribute_Value) <*>
                    (let parseValue parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Attribute_ValueValueString <$>
                                  (HsJSONPB.parseField parseObj "string"),
                                Hs.Just Hs.. Attribute_ValueValueBoolean <$>
                                  (HsJSONPB.parseField parseObj "boolean"),
                                Hs.Just Hs.. Attribute_ValueValueLong <$>
                                  (HsJSONPB.parseField parseObj "long"),
                                Hs.Just Hs.. Attribute_ValueValueDouble <$>
                                  (HsJSONPB.parseField parseObj "double"),
                                Hs.Just Hs.. Attribute_ValueValueDateTime <$>
                                  (HsJSONPB.parseField parseObj "date_time"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "value") Hs.>>= (HsJSONPB.withObject "value" parseValue))
                         <|> (parseValue obj))))
 
instance HsJSONPB.ToJSON Attribute_Value where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Attribute_Value where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Attribute_Value where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               attribute_ValueValue <- declare_value Proxy.Proxy
               let _ = Hs.pure Attribute_Value <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Attribute_Value",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", attribute_ValueValue)]}})
 
data Attribute_ValueValue = Attribute_ValueValueString Hs.Text
                          | Attribute_ValueValueBoolean Hs.Bool
                          | Attribute_ValueValueLong Hs.Int64
                          | Attribute_ValueValueDouble Hs.Double
                          | Attribute_ValueValueDateTime Hs.Int64
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Attribute_ValueValue where
        nameOf _ = (Hs.fromString "Attribute_ValueValue")
 
instance HsJSONPB.ToSchema Attribute_ValueValue where
        declareNamedSchema _
          = do let declare_string = HsJSONPB.declareSchemaRef
               attribute_ValueValueString <- declare_string Proxy.Proxy
               let _ = Hs.pure Attribute_ValueValueString <*>
                         HsJSONPB.asProxy declare_string
               let declare_boolean = HsJSONPB.declareSchemaRef
               attribute_ValueValueBoolean <- declare_boolean Proxy.Proxy
               let _ = Hs.pure Attribute_ValueValueBoolean <*>
                         HsJSONPB.asProxy declare_boolean
               let declare_long = HsJSONPB.declareSchemaRef
               attribute_ValueValueLong <- declare_long Proxy.Proxy
               let _ = Hs.pure Attribute_ValueValueLong <*>
                         HsJSONPB.asProxy declare_long
               let declare_double = HsJSONPB.declareSchemaRef
               attribute_ValueValueDouble <- declare_double Proxy.Proxy
               let _ = Hs.pure Attribute_ValueValueDouble <*>
                         HsJSONPB.asProxy declare_double
               let declare_date_time = HsJSONPB.declareSchemaRef
               attribute_ValueValueDateTime <- declare_date_time Proxy.Proxy
               let _ = Hs.pure Attribute_ValueValueDateTime <*>
                         HsJSONPB.asProxy declare_date_time
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Attribute_ValueValue",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("string", attribute_ValueValueString),
                                                        ("boolean", attribute_ValueValueBoolean),
                                                        ("long", attribute_ValueValueLong),
                                                        ("double", attribute_ValueValueDouble),
                                                        ("date_time",
                                                         attribute_ValueValueDateTime)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data Attribute_GetOwners = Attribute_GetOwners{}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Attribute_GetOwners where
        nameOf _ = (Hs.fromString "Attribute_GetOwners")
 
instance HsProtobuf.HasDefault Attribute_GetOwners
 
instance HsProtobuf.Message Attribute_GetOwners where
        encodeMessage _ Attribute_GetOwners{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Attribute_GetOwners)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Attribute_GetOwners where
        toJSONPB (Attribute_GetOwners) = (HsJSONPB.object [])
        toEncodingPB (Attribute_GetOwners) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Attribute_GetOwners where
        parseJSONPB
          = (HsJSONPB.withObject "Attribute_GetOwners"
               (\ obj -> (Hs.pure Attribute_GetOwners)))
 
instance HsJSONPB.ToJSON Attribute_GetOwners where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Attribute_GetOwners where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Attribute_GetOwners where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Attribute_GetOwners",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Attribute_GetOwners_Req = Attribute_GetOwners_Req{attribute_GetOwners_ReqFilter
                                                          :: Hs.Maybe Attribute_GetOwners_ReqFilter}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Attribute_GetOwners_Req where
        nameOf _ = (Hs.fromString "Attribute_GetOwners_Req")
 
instance HsProtobuf.HasDefault Attribute_GetOwners_Req
 
instance HsProtobuf.Message Attribute_GetOwners_Req where
        encodeMessage _
          Attribute_GetOwners_Req{attribute_GetOwners_ReqFilter =
                                    attribute_GetOwners_ReqFilter}
          = (Hs.mconcat
               [case attribute_GetOwners_ReqFilter of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Attribute_GetOwners_ReqFilterThingType y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Concept.Type)
                                        @(HsProtobuf.Nested Concept.Type)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Attribute_GetOwners_Req) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap Attribute_GetOwners_ReqFilterThingType)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                        @(_ (Hs.Maybe Concept.Type))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Attribute_GetOwners_Req where
        toJSONPB (Attribute_GetOwners_Req f1)
          = (HsJSONPB.object
               [(let encodeFilter
                       = (case f1 of
                              Hs.Just (Attribute_GetOwners_ReqFilterThingType f1)
                                -> (HsJSONPB.pair "thing_type" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("filter" .= (HsJSONPB.objectOrNull [encodeFilter] options))
                         options
                       else encodeFilter options)])
        toEncodingPB (Attribute_GetOwners_Req f1)
          = (HsJSONPB.pairs
               [(let encodeFilter
                       = (case f1 of
                              Hs.Just (Attribute_GetOwners_ReqFilterThingType f1)
                                -> (HsJSONPB.pair "thing_type" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("filter" .= (HsJSONPB.pairsOrNull [encodeFilter] options)) options
                       else encodeFilter options)])
 
instance HsJSONPB.FromJSONPB Attribute_GetOwners_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Attribute_GetOwners_Req"
               (\ obj ->
                  (Hs.pure Attribute_GetOwners_Req) <*>
                    (let parseFilter parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Attribute_GetOwners_ReqFilterThingType <$>
                                  (HsJSONPB.parseField parseObj "thing_type"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "filter") Hs.>>=
                          (HsJSONPB.withObject "filter" parseFilter))
                         <|> (parseFilter obj))))
 
instance HsJSONPB.ToJSON Attribute_GetOwners_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Attribute_GetOwners_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Attribute_GetOwners_Req where
        declareNamedSchema _
          = do let declare_filter = HsJSONPB.declareSchemaRef
               attribute_GetOwners_ReqFilter <- declare_filter Proxy.Proxy
               let _ = Hs.pure Attribute_GetOwners_Req <*>
                         HsJSONPB.asProxy declare_filter
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Attribute_GetOwners_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("filter",
                                                         attribute_GetOwners_ReqFilter)]}})
 
data Attribute_GetOwners_ReqFilter = Attribute_GetOwners_ReqFilterThingType Concept.Type
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Attribute_GetOwners_ReqFilter where
        nameOf _ = (Hs.fromString "Attribute_GetOwners_ReqFilter")
 
instance HsJSONPB.ToSchema Attribute_GetOwners_ReqFilter where
        declareNamedSchema _
          = do let declare_thing_type = HsJSONPB.declareSchemaRef
               attribute_GetOwners_ReqFilterThingType <- declare_thing_type
                                                           Proxy.Proxy
               let _ = Hs.pure Attribute_GetOwners_ReqFilterThingType <*>
                         HsJSONPB.asProxy declare_thing_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Attribute_GetOwners_ReqFilter",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("thing_type",
                                                         attribute_GetOwners_ReqFilterThingType)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype Attribute_GetOwners_ResPart = Attribute_GetOwners_ResPart{attribute_GetOwners_ResPartThings
                                                                  :: Hs.Vector Concept.Thing}
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Attribute_GetOwners_ResPart where
        nameOf _ = (Hs.fromString "Attribute_GetOwners_ResPart")
 
instance HsProtobuf.HasDefault Attribute_GetOwners_ResPart
 
instance HsProtobuf.Message Attribute_GetOwners_ResPart where
        encodeMessage _
          Attribute_GetOwners_ResPart{attribute_GetOwners_ResPartThings =
                                        attribute_GetOwners_ResPartThings}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Thing)
                      @(HsProtobuf.NestedVec Concept.Thing)
                      attribute_GetOwners_ResPartThings))])
        decodeMessage _
          = (Hs.pure Attribute_GetOwners_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Thing))
                 @(_ (Hs.Vector Concept.Thing))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Thing")))
                (HsProtobuf.Single "things")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Attribute_GetOwners_ResPart where
        toJSONPB (Attribute_GetOwners_ResPart f1)
          = (HsJSONPB.object ["things" .= f1])
        toEncodingPB (Attribute_GetOwners_ResPart f1)
          = (HsJSONPB.pairs ["things" .= f1])
 
instance HsJSONPB.FromJSONPB Attribute_GetOwners_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "Attribute_GetOwners_ResPart"
               (\ obj ->
                  (Hs.pure Attribute_GetOwners_ResPart) <*> obj .: "things"))
 
instance HsJSONPB.ToJSON Attribute_GetOwners_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Attribute_GetOwners_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Attribute_GetOwners_ResPart where
        declareNamedSchema _
          = do let declare_things = HsJSONPB.declareSchemaRef
               attribute_GetOwners_ResPartThings <- declare_things Proxy.Proxy
               let _ = Hs.pure Attribute_GetOwners_ResPart <*>
                         HsJSONPB.asProxy declare_things
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Attribute_GetOwners_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("things",
                                                         attribute_GetOwners_ResPartThings)]}})
 
data Type = Type{typeLabel :: Hs.Text, typeScope :: Hs.Text,
                 typeEncoding :: HsProtobuf.Enumerated Concept.Type_Encoding,
                 typeValueType ::
                 HsProtobuf.Enumerated Concept.AttributeType_ValueType,
                 typeRoot :: Hs.Bool}
          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type where
        nameOf _ = (Hs.fromString "Type")
 
instance HsProtobuf.HasDefault Type
 
instance HsProtobuf.Message Type where
        encodeMessage _
          Type{typeLabel = typeLabel, typeScope = typeScope,
               typeEncoding = typeEncoding, typeValueType = typeValueType,
               typeRoot = typeRoot}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   typeLabel),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   typeScope),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   typeEncoding),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   typeValueType),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   typeRoot)])
        decodeMessage _
          = (Hs.pure Type) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "scope")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Encoding")))
                (HsProtobuf.Single "encoding")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path ("AttributeType" Hs.:| ["ValueType"])))))
                (HsProtobuf.Single "value_type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "root")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Type where
        toJSONPB (Type f1 f2 f3 f4 f5)
          = (HsJSONPB.object
               ["label" .= f1, "scope" .= f2, "encoding" .= f3,
                "value_type" .= f4, "root" .= f5])
        toEncodingPB (Type f1 f2 f3 f4 f5)
          = (HsJSONPB.pairs
               ["label" .= f1, "scope" .= f2, "encoding" .= f3,
                "value_type" .= f4, "root" .= f5])
 
instance HsJSONPB.FromJSONPB Type where
        parseJSONPB
          = (HsJSONPB.withObject "Type"
               (\ obj ->
                  (Hs.pure Type) <*> obj .: "label" <*> obj .: "scope" <*>
                    obj .: "encoding"
                    <*> obj .: "value_type"
                    <*> obj .: "root"))
 
instance HsJSONPB.ToJSON Type where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               typeLabel <- declare_label Proxy.Proxy
               let declare_scope = HsJSONPB.declareSchemaRef
               typeScope <- declare_scope Proxy.Proxy
               let declare_encoding = HsJSONPB.declareSchemaRef
               typeEncoding <- declare_encoding Proxy.Proxy
               let declare_value_type = HsJSONPB.declareSchemaRef
               typeValueType <- declare_value_type Proxy.Proxy
               let declare_root = HsJSONPB.declareSchemaRef
               typeRoot <- declare_root Proxy.Proxy
               let _ = Hs.pure Type <*> HsJSONPB.asProxy declare_label <*>
                         HsJSONPB.asProxy declare_scope
                         <*> HsJSONPB.asProxy declare_encoding
                         <*> HsJSONPB.asProxy declare_value_type
                         <*> HsJSONPB.asProxy declare_root
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Type",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label", typeLabel), ("scope", typeScope),
                                                        ("encoding", typeEncoding),
                                                        ("value_type", typeValueType),
                                                        ("root", typeRoot)]}})
 
data Type_Req = Type_Req{type_ReqLabel :: Hs.Text,
                         type_ReqScope :: Hs.Text, type_ReqReq :: Hs.Maybe Type_ReqReq}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_Req where
        nameOf _ = (Hs.fromString "Type_Req")
 
instance HsProtobuf.HasDefault Type_Req
 
instance HsProtobuf.Message Type_Req where
        encodeMessage _
          Type_Req{type_ReqLabel = type_ReqLabel,
                   type_ReqScope = type_ReqScope, type_ReqReq = type_ReqReq}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   type_ReqLabel),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   type_ReqScope),
                case type_ReqReq of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Type_ReqReqTypeDeleteReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 100)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_Delete_Req)
                                        @(HsProtobuf.Nested Concept.Type_Delete_Req)
                                        (Hs.Just y)))
                             Type_ReqReqTypeSetLabelReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 101)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_SetLabel_Req)
                                        @(HsProtobuf.Nested Concept.Type_SetLabel_Req)
                                        (Hs.Just y)))
                             Type_ReqReqTypeIsAbstractReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 102)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_IsAbstract_Req)
                                        @(HsProtobuf.Nested Concept.Type_IsAbstract_Req)
                                        (Hs.Just y)))
                             Type_ReqReqTypeGetSupertypeReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 103)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_GetSupertype_Req)
                                        @(HsProtobuf.Nested Concept.Type_GetSupertype_Req)
                                        (Hs.Just y)))
                             Type_ReqReqTypeSetSupertypeReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 104)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_SetSupertype_Req)
                                        @(HsProtobuf.Nested Concept.Type_SetSupertype_Req)
                                        (Hs.Just y)))
                             Type_ReqReqTypeGetSupertypesReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 105)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_GetSupertypes_Req)
                                        @(HsProtobuf.Nested Concept.Type_GetSupertypes_Req)
                                        (Hs.Just y)))
                             Type_ReqReqTypeGetSubtypesReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 106)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_GetSubtypes_Req)
                                        @(HsProtobuf.Nested Concept.Type_GetSubtypes_Req)
                                        (Hs.Just y)))
                             Type_ReqReqRoleTypeGetRelationTypesReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 200)
                                     (Hs.coerce @(Hs.Maybe Concept.RoleType_GetRelationTypes_Req)
                                        @(HsProtobuf.Nested Concept.RoleType_GetRelationTypes_Req)
                                        (Hs.Just y)))
                             Type_ReqReqRoleTypeGetPlayersReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 201)
                                     (Hs.coerce @(Hs.Maybe Concept.RoleType_GetPlayers_Req)
                                        @(HsProtobuf.Nested Concept.RoleType_GetPlayers_Req)
                                        (Hs.Just y)))
                             Type_ReqReqThingTypeGetInstancesReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 300)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_GetInstances_Req)
                                        @(HsProtobuf.Nested Concept.ThingType_GetInstances_Req)
                                        (Hs.Just y)))
                             Type_ReqReqThingTypeSetAbstractReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 301)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_SetAbstract_Req)
                                        @(HsProtobuf.Nested Concept.ThingType_SetAbstract_Req)
                                        (Hs.Just y)))
                             Type_ReqReqThingTypeUnsetAbstractReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 302)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_UnsetAbstract_Req)
                                        @(HsProtobuf.Nested Concept.ThingType_UnsetAbstract_Req)
                                        (Hs.Just y)))
                             Type_ReqReqThingTypeGetOwnsReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 303)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_GetOwns_Req)
                                        @(HsProtobuf.Nested Concept.ThingType_GetOwns_Req)
                                        (Hs.Just y)))
                             Type_ReqReqThingTypeSetOwnsReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 304)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_SetOwns_Req)
                                        @(HsProtobuf.Nested Concept.ThingType_SetOwns_Req)
                                        (Hs.Just y)))
                             Type_ReqReqThingTypeUnsetOwnsReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 305)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_UnsetOwns_Req)
                                        @(HsProtobuf.Nested Concept.ThingType_UnsetOwns_Req)
                                        (Hs.Just y)))
                             Type_ReqReqThingTypeGetPlaysReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 306)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_GetPlays_Req)
                                        @(HsProtobuf.Nested Concept.ThingType_GetPlays_Req)
                                        (Hs.Just y)))
                             Type_ReqReqThingTypeSetPlaysReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 307)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_SetPlays_Req)
                                        @(HsProtobuf.Nested Concept.ThingType_SetPlays_Req)
                                        (Hs.Just y)))
                             Type_ReqReqThingTypeUnsetPlaysReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 308)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_UnsetPlays_Req)
                                        @(HsProtobuf.Nested Concept.ThingType_UnsetPlays_Req)
                                        (Hs.Just y)))
                             Type_ReqReqEntityTypeCreateReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 400)
                                     (Hs.coerce @(Hs.Maybe Concept.EntityType_Create_Req)
                                        @(HsProtobuf.Nested Concept.EntityType_Create_Req)
                                        (Hs.Just y)))
                             Type_ReqReqRelationTypeCreateReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 500)
                                     (Hs.coerce @(Hs.Maybe Concept.RelationType_Create_Req)
                                        @(HsProtobuf.Nested Concept.RelationType_Create_Req)
                                        (Hs.Just y)))
                             Type_ReqReqRelationTypeGetRelatesForRoleLabelReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 501)
                                     (Hs.coerce
                                        @(Hs.Maybe Concept.RelationType_GetRelatesForRoleLabel_Req)
                                        @(HsProtobuf.Nested Concept.RelationType_GetRelatesForRoleLabel_Req)
                                        (Hs.Just y)))
                             Type_ReqReqRelationTypeGetRelatesReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 502)
                                     (Hs.coerce @(Hs.Maybe Concept.RelationType_GetRelates_Req)
                                        @(HsProtobuf.Nested Concept.RelationType_GetRelates_Req)
                                        (Hs.Just y)))
                             Type_ReqReqRelationTypeSetRelatesReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 503)
                                     (Hs.coerce @(Hs.Maybe Concept.RelationType_SetRelates_Req)
                                        @(HsProtobuf.Nested Concept.RelationType_SetRelates_Req)
                                        (Hs.Just y)))
                             Type_ReqReqRelationTypeUnsetRelatesReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 504)
                                     (Hs.coerce @(Hs.Maybe Concept.RelationType_UnsetRelates_Req)
                                        @(HsProtobuf.Nested Concept.RelationType_UnsetRelates_Req)
                                        (Hs.Just y)))
                             Type_ReqReqAttributeTypePutReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 600)
                                     (Hs.coerce @(Hs.Maybe Concept.AttributeType_Put_Req)
                                        @(HsProtobuf.Nested Concept.AttributeType_Put_Req)
                                        (Hs.Just y)))
                             Type_ReqReqAttributeTypeGetReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 601)
                                     (Hs.coerce @(Hs.Maybe Concept.AttributeType_Get_Req)
                                        @(HsProtobuf.Nested Concept.AttributeType_Get_Req)
                                        (Hs.Just y)))
                             Type_ReqReqAttributeTypeGetRegexReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 602)
                                     (Hs.coerce @(Hs.Maybe Concept.AttributeType_GetRegex_Req)
                                        @(HsProtobuf.Nested Concept.AttributeType_GetRegex_Req)
                                        (Hs.Just y)))
                             Type_ReqReqAttributeTypeSetRegexReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 603)
                                     (Hs.coerce @(Hs.Maybe Concept.AttributeType_SetRegex_Req)
                                        @(HsProtobuf.Nested Concept.AttributeType_SetRegex_Req)
                                        (Hs.Just y)))
                             Type_ReqReqAttributeTypeGetOwnersReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 604)
                                     (Hs.coerce @(Hs.Maybe Concept.AttributeType_GetOwners_Req)
                                        @(HsProtobuf.Nested Concept.AttributeType_GetOwners_Req)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Type_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 100),
                   (Hs.pure (Hs.fmap Type_ReqReqTypeDeleteReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_Delete_Req))
                        @(_ (Hs.Maybe Concept.Type_Delete_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 101),
                   (Hs.pure (Hs.fmap Type_ReqReqTypeSetLabelReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_SetLabel_Req))
                        @(_ (Hs.Maybe Concept.Type_SetLabel_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 102),
                   (Hs.pure (Hs.fmap Type_ReqReqTypeIsAbstractReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_IsAbstract_Req))
                        @(_ (Hs.Maybe Concept.Type_IsAbstract_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 103),
                   (Hs.pure (Hs.fmap Type_ReqReqTypeGetSupertypeReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_GetSupertype_Req))
                        @(_ (Hs.Maybe Concept.Type_GetSupertype_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 104),
                   (Hs.pure (Hs.fmap Type_ReqReqTypeSetSupertypeReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_SetSupertype_Req))
                        @(_ (Hs.Maybe Concept.Type_SetSupertype_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 105),
                   (Hs.pure (Hs.fmap Type_ReqReqTypeGetSupertypesReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_GetSupertypes_Req))
                        @(_ (Hs.Maybe Concept.Type_GetSupertypes_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 106),
                   (Hs.pure (Hs.fmap Type_ReqReqTypeGetSubtypesReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_GetSubtypes_Req))
                        @(_ (Hs.Maybe Concept.Type_GetSubtypes_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 200),
                   (Hs.pure (Hs.fmap Type_ReqReqRoleTypeGetRelationTypesReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.RoleType_GetRelationTypes_Req))
                        @(_ (Hs.Maybe Concept.RoleType_GetRelationTypes_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 201),
                   (Hs.pure (Hs.fmap Type_ReqReqRoleTypeGetPlayersReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.RoleType_GetPlayers_Req))
                        @(_ (Hs.Maybe Concept.RoleType_GetPlayers_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 300),
                   (Hs.pure (Hs.fmap Type_ReqReqThingTypeGetInstancesReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ThingType_GetInstances_Req))
                        @(_ (Hs.Maybe Concept.ThingType_GetInstances_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 301),
                   (Hs.pure (Hs.fmap Type_ReqReqThingTypeSetAbstractReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ThingType_SetAbstract_Req))
                        @(_ (Hs.Maybe Concept.ThingType_SetAbstract_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 302),
                   (Hs.pure (Hs.fmap Type_ReqReqThingTypeUnsetAbstractReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ThingType_UnsetAbstract_Req))
                        @(_ (Hs.Maybe Concept.ThingType_UnsetAbstract_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 303),
                   (Hs.pure (Hs.fmap Type_ReqReqThingTypeGetOwnsReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.ThingType_GetOwns_Req))
                        @(_ (Hs.Maybe Concept.ThingType_GetOwns_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 304),
                   (Hs.pure (Hs.fmap Type_ReqReqThingTypeSetOwnsReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.ThingType_SetOwns_Req))
                        @(_ (Hs.Maybe Concept.ThingType_SetOwns_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 305),
                   (Hs.pure (Hs.fmap Type_ReqReqThingTypeUnsetOwnsReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.ThingType_UnsetOwns_Req))
                        @(_ (Hs.Maybe Concept.ThingType_UnsetOwns_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 306),
                   (Hs.pure (Hs.fmap Type_ReqReqThingTypeGetPlaysReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.ThingType_GetPlays_Req))
                        @(_ (Hs.Maybe Concept.ThingType_GetPlays_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 307),
                   (Hs.pure (Hs.fmap Type_ReqReqThingTypeSetPlaysReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.ThingType_SetPlays_Req))
                        @(_ (Hs.Maybe Concept.ThingType_SetPlays_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 308),
                   (Hs.pure (Hs.fmap Type_ReqReqThingTypeUnsetPlaysReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ThingType_UnsetPlays_Req))
                        @(_ (Hs.Maybe Concept.ThingType_UnsetPlays_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 400),
                   (Hs.pure (Hs.fmap Type_ReqReqEntityTypeCreateReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.EntityType_Create_Req))
                        @(_ (Hs.Maybe Concept.EntityType_Create_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 500),
                   (Hs.pure (Hs.fmap Type_ReqReqRelationTypeCreateReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.RelationType_Create_Req))
                        @(_ (Hs.Maybe Concept.RelationType_Create_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 501),
                   (Hs.pure
                      (Hs.fmap Type_ReqReqRelationTypeGetRelatesForRoleLabelReq))
                     <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.RelationType_GetRelatesForRoleLabel_Req))
                        @(_ (Hs.Maybe Concept.RelationType_GetRelatesForRoleLabel_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 502),
                   (Hs.pure (Hs.fmap Type_ReqReqRelationTypeGetRelatesReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.RelationType_GetRelates_Req))
                        @(_ (Hs.Maybe Concept.RelationType_GetRelates_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 503),
                   (Hs.pure (Hs.fmap Type_ReqReqRelationTypeSetRelatesReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.RelationType_SetRelates_Req))
                        @(_ (Hs.Maybe Concept.RelationType_SetRelates_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 504),
                   (Hs.pure (Hs.fmap Type_ReqReqRelationTypeUnsetRelatesReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.RelationType_UnsetRelates_Req))
                        @(_ (Hs.Maybe Concept.RelationType_UnsetRelates_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 600),
                   (Hs.pure (Hs.fmap Type_ReqReqAttributeTypePutReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.AttributeType_Put_Req))
                        @(_ (Hs.Maybe Concept.AttributeType_Put_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 601),
                   (Hs.pure (Hs.fmap Type_ReqReqAttributeTypeGetReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.AttributeType_Get_Req))
                        @(_ (Hs.Maybe Concept.AttributeType_Get_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 602),
                   (Hs.pure (Hs.fmap Type_ReqReqAttributeTypeGetRegexReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.AttributeType_GetRegex_Req))
                        @(_ (Hs.Maybe Concept.AttributeType_GetRegex_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 603),
                   (Hs.pure (Hs.fmap Type_ReqReqAttributeTypeSetRegexReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.AttributeType_SetRegex_Req))
                        @(_ (Hs.Maybe Concept.AttributeType_SetRegex_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 604),
                   (Hs.pure (Hs.fmap Type_ReqReqAttributeTypeGetOwnersReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.AttributeType_GetOwners_Req))
                        @(_ (Hs.Maybe Concept.AttributeType_GetOwners_Req))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "scope")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Type_Req where
        toJSONPB
          (Type_Req f1 f2
             f100_or_f101_or_f102_or_f103_or_f104_or_f105_or_f106_or_f200_or_f201_or_f300_or_f301_or_f302_or_f303_or_f304_or_f305_or_f306_or_f307_or_f308_or_f400_or_f500_or_f501_or_f502_or_f503_or_f504_or_f600_or_f601_or_f602_or_f603_or_f604)
          = (HsJSONPB.object
               ["label" .= f1, "scope" .= f2,
                (let encodeReq
                       = (case
                            f100_or_f101_or_f102_or_f103_or_f104_or_f105_or_f106_or_f200_or_f201_or_f300_or_f301_or_f302_or_f303_or_f304_or_f305_or_f306_or_f307_or_f308_or_f400_or_f500_or_f501_or_f502_or_f503_or_f504_or_f600_or_f601_or_f602_or_f603_or_f604
                            of
                              Hs.Just (Type_ReqReqTypeDeleteReq f100)
                                -> (HsJSONPB.pair "type_delete_req" f100)
                              Hs.Just (Type_ReqReqTypeSetLabelReq f101)
                                -> (HsJSONPB.pair "type_set_label_req" f101)
                              Hs.Just (Type_ReqReqTypeIsAbstractReq f102)
                                -> (HsJSONPB.pair "type_is_abstract_req" f102)
                              Hs.Just (Type_ReqReqTypeGetSupertypeReq f103)
                                -> (HsJSONPB.pair "type_get_supertype_req" f103)
                              Hs.Just (Type_ReqReqTypeSetSupertypeReq f104)
                                -> (HsJSONPB.pair "type_set_supertype_req" f104)
                              Hs.Just (Type_ReqReqTypeGetSupertypesReq f105)
                                -> (HsJSONPB.pair "type_get_supertypes_req" f105)
                              Hs.Just (Type_ReqReqTypeGetSubtypesReq f106)
                                -> (HsJSONPB.pair "type_get_subtypes_req" f106)
                              Hs.Just (Type_ReqReqRoleTypeGetRelationTypesReq f200)
                                -> (HsJSONPB.pair "role_type_get_relation_types_req" f200)
                              Hs.Just (Type_ReqReqRoleTypeGetPlayersReq f201)
                                -> (HsJSONPB.pair "role_type_get_players_req" f201)
                              Hs.Just (Type_ReqReqThingTypeGetInstancesReq f300)
                                -> (HsJSONPB.pair "thing_type_get_instances_req" f300)
                              Hs.Just (Type_ReqReqThingTypeSetAbstractReq f301)
                                -> (HsJSONPB.pair "thing_type_set_abstract_req" f301)
                              Hs.Just (Type_ReqReqThingTypeUnsetAbstractReq f302)
                                -> (HsJSONPB.pair "thing_type_unset_abstract_req" f302)
                              Hs.Just (Type_ReqReqThingTypeGetOwnsReq f303)
                                -> (HsJSONPB.pair "thing_type_get_owns_req" f303)
                              Hs.Just (Type_ReqReqThingTypeSetOwnsReq f304)
                                -> (HsJSONPB.pair "thing_type_set_owns_req" f304)
                              Hs.Just (Type_ReqReqThingTypeUnsetOwnsReq f305)
                                -> (HsJSONPB.pair "thing_type_unset_owns_req" f305)
                              Hs.Just (Type_ReqReqThingTypeGetPlaysReq f306)
                                -> (HsJSONPB.pair "thing_type_get_plays_req" f306)
                              Hs.Just (Type_ReqReqThingTypeSetPlaysReq f307)
                                -> (HsJSONPB.pair "thing_type_set_plays_req" f307)
                              Hs.Just (Type_ReqReqThingTypeUnsetPlaysReq f308)
                                -> (HsJSONPB.pair "thing_type_unset_plays_req" f308)
                              Hs.Just (Type_ReqReqEntityTypeCreateReq f400)
                                -> (HsJSONPB.pair "entity_type_create_req" f400)
                              Hs.Just (Type_ReqReqRelationTypeCreateReq f500)
                                -> (HsJSONPB.pair "relation_type_create_req" f500)
                              Hs.Just (Type_ReqReqRelationTypeGetRelatesForRoleLabelReq f501)
                                -> (HsJSONPB.pair "relation_type_get_relates_for_role_label_req"
                                      f501)
                              Hs.Just (Type_ReqReqRelationTypeGetRelatesReq f502)
                                -> (HsJSONPB.pair "relation_type_get_relates_req" f502)
                              Hs.Just (Type_ReqReqRelationTypeSetRelatesReq f503)
                                -> (HsJSONPB.pair "relation_type_set_relates_req" f503)
                              Hs.Just (Type_ReqReqRelationTypeUnsetRelatesReq f504)
                                -> (HsJSONPB.pair "relation_type_unset_relates_req" f504)
                              Hs.Just (Type_ReqReqAttributeTypePutReq f600)
                                -> (HsJSONPB.pair "attribute_type_put_req" f600)
                              Hs.Just (Type_ReqReqAttributeTypeGetReq f601)
                                -> (HsJSONPB.pair "attribute_type_get_req" f601)
                              Hs.Just (Type_ReqReqAttributeTypeGetRegexReq f602)
                                -> (HsJSONPB.pair "attribute_type_get_regex_req" f602)
                              Hs.Just (Type_ReqReqAttributeTypeSetRegexReq f603)
                                -> (HsJSONPB.pair "attribute_type_set_regex_req" f603)
                              Hs.Just (Type_ReqReqAttributeTypeGetOwnersReq f604)
                                -> (HsJSONPB.pair "attribute_type_get_owners_req" f604)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.objectOrNull [encodeReq] options)) options else
                       encodeReq options)])
        toEncodingPB
          (Type_Req f1 f2
             f100_or_f101_or_f102_or_f103_or_f104_or_f105_or_f106_or_f200_or_f201_or_f300_or_f301_or_f302_or_f303_or_f304_or_f305_or_f306_or_f307_or_f308_or_f400_or_f500_or_f501_or_f502_or_f503_or_f504_or_f600_or_f601_or_f602_or_f603_or_f604)
          = (HsJSONPB.pairs
               ["label" .= f1, "scope" .= f2,
                (let encodeReq
                       = (case
                            f100_or_f101_or_f102_or_f103_or_f104_or_f105_or_f106_or_f200_or_f201_or_f300_or_f301_or_f302_or_f303_or_f304_or_f305_or_f306_or_f307_or_f308_or_f400_or_f500_or_f501_or_f502_or_f503_or_f504_or_f600_or_f601_or_f602_or_f603_or_f604
                            of
                              Hs.Just (Type_ReqReqTypeDeleteReq f100)
                                -> (HsJSONPB.pair "type_delete_req" f100)
                              Hs.Just (Type_ReqReqTypeSetLabelReq f101)
                                -> (HsJSONPB.pair "type_set_label_req" f101)
                              Hs.Just (Type_ReqReqTypeIsAbstractReq f102)
                                -> (HsJSONPB.pair "type_is_abstract_req" f102)
                              Hs.Just (Type_ReqReqTypeGetSupertypeReq f103)
                                -> (HsJSONPB.pair "type_get_supertype_req" f103)
                              Hs.Just (Type_ReqReqTypeSetSupertypeReq f104)
                                -> (HsJSONPB.pair "type_set_supertype_req" f104)
                              Hs.Just (Type_ReqReqTypeGetSupertypesReq f105)
                                -> (HsJSONPB.pair "type_get_supertypes_req" f105)
                              Hs.Just (Type_ReqReqTypeGetSubtypesReq f106)
                                -> (HsJSONPB.pair "type_get_subtypes_req" f106)
                              Hs.Just (Type_ReqReqRoleTypeGetRelationTypesReq f200)
                                -> (HsJSONPB.pair "role_type_get_relation_types_req" f200)
                              Hs.Just (Type_ReqReqRoleTypeGetPlayersReq f201)
                                -> (HsJSONPB.pair "role_type_get_players_req" f201)
                              Hs.Just (Type_ReqReqThingTypeGetInstancesReq f300)
                                -> (HsJSONPB.pair "thing_type_get_instances_req" f300)
                              Hs.Just (Type_ReqReqThingTypeSetAbstractReq f301)
                                -> (HsJSONPB.pair "thing_type_set_abstract_req" f301)
                              Hs.Just (Type_ReqReqThingTypeUnsetAbstractReq f302)
                                -> (HsJSONPB.pair "thing_type_unset_abstract_req" f302)
                              Hs.Just (Type_ReqReqThingTypeGetOwnsReq f303)
                                -> (HsJSONPB.pair "thing_type_get_owns_req" f303)
                              Hs.Just (Type_ReqReqThingTypeSetOwnsReq f304)
                                -> (HsJSONPB.pair "thing_type_set_owns_req" f304)
                              Hs.Just (Type_ReqReqThingTypeUnsetOwnsReq f305)
                                -> (HsJSONPB.pair "thing_type_unset_owns_req" f305)
                              Hs.Just (Type_ReqReqThingTypeGetPlaysReq f306)
                                -> (HsJSONPB.pair "thing_type_get_plays_req" f306)
                              Hs.Just (Type_ReqReqThingTypeSetPlaysReq f307)
                                -> (HsJSONPB.pair "thing_type_set_plays_req" f307)
                              Hs.Just (Type_ReqReqThingTypeUnsetPlaysReq f308)
                                -> (HsJSONPB.pair "thing_type_unset_plays_req" f308)
                              Hs.Just (Type_ReqReqEntityTypeCreateReq f400)
                                -> (HsJSONPB.pair "entity_type_create_req" f400)
                              Hs.Just (Type_ReqReqRelationTypeCreateReq f500)
                                -> (HsJSONPB.pair "relation_type_create_req" f500)
                              Hs.Just (Type_ReqReqRelationTypeGetRelatesForRoleLabelReq f501)
                                -> (HsJSONPB.pair "relation_type_get_relates_for_role_label_req"
                                      f501)
                              Hs.Just (Type_ReqReqRelationTypeGetRelatesReq f502)
                                -> (HsJSONPB.pair "relation_type_get_relates_req" f502)
                              Hs.Just (Type_ReqReqRelationTypeSetRelatesReq f503)
                                -> (HsJSONPB.pair "relation_type_set_relates_req" f503)
                              Hs.Just (Type_ReqReqRelationTypeUnsetRelatesReq f504)
                                -> (HsJSONPB.pair "relation_type_unset_relates_req" f504)
                              Hs.Just (Type_ReqReqAttributeTypePutReq f600)
                                -> (HsJSONPB.pair "attribute_type_put_req" f600)
                              Hs.Just (Type_ReqReqAttributeTypeGetReq f601)
                                -> (HsJSONPB.pair "attribute_type_get_req" f601)
                              Hs.Just (Type_ReqReqAttributeTypeGetRegexReq f602)
                                -> (HsJSONPB.pair "attribute_type_get_regex_req" f602)
                              Hs.Just (Type_ReqReqAttributeTypeSetRegexReq f603)
                                -> (HsJSONPB.pair "attribute_type_set_regex_req" f603)
                              Hs.Just (Type_ReqReqAttributeTypeGetOwnersReq f604)
                                -> (HsJSONPB.pair "attribute_type_get_owners_req" f604)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.pairsOrNull [encodeReq] options)) options else
                       encodeReq options)])
 
instance HsJSONPB.FromJSONPB Type_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Type_Req"
               (\ obj ->
                  (Hs.pure Type_Req) <*> obj .: "label" <*> obj .: "scope" <*>
                    (let parseReq parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Type_ReqReqTypeDeleteReq <$>
                                  (HsJSONPB.parseField parseObj "type_delete_req"),
                                Hs.Just Hs.. Type_ReqReqTypeSetLabelReq <$>
                                  (HsJSONPB.parseField parseObj "type_set_label_req"),
                                Hs.Just Hs.. Type_ReqReqTypeIsAbstractReq <$>
                                  (HsJSONPB.parseField parseObj "type_is_abstract_req"),
                                Hs.Just Hs.. Type_ReqReqTypeGetSupertypeReq <$>
                                  (HsJSONPB.parseField parseObj "type_get_supertype_req"),
                                Hs.Just Hs.. Type_ReqReqTypeSetSupertypeReq <$>
                                  (HsJSONPB.parseField parseObj "type_set_supertype_req"),
                                Hs.Just Hs.. Type_ReqReqTypeGetSupertypesReq <$>
                                  (HsJSONPB.parseField parseObj "type_get_supertypes_req"),
                                Hs.Just Hs.. Type_ReqReqTypeGetSubtypesReq <$>
                                  (HsJSONPB.parseField parseObj "type_get_subtypes_req"),
                                Hs.Just Hs.. Type_ReqReqRoleTypeGetRelationTypesReq <$>
                                  (HsJSONPB.parseField parseObj "role_type_get_relation_types_req"),
                                Hs.Just Hs.. Type_ReqReqRoleTypeGetPlayersReq <$>
                                  (HsJSONPB.parseField parseObj "role_type_get_players_req"),
                                Hs.Just Hs.. Type_ReqReqThingTypeGetInstancesReq <$>
                                  (HsJSONPB.parseField parseObj "thing_type_get_instances_req"),
                                Hs.Just Hs.. Type_ReqReqThingTypeSetAbstractReq <$>
                                  (HsJSONPB.parseField parseObj "thing_type_set_abstract_req"),
                                Hs.Just Hs.. Type_ReqReqThingTypeUnsetAbstractReq <$>
                                  (HsJSONPB.parseField parseObj "thing_type_unset_abstract_req"),
                                Hs.Just Hs.. Type_ReqReqThingTypeGetOwnsReq <$>
                                  (HsJSONPB.parseField parseObj "thing_type_get_owns_req"),
                                Hs.Just Hs.. Type_ReqReqThingTypeSetOwnsReq <$>
                                  (HsJSONPB.parseField parseObj "thing_type_set_owns_req"),
                                Hs.Just Hs.. Type_ReqReqThingTypeUnsetOwnsReq <$>
                                  (HsJSONPB.parseField parseObj "thing_type_unset_owns_req"),
                                Hs.Just Hs.. Type_ReqReqThingTypeGetPlaysReq <$>
                                  (HsJSONPB.parseField parseObj "thing_type_get_plays_req"),
                                Hs.Just Hs.. Type_ReqReqThingTypeSetPlaysReq <$>
                                  (HsJSONPB.parseField parseObj "thing_type_set_plays_req"),
                                Hs.Just Hs.. Type_ReqReqThingTypeUnsetPlaysReq <$>
                                  (HsJSONPB.parseField parseObj "thing_type_unset_plays_req"),
                                Hs.Just Hs.. Type_ReqReqEntityTypeCreateReq <$>
                                  (HsJSONPB.parseField parseObj "entity_type_create_req"),
                                Hs.Just Hs.. Type_ReqReqRelationTypeCreateReq <$>
                                  (HsJSONPB.parseField parseObj "relation_type_create_req"),
                                Hs.Just Hs.. Type_ReqReqRelationTypeGetRelatesForRoleLabelReq <$>
                                  (HsJSONPB.parseField parseObj
                                     "relation_type_get_relates_for_role_label_req"),
                                Hs.Just Hs.. Type_ReqReqRelationTypeGetRelatesReq <$>
                                  (HsJSONPB.parseField parseObj "relation_type_get_relates_req"),
                                Hs.Just Hs.. Type_ReqReqRelationTypeSetRelatesReq <$>
                                  (HsJSONPB.parseField parseObj "relation_type_set_relates_req"),
                                Hs.Just Hs.. Type_ReqReqRelationTypeUnsetRelatesReq <$>
                                  (HsJSONPB.parseField parseObj "relation_type_unset_relates_req"),
                                Hs.Just Hs.. Type_ReqReqAttributeTypePutReq <$>
                                  (HsJSONPB.parseField parseObj "attribute_type_put_req"),
                                Hs.Just Hs.. Type_ReqReqAttributeTypeGetReq <$>
                                  (HsJSONPB.parseField parseObj "attribute_type_get_req"),
                                Hs.Just Hs.. Type_ReqReqAttributeTypeGetRegexReq <$>
                                  (HsJSONPB.parseField parseObj "attribute_type_get_regex_req"),
                                Hs.Just Hs.. Type_ReqReqAttributeTypeSetRegexReq <$>
                                  (HsJSONPB.parseField parseObj "attribute_type_set_regex_req"),
                                Hs.Just Hs.. Type_ReqReqAttributeTypeGetOwnersReq <$>
                                  (HsJSONPB.parseField parseObj "attribute_type_get_owners_req"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "req") Hs.>>= (HsJSONPB.withObject "req" parseReq)) <|>
                         (parseReq obj))))
 
instance HsJSONPB.ToJSON Type_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_Req where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               type_ReqLabel <- declare_label Proxy.Proxy
               let declare_scope = HsJSONPB.declareSchemaRef
               type_ReqScope <- declare_scope Proxy.Proxy
               let declare_req = HsJSONPB.declareSchemaRef
               type_ReqReq <- declare_req Proxy.Proxy
               let _ = Hs.pure Type_Req <*> HsJSONPB.asProxy declare_label <*>
                         HsJSONPB.asProxy declare_scope
                         <*> HsJSONPB.asProxy declare_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label", type_ReqLabel),
                                                        ("scope", type_ReqScope),
                                                        ("req", type_ReqReq)]}})
 
data Type_ReqReq = Type_ReqReqTypeDeleteReq Concept.Type_Delete_Req
                 | Type_ReqReqTypeSetLabelReq Concept.Type_SetLabel_Req
                 | Type_ReqReqTypeIsAbstractReq Concept.Type_IsAbstract_Req
                 | Type_ReqReqTypeGetSupertypeReq Concept.Type_GetSupertype_Req
                 | Type_ReqReqTypeSetSupertypeReq Concept.Type_SetSupertype_Req
                 | Type_ReqReqTypeGetSupertypesReq Concept.Type_GetSupertypes_Req
                 | Type_ReqReqTypeGetSubtypesReq Concept.Type_GetSubtypes_Req
                 | Type_ReqReqRoleTypeGetRelationTypesReq Concept.RoleType_GetRelationTypes_Req
                 | Type_ReqReqRoleTypeGetPlayersReq Concept.RoleType_GetPlayers_Req
                 | Type_ReqReqThingTypeGetInstancesReq Concept.ThingType_GetInstances_Req
                 | Type_ReqReqThingTypeSetAbstractReq Concept.ThingType_SetAbstract_Req
                 | Type_ReqReqThingTypeUnsetAbstractReq Concept.ThingType_UnsetAbstract_Req
                 | Type_ReqReqThingTypeGetOwnsReq Concept.ThingType_GetOwns_Req
                 | Type_ReqReqThingTypeSetOwnsReq Concept.ThingType_SetOwns_Req
                 | Type_ReqReqThingTypeUnsetOwnsReq Concept.ThingType_UnsetOwns_Req
                 | Type_ReqReqThingTypeGetPlaysReq Concept.ThingType_GetPlays_Req
                 | Type_ReqReqThingTypeSetPlaysReq Concept.ThingType_SetPlays_Req
                 | Type_ReqReqThingTypeUnsetPlaysReq Concept.ThingType_UnsetPlays_Req
                 | Type_ReqReqEntityTypeCreateReq Concept.EntityType_Create_Req
                 | Type_ReqReqRelationTypeCreateReq Concept.RelationType_Create_Req
                 | Type_ReqReqRelationTypeGetRelatesForRoleLabelReq Concept.RelationType_GetRelatesForRoleLabel_Req
                 | Type_ReqReqRelationTypeGetRelatesReq Concept.RelationType_GetRelates_Req
                 | Type_ReqReqRelationTypeSetRelatesReq Concept.RelationType_SetRelates_Req
                 | Type_ReqReqRelationTypeUnsetRelatesReq Concept.RelationType_UnsetRelates_Req
                 | Type_ReqReqAttributeTypePutReq Concept.AttributeType_Put_Req
                 | Type_ReqReqAttributeTypeGetReq Concept.AttributeType_Get_Req
                 | Type_ReqReqAttributeTypeGetRegexReq Concept.AttributeType_GetRegex_Req
                 | Type_ReqReqAttributeTypeSetRegexReq Concept.AttributeType_SetRegex_Req
                 | Type_ReqReqAttributeTypeGetOwnersReq Concept.AttributeType_GetOwners_Req
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_ReqReq where
        nameOf _ = (Hs.fromString "Type_ReqReq")
 
instance HsJSONPB.ToSchema Type_ReqReq where
        declareNamedSchema _
          = do let declare_type_delete_req = HsJSONPB.declareSchemaRef
               type_ReqReqTypeDeleteReq <- declare_type_delete_req Proxy.Proxy
               let _ = Hs.pure Type_ReqReqTypeDeleteReq <*>
                         HsJSONPB.asProxy declare_type_delete_req
               let declare_type_set_label_req = HsJSONPB.declareSchemaRef
               type_ReqReqTypeSetLabelReq <- declare_type_set_label_req
                                               Proxy.Proxy
               let _ = Hs.pure Type_ReqReqTypeSetLabelReq <*>
                         HsJSONPB.asProxy declare_type_set_label_req
               let declare_type_is_abstract_req = HsJSONPB.declareSchemaRef
               type_ReqReqTypeIsAbstractReq <- declare_type_is_abstract_req
                                                 Proxy.Proxy
               let _ = Hs.pure Type_ReqReqTypeIsAbstractReq <*>
                         HsJSONPB.asProxy declare_type_is_abstract_req
               let declare_type_get_supertype_req = HsJSONPB.declareSchemaRef
               type_ReqReqTypeGetSupertypeReq <- declare_type_get_supertype_req
                                                   Proxy.Proxy
               let _ = Hs.pure Type_ReqReqTypeGetSupertypeReq <*>
                         HsJSONPB.asProxy declare_type_get_supertype_req
               let declare_type_set_supertype_req = HsJSONPB.declareSchemaRef
               type_ReqReqTypeSetSupertypeReq <- declare_type_set_supertype_req
                                                   Proxy.Proxy
               let _ = Hs.pure Type_ReqReqTypeSetSupertypeReq <*>
                         HsJSONPB.asProxy declare_type_set_supertype_req
               let declare_type_get_supertypes_req = HsJSONPB.declareSchemaRef
               type_ReqReqTypeGetSupertypesReq <- declare_type_get_supertypes_req
                                                    Proxy.Proxy
               let _ = Hs.pure Type_ReqReqTypeGetSupertypesReq <*>
                         HsJSONPB.asProxy declare_type_get_supertypes_req
               let declare_type_get_subtypes_req = HsJSONPB.declareSchemaRef
               type_ReqReqTypeGetSubtypesReq <- declare_type_get_subtypes_req
                                                  Proxy.Proxy
               let _ = Hs.pure Type_ReqReqTypeGetSubtypesReq <*>
                         HsJSONPB.asProxy declare_type_get_subtypes_req
               let declare_role_type_get_relation_types_req
                     = HsJSONPB.declareSchemaRef
               type_ReqReqRoleTypeGetRelationTypesReq <- declare_role_type_get_relation_types_req
                                                           Proxy.Proxy
               let _ = Hs.pure Type_ReqReqRoleTypeGetRelationTypesReq <*>
                         HsJSONPB.asProxy declare_role_type_get_relation_types_req
               let declare_role_type_get_players_req = HsJSONPB.declareSchemaRef
               type_ReqReqRoleTypeGetPlayersReq <- declare_role_type_get_players_req
                                                     Proxy.Proxy
               let _ = Hs.pure Type_ReqReqRoleTypeGetPlayersReq <*>
                         HsJSONPB.asProxy declare_role_type_get_players_req
               let declare_thing_type_get_instances_req
                     = HsJSONPB.declareSchemaRef
               type_ReqReqThingTypeGetInstancesReq <- declare_thing_type_get_instances_req
                                                        Proxy.Proxy
               let _ = Hs.pure Type_ReqReqThingTypeGetInstancesReq <*>
                         HsJSONPB.asProxy declare_thing_type_get_instances_req
               let declare_thing_type_set_abstract_req = HsJSONPB.declareSchemaRef
               type_ReqReqThingTypeSetAbstractReq <- declare_thing_type_set_abstract_req
                                                       Proxy.Proxy
               let _ = Hs.pure Type_ReqReqThingTypeSetAbstractReq <*>
                         HsJSONPB.asProxy declare_thing_type_set_abstract_req
               let declare_thing_type_unset_abstract_req
                     = HsJSONPB.declareSchemaRef
               type_ReqReqThingTypeUnsetAbstractReq <- declare_thing_type_unset_abstract_req
                                                         Proxy.Proxy
               let _ = Hs.pure Type_ReqReqThingTypeUnsetAbstractReq <*>
                         HsJSONPB.asProxy declare_thing_type_unset_abstract_req
               let declare_thing_type_get_owns_req = HsJSONPB.declareSchemaRef
               type_ReqReqThingTypeGetOwnsReq <- declare_thing_type_get_owns_req
                                                   Proxy.Proxy
               let _ = Hs.pure Type_ReqReqThingTypeGetOwnsReq <*>
                         HsJSONPB.asProxy declare_thing_type_get_owns_req
               let declare_thing_type_set_owns_req = HsJSONPB.declareSchemaRef
               type_ReqReqThingTypeSetOwnsReq <- declare_thing_type_set_owns_req
                                                   Proxy.Proxy
               let _ = Hs.pure Type_ReqReqThingTypeSetOwnsReq <*>
                         HsJSONPB.asProxy declare_thing_type_set_owns_req
               let declare_thing_type_unset_owns_req = HsJSONPB.declareSchemaRef
               type_ReqReqThingTypeUnsetOwnsReq <- declare_thing_type_unset_owns_req
                                                     Proxy.Proxy
               let _ = Hs.pure Type_ReqReqThingTypeUnsetOwnsReq <*>
                         HsJSONPB.asProxy declare_thing_type_unset_owns_req
               let declare_thing_type_get_plays_req = HsJSONPB.declareSchemaRef
               type_ReqReqThingTypeGetPlaysReq <- declare_thing_type_get_plays_req
                                                    Proxy.Proxy
               let _ = Hs.pure Type_ReqReqThingTypeGetPlaysReq <*>
                         HsJSONPB.asProxy declare_thing_type_get_plays_req
               let declare_thing_type_set_plays_req = HsJSONPB.declareSchemaRef
               type_ReqReqThingTypeSetPlaysReq <- declare_thing_type_set_plays_req
                                                    Proxy.Proxy
               let _ = Hs.pure Type_ReqReqThingTypeSetPlaysReq <*>
                         HsJSONPB.asProxy declare_thing_type_set_plays_req
               let declare_thing_type_unset_plays_req = HsJSONPB.declareSchemaRef
               type_ReqReqThingTypeUnsetPlaysReq <- declare_thing_type_unset_plays_req
                                                      Proxy.Proxy
               let _ = Hs.pure Type_ReqReqThingTypeUnsetPlaysReq <*>
                         HsJSONPB.asProxy declare_thing_type_unset_plays_req
               let declare_entity_type_create_req = HsJSONPB.declareSchemaRef
               type_ReqReqEntityTypeCreateReq <- declare_entity_type_create_req
                                                   Proxy.Proxy
               let _ = Hs.pure Type_ReqReqEntityTypeCreateReq <*>
                         HsJSONPB.asProxy declare_entity_type_create_req
               let declare_relation_type_create_req = HsJSONPB.declareSchemaRef
               type_ReqReqRelationTypeCreateReq <- declare_relation_type_create_req
                                                     Proxy.Proxy
               let _ = Hs.pure Type_ReqReqRelationTypeCreateReq <*>
                         HsJSONPB.asProxy declare_relation_type_create_req
               let declare_relation_type_get_relates_for_role_label_req
                     = HsJSONPB.declareSchemaRef
               type_ReqReqRelationTypeGetRelatesForRoleLabelReq <- declare_relation_type_get_relates_for_role_label_req
                                                                     Proxy.Proxy
               let _ = Hs.pure Type_ReqReqRelationTypeGetRelatesForRoleLabelReq
                         <*>
                         HsJSONPB.asProxy
                           declare_relation_type_get_relates_for_role_label_req
               let declare_relation_type_get_relates_req
                     = HsJSONPB.declareSchemaRef
               type_ReqReqRelationTypeGetRelatesReq <- declare_relation_type_get_relates_req
                                                         Proxy.Proxy
               let _ = Hs.pure Type_ReqReqRelationTypeGetRelatesReq <*>
                         HsJSONPB.asProxy declare_relation_type_get_relates_req
               let declare_relation_type_set_relates_req
                     = HsJSONPB.declareSchemaRef
               type_ReqReqRelationTypeSetRelatesReq <- declare_relation_type_set_relates_req
                                                         Proxy.Proxy
               let _ = Hs.pure Type_ReqReqRelationTypeSetRelatesReq <*>
                         HsJSONPB.asProxy declare_relation_type_set_relates_req
               let declare_relation_type_unset_relates_req
                     = HsJSONPB.declareSchemaRef
               type_ReqReqRelationTypeUnsetRelatesReq <- declare_relation_type_unset_relates_req
                                                           Proxy.Proxy
               let _ = Hs.pure Type_ReqReqRelationTypeUnsetRelatesReq <*>
                         HsJSONPB.asProxy declare_relation_type_unset_relates_req
               let declare_attribute_type_put_req = HsJSONPB.declareSchemaRef
               type_ReqReqAttributeTypePutReq <- declare_attribute_type_put_req
                                                   Proxy.Proxy
               let _ = Hs.pure Type_ReqReqAttributeTypePutReq <*>
                         HsJSONPB.asProxy declare_attribute_type_put_req
               let declare_attribute_type_get_req = HsJSONPB.declareSchemaRef
               type_ReqReqAttributeTypeGetReq <- declare_attribute_type_get_req
                                                   Proxy.Proxy
               let _ = Hs.pure Type_ReqReqAttributeTypeGetReq <*>
                         HsJSONPB.asProxy declare_attribute_type_get_req
               let declare_attribute_type_get_regex_req
                     = HsJSONPB.declareSchemaRef
               type_ReqReqAttributeTypeGetRegexReq <- declare_attribute_type_get_regex_req
                                                        Proxy.Proxy
               let _ = Hs.pure Type_ReqReqAttributeTypeGetRegexReq <*>
                         HsJSONPB.asProxy declare_attribute_type_get_regex_req
               let declare_attribute_type_set_regex_req
                     = HsJSONPB.declareSchemaRef
               type_ReqReqAttributeTypeSetRegexReq <- declare_attribute_type_set_regex_req
                                                        Proxy.Proxy
               let _ = Hs.pure Type_ReqReqAttributeTypeSetRegexReq <*>
                         HsJSONPB.asProxy declare_attribute_type_set_regex_req
               let declare_attribute_type_get_owners_req
                     = HsJSONPB.declareSchemaRef
               type_ReqReqAttributeTypeGetOwnersReq <- declare_attribute_type_get_owners_req
                                                         Proxy.Proxy
               let _ = Hs.pure Type_ReqReqAttributeTypeGetOwnersReq <*>
                         HsJSONPB.asProxy declare_attribute_type_get_owners_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_ReqReq",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("type_delete_req",
                                                         type_ReqReqTypeDeleteReq),
                                                        ("type_set_label_req",
                                                         type_ReqReqTypeSetLabelReq),
                                                        ("type_is_abstract_req",
                                                         type_ReqReqTypeIsAbstractReq),
                                                        ("type_get_supertype_req",
                                                         type_ReqReqTypeGetSupertypeReq),
                                                        ("type_set_supertype_req",
                                                         type_ReqReqTypeSetSupertypeReq),
                                                        ("type_get_supertypes_req",
                                                         type_ReqReqTypeGetSupertypesReq),
                                                        ("type_get_subtypes_req",
                                                         type_ReqReqTypeGetSubtypesReq),
                                                        ("role_type_get_relation_types_req",
                                                         type_ReqReqRoleTypeGetRelationTypesReq),
                                                        ("role_type_get_players_req",
                                                         type_ReqReqRoleTypeGetPlayersReq),
                                                        ("thing_type_get_instances_req",
                                                         type_ReqReqThingTypeGetInstancesReq),
                                                        ("thing_type_set_abstract_req",
                                                         type_ReqReqThingTypeSetAbstractReq),
                                                        ("thing_type_unset_abstract_req",
                                                         type_ReqReqThingTypeUnsetAbstractReq),
                                                        ("thing_type_get_owns_req",
                                                         type_ReqReqThingTypeGetOwnsReq),
                                                        ("thing_type_set_owns_req",
                                                         type_ReqReqThingTypeSetOwnsReq),
                                                        ("thing_type_unset_owns_req",
                                                         type_ReqReqThingTypeUnsetOwnsReq),
                                                        ("thing_type_get_plays_req",
                                                         type_ReqReqThingTypeGetPlaysReq),
                                                        ("thing_type_set_plays_req",
                                                         type_ReqReqThingTypeSetPlaysReq),
                                                        ("thing_type_unset_plays_req",
                                                         type_ReqReqThingTypeUnsetPlaysReq),
                                                        ("entity_type_create_req",
                                                         type_ReqReqEntityTypeCreateReq),
                                                        ("relation_type_create_req",
                                                         type_ReqReqRelationTypeCreateReq),
                                                        ("relation_type_get_relates_for_role_label_req",
                                                         type_ReqReqRelationTypeGetRelatesForRoleLabelReq),
                                                        ("relation_type_get_relates_req",
                                                         type_ReqReqRelationTypeGetRelatesReq),
                                                        ("relation_type_set_relates_req",
                                                         type_ReqReqRelationTypeSetRelatesReq),
                                                        ("relation_type_unset_relates_req",
                                                         type_ReqReqRelationTypeUnsetRelatesReq),
                                                        ("attribute_type_put_req",
                                                         type_ReqReqAttributeTypePutReq),
                                                        ("attribute_type_get_req",
                                                         type_ReqReqAttributeTypeGetReq),
                                                        ("attribute_type_get_regex_req",
                                                         type_ReqReqAttributeTypeGetRegexReq),
                                                        ("attribute_type_set_regex_req",
                                                         type_ReqReqAttributeTypeSetRegexReq),
                                                        ("attribute_type_get_owners_req",
                                                         type_ReqReqAttributeTypeGetOwnersReq)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype Type_Res = Type_Res{type_ResRes :: Hs.Maybe Type_ResRes}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_Res where
        nameOf _ = (Hs.fromString "Type_Res")
 
instance HsProtobuf.HasDefault Type_Res
 
instance HsProtobuf.Message Type_Res where
        encodeMessage _ Type_Res{type_ResRes = type_ResRes}
          = (Hs.mconcat
               [case type_ResRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Type_ResResTypeDeleteRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 100)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_Delete_Res)
                                        @(HsProtobuf.Nested Concept.Type_Delete_Res)
                                        (Hs.Just y)))
                             Type_ResResTypeSetLabelRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 101)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_SetLabel_Res)
                                        @(HsProtobuf.Nested Concept.Type_SetLabel_Res)
                                        (Hs.Just y)))
                             Type_ResResTypeIsAbstractRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 102)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_IsAbstract_Res)
                                        @(HsProtobuf.Nested Concept.Type_IsAbstract_Res)
                                        (Hs.Just y)))
                             Type_ResResTypeGetSupertypeRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 103)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_GetSupertype_Res)
                                        @(HsProtobuf.Nested Concept.Type_GetSupertype_Res)
                                        (Hs.Just y)))
                             Type_ResResTypeSetSupertypeRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 104)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_SetSupertype_Res)
                                        @(HsProtobuf.Nested Concept.Type_SetSupertype_Res)
                                        (Hs.Just y)))
                             Type_ResResThingTypeSetAbstractRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 300)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_SetAbstract_Res)
                                        @(HsProtobuf.Nested Concept.ThingType_SetAbstract_Res)
                                        (Hs.Just y)))
                             Type_ResResThingTypeUnsetAbstractRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 301)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_UnsetAbstract_Res)
                                        @(HsProtobuf.Nested Concept.ThingType_UnsetAbstract_Res)
                                        (Hs.Just y)))
                             Type_ResResThingTypeSetOwnsRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 302)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_SetOwns_Res)
                                        @(HsProtobuf.Nested Concept.ThingType_SetOwns_Res)
                                        (Hs.Just y)))
                             Type_ResResThingTypeUnsetOwnsRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 303)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_UnsetOwns_Res)
                                        @(HsProtobuf.Nested Concept.ThingType_UnsetOwns_Res)
                                        (Hs.Just y)))
                             Type_ResResThingTypeSetPlaysRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 304)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_SetPlays_Res)
                                        @(HsProtobuf.Nested Concept.ThingType_SetPlays_Res)
                                        (Hs.Just y)))
                             Type_ResResThingTypeUnsetPlaysRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 305)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_UnsetPlays_Res)
                                        @(HsProtobuf.Nested Concept.ThingType_UnsetPlays_Res)
                                        (Hs.Just y)))
                             Type_ResResEntityTypeCreateRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 400)
                                     (Hs.coerce @(Hs.Maybe Concept.EntityType_Create_Res)
                                        @(HsProtobuf.Nested Concept.EntityType_Create_Res)
                                        (Hs.Just y)))
                             Type_ResResRelationTypeCreateRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 500)
                                     (Hs.coerce @(Hs.Maybe Concept.RelationType_Create_Res)
                                        @(HsProtobuf.Nested Concept.RelationType_Create_Res)
                                        (Hs.Just y)))
                             Type_ResResRelationTypeGetRelatesForRoleLabelRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 501)
                                     (Hs.coerce
                                        @(Hs.Maybe Concept.RelationType_GetRelatesForRoleLabel_Res)
                                        @(HsProtobuf.Nested Concept.RelationType_GetRelatesForRoleLabel_Res)
                                        (Hs.Just y)))
                             Type_ResResRelationTypeSetRelatesRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 502)
                                     (Hs.coerce @(Hs.Maybe Concept.RelationType_SetRelates_Res)
                                        @(HsProtobuf.Nested Concept.RelationType_SetRelates_Res)
                                        (Hs.Just y)))
                             Type_ResResRelationTypeUnsetRelatesRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 503)
                                     (Hs.coerce @(Hs.Maybe Concept.RelationType_UnsetRelates_Res)
                                        @(HsProtobuf.Nested Concept.RelationType_UnsetRelates_Res)
                                        (Hs.Just y)))
                             Type_ResResAttributeTypePutRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 600)
                                     (Hs.coerce @(Hs.Maybe Concept.AttributeType_Put_Res)
                                        @(HsProtobuf.Nested Concept.AttributeType_Put_Res)
                                        (Hs.Just y)))
                             Type_ResResAttributeTypeGetRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 601)
                                     (Hs.coerce @(Hs.Maybe Concept.AttributeType_Get_Res)
                                        @(HsProtobuf.Nested Concept.AttributeType_Get_Res)
                                        (Hs.Just y)))
                             Type_ResResAttributeTypeGetRegexRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 602)
                                     (Hs.coerce @(Hs.Maybe Concept.AttributeType_GetRegex_Res)
                                        @(HsProtobuf.Nested Concept.AttributeType_GetRegex_Res)
                                        (Hs.Just y)))
                             Type_ResResAttributeTypeSetRegexRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 603)
                                     (Hs.coerce @(Hs.Maybe Concept.AttributeType_SetRegex_Res)
                                        @(HsProtobuf.Nested Concept.AttributeType_SetRegex_Res)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Type_Res) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 100),
                   (Hs.pure (Hs.fmap Type_ResResTypeDeleteRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_Delete_Res))
                        @(_ (Hs.Maybe Concept.Type_Delete_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 101),
                   (Hs.pure (Hs.fmap Type_ResResTypeSetLabelRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_SetLabel_Res))
                        @(_ (Hs.Maybe Concept.Type_SetLabel_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 102),
                   (Hs.pure (Hs.fmap Type_ResResTypeIsAbstractRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_IsAbstract_Res))
                        @(_ (Hs.Maybe Concept.Type_IsAbstract_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 103),
                   (Hs.pure (Hs.fmap Type_ResResTypeGetSupertypeRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_GetSupertype_Res))
                        @(_ (Hs.Maybe Concept.Type_GetSupertype_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 104),
                   (Hs.pure (Hs.fmap Type_ResResTypeSetSupertypeRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_SetSupertype_Res))
                        @(_ (Hs.Maybe Concept.Type_SetSupertype_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 300),
                   (Hs.pure (Hs.fmap Type_ResResThingTypeSetAbstractRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ThingType_SetAbstract_Res))
                        @(_ (Hs.Maybe Concept.ThingType_SetAbstract_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 301),
                   (Hs.pure (Hs.fmap Type_ResResThingTypeUnsetAbstractRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ThingType_UnsetAbstract_Res))
                        @(_ (Hs.Maybe Concept.ThingType_UnsetAbstract_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 302),
                   (Hs.pure (Hs.fmap Type_ResResThingTypeSetOwnsRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.ThingType_SetOwns_Res))
                        @(_ (Hs.Maybe Concept.ThingType_SetOwns_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 303),
                   (Hs.pure (Hs.fmap Type_ResResThingTypeUnsetOwnsRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.ThingType_UnsetOwns_Res))
                        @(_ (Hs.Maybe Concept.ThingType_UnsetOwns_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 304),
                   (Hs.pure (Hs.fmap Type_ResResThingTypeSetPlaysRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.ThingType_SetPlays_Res))
                        @(_ (Hs.Maybe Concept.ThingType_SetPlays_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 305),
                   (Hs.pure (Hs.fmap Type_ResResThingTypeUnsetPlaysRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ThingType_UnsetPlays_Res))
                        @(_ (Hs.Maybe Concept.ThingType_UnsetPlays_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 400),
                   (Hs.pure (Hs.fmap Type_ResResEntityTypeCreateRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.EntityType_Create_Res))
                        @(_ (Hs.Maybe Concept.EntityType_Create_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 500),
                   (Hs.pure (Hs.fmap Type_ResResRelationTypeCreateRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.RelationType_Create_Res))
                        @(_ (Hs.Maybe Concept.RelationType_Create_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 501),
                   (Hs.pure
                      (Hs.fmap Type_ResResRelationTypeGetRelatesForRoleLabelRes))
                     <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.RelationType_GetRelatesForRoleLabel_Res))
                        @(_ (Hs.Maybe Concept.RelationType_GetRelatesForRoleLabel_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 502),
                   (Hs.pure (Hs.fmap Type_ResResRelationTypeSetRelatesRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.RelationType_SetRelates_Res))
                        @(_ (Hs.Maybe Concept.RelationType_SetRelates_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 503),
                   (Hs.pure (Hs.fmap Type_ResResRelationTypeUnsetRelatesRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.RelationType_UnsetRelates_Res))
                        @(_ (Hs.Maybe Concept.RelationType_UnsetRelates_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 600),
                   (Hs.pure (Hs.fmap Type_ResResAttributeTypePutRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.AttributeType_Put_Res))
                        @(_ (Hs.Maybe Concept.AttributeType_Put_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 601),
                   (Hs.pure (Hs.fmap Type_ResResAttributeTypeGetRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.AttributeType_Get_Res))
                        @(_ (Hs.Maybe Concept.AttributeType_Get_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 602),
                   (Hs.pure (Hs.fmap Type_ResResAttributeTypeGetRegexRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.AttributeType_GetRegex_Res))
                        @(_ (Hs.Maybe Concept.AttributeType_GetRegex_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 603),
                   (Hs.pure (Hs.fmap Type_ResResAttributeTypeSetRegexRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.AttributeType_SetRegex_Res))
                        @(_ (Hs.Maybe Concept.AttributeType_SetRegex_Res))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_Res where
        toJSONPB
          (Type_Res
             f100_or_f101_or_f102_or_f103_or_f104_or_f300_or_f301_or_f302_or_f303_or_f304_or_f305_or_f400_or_f500_or_f501_or_f502_or_f503_or_f600_or_f601_or_f602_or_f603)
          = (HsJSONPB.object
               [(let encodeRes
                       = (case
                            f100_or_f101_or_f102_or_f103_or_f104_or_f300_or_f301_or_f302_or_f303_or_f304_or_f305_or_f400_or_f500_or_f501_or_f502_or_f503_or_f600_or_f601_or_f602_or_f603
                            of
                              Hs.Just (Type_ResResTypeDeleteRes f100)
                                -> (HsJSONPB.pair "type_delete_res" f100)
                              Hs.Just (Type_ResResTypeSetLabelRes f101)
                                -> (HsJSONPB.pair "type_set_label_res" f101)
                              Hs.Just (Type_ResResTypeIsAbstractRes f102)
                                -> (HsJSONPB.pair "type_is_abstract_res" f102)
                              Hs.Just (Type_ResResTypeGetSupertypeRes f103)
                                -> (HsJSONPB.pair "type_get_supertype_res" f103)
                              Hs.Just (Type_ResResTypeSetSupertypeRes f104)
                                -> (HsJSONPB.pair "type_set_supertype_res" f104)
                              Hs.Just (Type_ResResThingTypeSetAbstractRes f300)
                                -> (HsJSONPB.pair "thing_type_set_abstract_res" f300)
                              Hs.Just (Type_ResResThingTypeUnsetAbstractRes f301)
                                -> (HsJSONPB.pair "thing_type_unset_abstract_res" f301)
                              Hs.Just (Type_ResResThingTypeSetOwnsRes f302)
                                -> (HsJSONPB.pair "thing_type_set_owns_res" f302)
                              Hs.Just (Type_ResResThingTypeUnsetOwnsRes f303)
                                -> (HsJSONPB.pair "thing_type_unset_owns_res" f303)
                              Hs.Just (Type_ResResThingTypeSetPlaysRes f304)
                                -> (HsJSONPB.pair "thing_type_set_plays_res" f304)
                              Hs.Just (Type_ResResThingTypeUnsetPlaysRes f305)
                                -> (HsJSONPB.pair "thing_type_unset_plays_res" f305)
                              Hs.Just (Type_ResResEntityTypeCreateRes f400)
                                -> (HsJSONPB.pair "entity_type_create_res" f400)
                              Hs.Just (Type_ResResRelationTypeCreateRes f500)
                                -> (HsJSONPB.pair "relation_type_create_res" f500)
                              Hs.Just (Type_ResResRelationTypeGetRelatesForRoleLabelRes f501)
                                -> (HsJSONPB.pair "relation_type_get_relates_for_role_label_res"
                                      f501)
                              Hs.Just (Type_ResResRelationTypeSetRelatesRes f502)
                                -> (HsJSONPB.pair "relation_type_set_relates_res" f502)
                              Hs.Just (Type_ResResRelationTypeUnsetRelatesRes f503)
                                -> (HsJSONPB.pair "relation_type_unset_relates_res" f503)
                              Hs.Just (Type_ResResAttributeTypePutRes f600)
                                -> (HsJSONPB.pair "attribute_type_put_res" f600)
                              Hs.Just (Type_ResResAttributeTypeGetRes f601)
                                -> (HsJSONPB.pair "attribute_type_get_res" f601)
                              Hs.Just (Type_ResResAttributeTypeGetRegexRes f602)
                                -> (HsJSONPB.pair "attribute_type_get_regex_res" f602)
                              Hs.Just (Type_ResResAttributeTypeSetRegexRes f603)
                                -> (HsJSONPB.pair "attribute_type_set_regex_res" f603)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB
          (Type_Res
             f100_or_f101_or_f102_or_f103_or_f104_or_f300_or_f301_or_f302_or_f303_or_f304_or_f305_or_f400_or_f500_or_f501_or_f502_or_f503_or_f600_or_f601_or_f602_or_f603)
          = (HsJSONPB.pairs
               [(let encodeRes
                       = (case
                            f100_or_f101_or_f102_or_f103_or_f104_or_f300_or_f301_or_f302_or_f303_or_f304_or_f305_or_f400_or_f500_or_f501_or_f502_or_f503_or_f600_or_f601_or_f602_or_f603
                            of
                              Hs.Just (Type_ResResTypeDeleteRes f100)
                                -> (HsJSONPB.pair "type_delete_res" f100)
                              Hs.Just (Type_ResResTypeSetLabelRes f101)
                                -> (HsJSONPB.pair "type_set_label_res" f101)
                              Hs.Just (Type_ResResTypeIsAbstractRes f102)
                                -> (HsJSONPB.pair "type_is_abstract_res" f102)
                              Hs.Just (Type_ResResTypeGetSupertypeRes f103)
                                -> (HsJSONPB.pair "type_get_supertype_res" f103)
                              Hs.Just (Type_ResResTypeSetSupertypeRes f104)
                                -> (HsJSONPB.pair "type_set_supertype_res" f104)
                              Hs.Just (Type_ResResThingTypeSetAbstractRes f300)
                                -> (HsJSONPB.pair "thing_type_set_abstract_res" f300)
                              Hs.Just (Type_ResResThingTypeUnsetAbstractRes f301)
                                -> (HsJSONPB.pair "thing_type_unset_abstract_res" f301)
                              Hs.Just (Type_ResResThingTypeSetOwnsRes f302)
                                -> (HsJSONPB.pair "thing_type_set_owns_res" f302)
                              Hs.Just (Type_ResResThingTypeUnsetOwnsRes f303)
                                -> (HsJSONPB.pair "thing_type_unset_owns_res" f303)
                              Hs.Just (Type_ResResThingTypeSetPlaysRes f304)
                                -> (HsJSONPB.pair "thing_type_set_plays_res" f304)
                              Hs.Just (Type_ResResThingTypeUnsetPlaysRes f305)
                                -> (HsJSONPB.pair "thing_type_unset_plays_res" f305)
                              Hs.Just (Type_ResResEntityTypeCreateRes f400)
                                -> (HsJSONPB.pair "entity_type_create_res" f400)
                              Hs.Just (Type_ResResRelationTypeCreateRes f500)
                                -> (HsJSONPB.pair "relation_type_create_res" f500)
                              Hs.Just (Type_ResResRelationTypeGetRelatesForRoleLabelRes f501)
                                -> (HsJSONPB.pair "relation_type_get_relates_for_role_label_res"
                                      f501)
                              Hs.Just (Type_ResResRelationTypeSetRelatesRes f502)
                                -> (HsJSONPB.pair "relation_type_set_relates_res" f502)
                              Hs.Just (Type_ResResRelationTypeUnsetRelatesRes f503)
                                -> (HsJSONPB.pair "relation_type_unset_relates_res" f503)
                              Hs.Just (Type_ResResAttributeTypePutRes f600)
                                -> (HsJSONPB.pair "attribute_type_put_res" f600)
                              Hs.Just (Type_ResResAttributeTypeGetRes f601)
                                -> (HsJSONPB.pair "attribute_type_get_res" f601)
                              Hs.Just (Type_ResResAttributeTypeGetRegexRes f602)
                                -> (HsJSONPB.pair "attribute_type_get_regex_res" f602)
                              Hs.Just (Type_ResResAttributeTypeSetRegexRes f603)
                                -> (HsJSONPB.pair "attribute_type_set_regex_res" f603)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB Type_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Type_Res"
               (\ obj ->
                  (Hs.pure Type_Res) <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Type_ResResTypeDeleteRes <$>
                                  (HsJSONPB.parseField parseObj "type_delete_res"),
                                Hs.Just Hs.. Type_ResResTypeSetLabelRes <$>
                                  (HsJSONPB.parseField parseObj "type_set_label_res"),
                                Hs.Just Hs.. Type_ResResTypeIsAbstractRes <$>
                                  (HsJSONPB.parseField parseObj "type_is_abstract_res"),
                                Hs.Just Hs.. Type_ResResTypeGetSupertypeRes <$>
                                  (HsJSONPB.parseField parseObj "type_get_supertype_res"),
                                Hs.Just Hs.. Type_ResResTypeSetSupertypeRes <$>
                                  (HsJSONPB.parseField parseObj "type_set_supertype_res"),
                                Hs.Just Hs.. Type_ResResThingTypeSetAbstractRes <$>
                                  (HsJSONPB.parseField parseObj "thing_type_set_abstract_res"),
                                Hs.Just Hs.. Type_ResResThingTypeUnsetAbstractRes <$>
                                  (HsJSONPB.parseField parseObj "thing_type_unset_abstract_res"),
                                Hs.Just Hs.. Type_ResResThingTypeSetOwnsRes <$>
                                  (HsJSONPB.parseField parseObj "thing_type_set_owns_res"),
                                Hs.Just Hs.. Type_ResResThingTypeUnsetOwnsRes <$>
                                  (HsJSONPB.parseField parseObj "thing_type_unset_owns_res"),
                                Hs.Just Hs.. Type_ResResThingTypeSetPlaysRes <$>
                                  (HsJSONPB.parseField parseObj "thing_type_set_plays_res"),
                                Hs.Just Hs.. Type_ResResThingTypeUnsetPlaysRes <$>
                                  (HsJSONPB.parseField parseObj "thing_type_unset_plays_res"),
                                Hs.Just Hs.. Type_ResResEntityTypeCreateRes <$>
                                  (HsJSONPB.parseField parseObj "entity_type_create_res"),
                                Hs.Just Hs.. Type_ResResRelationTypeCreateRes <$>
                                  (HsJSONPB.parseField parseObj "relation_type_create_res"),
                                Hs.Just Hs.. Type_ResResRelationTypeGetRelatesForRoleLabelRes <$>
                                  (HsJSONPB.parseField parseObj
                                     "relation_type_get_relates_for_role_label_res"),
                                Hs.Just Hs.. Type_ResResRelationTypeSetRelatesRes <$>
                                  (HsJSONPB.parseField parseObj "relation_type_set_relates_res"),
                                Hs.Just Hs.. Type_ResResRelationTypeUnsetRelatesRes <$>
                                  (HsJSONPB.parseField parseObj "relation_type_unset_relates_res"),
                                Hs.Just Hs.. Type_ResResAttributeTypePutRes <$>
                                  (HsJSONPB.parseField parseObj "attribute_type_put_res"),
                                Hs.Just Hs.. Type_ResResAttributeTypeGetRes <$>
                                  (HsJSONPB.parseField parseObj "attribute_type_get_res"),
                                Hs.Just Hs.. Type_ResResAttributeTypeGetRegexRes <$>
                                  (HsJSONPB.parseField parseObj "attribute_type_get_regex_res"),
                                Hs.Just Hs.. Type_ResResAttributeTypeSetRegexRes <$>
                                  (HsJSONPB.parseField parseObj "attribute_type_set_regex_res"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON Type_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_Res where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               type_ResRes <- declare_res Proxy.Proxy
               let _ = Hs.pure Type_Res <*> HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res", type_ResRes)]}})
 
data Type_ResRes = Type_ResResTypeDeleteRes Concept.Type_Delete_Res
                 | Type_ResResTypeSetLabelRes Concept.Type_SetLabel_Res
                 | Type_ResResTypeIsAbstractRes Concept.Type_IsAbstract_Res
                 | Type_ResResTypeGetSupertypeRes Concept.Type_GetSupertype_Res
                 | Type_ResResTypeSetSupertypeRes Concept.Type_SetSupertype_Res
                 | Type_ResResThingTypeSetAbstractRes Concept.ThingType_SetAbstract_Res
                 | Type_ResResThingTypeUnsetAbstractRes Concept.ThingType_UnsetAbstract_Res
                 | Type_ResResThingTypeSetOwnsRes Concept.ThingType_SetOwns_Res
                 | Type_ResResThingTypeUnsetOwnsRes Concept.ThingType_UnsetOwns_Res
                 | Type_ResResThingTypeSetPlaysRes Concept.ThingType_SetPlays_Res
                 | Type_ResResThingTypeUnsetPlaysRes Concept.ThingType_UnsetPlays_Res
                 | Type_ResResEntityTypeCreateRes Concept.EntityType_Create_Res
                 | Type_ResResRelationTypeCreateRes Concept.RelationType_Create_Res
                 | Type_ResResRelationTypeGetRelatesForRoleLabelRes Concept.RelationType_GetRelatesForRoleLabel_Res
                 | Type_ResResRelationTypeSetRelatesRes Concept.RelationType_SetRelates_Res
                 | Type_ResResRelationTypeUnsetRelatesRes Concept.RelationType_UnsetRelates_Res
                 | Type_ResResAttributeTypePutRes Concept.AttributeType_Put_Res
                 | Type_ResResAttributeTypeGetRes Concept.AttributeType_Get_Res
                 | Type_ResResAttributeTypeGetRegexRes Concept.AttributeType_GetRegex_Res
                 | Type_ResResAttributeTypeSetRegexRes Concept.AttributeType_SetRegex_Res
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_ResRes where
        nameOf _ = (Hs.fromString "Type_ResRes")
 
instance HsJSONPB.ToSchema Type_ResRes where
        declareNamedSchema _
          = do let declare_type_delete_res = HsJSONPB.declareSchemaRef
               type_ResResTypeDeleteRes <- declare_type_delete_res Proxy.Proxy
               let _ = Hs.pure Type_ResResTypeDeleteRes <*>
                         HsJSONPB.asProxy declare_type_delete_res
               let declare_type_set_label_res = HsJSONPB.declareSchemaRef
               type_ResResTypeSetLabelRes <- declare_type_set_label_res
                                               Proxy.Proxy
               let _ = Hs.pure Type_ResResTypeSetLabelRes <*>
                         HsJSONPB.asProxy declare_type_set_label_res
               let declare_type_is_abstract_res = HsJSONPB.declareSchemaRef
               type_ResResTypeIsAbstractRes <- declare_type_is_abstract_res
                                                 Proxy.Proxy
               let _ = Hs.pure Type_ResResTypeIsAbstractRes <*>
                         HsJSONPB.asProxy declare_type_is_abstract_res
               let declare_type_get_supertype_res = HsJSONPB.declareSchemaRef
               type_ResResTypeGetSupertypeRes <- declare_type_get_supertype_res
                                                   Proxy.Proxy
               let _ = Hs.pure Type_ResResTypeGetSupertypeRes <*>
                         HsJSONPB.asProxy declare_type_get_supertype_res
               let declare_type_set_supertype_res = HsJSONPB.declareSchemaRef
               type_ResResTypeSetSupertypeRes <- declare_type_set_supertype_res
                                                   Proxy.Proxy
               let _ = Hs.pure Type_ResResTypeSetSupertypeRes <*>
                         HsJSONPB.asProxy declare_type_set_supertype_res
               let declare_thing_type_set_abstract_res = HsJSONPB.declareSchemaRef
               type_ResResThingTypeSetAbstractRes <- declare_thing_type_set_abstract_res
                                                       Proxy.Proxy
               let _ = Hs.pure Type_ResResThingTypeSetAbstractRes <*>
                         HsJSONPB.asProxy declare_thing_type_set_abstract_res
               let declare_thing_type_unset_abstract_res
                     = HsJSONPB.declareSchemaRef
               type_ResResThingTypeUnsetAbstractRes <- declare_thing_type_unset_abstract_res
                                                         Proxy.Proxy
               let _ = Hs.pure Type_ResResThingTypeUnsetAbstractRes <*>
                         HsJSONPB.asProxy declare_thing_type_unset_abstract_res
               let declare_thing_type_set_owns_res = HsJSONPB.declareSchemaRef
               type_ResResThingTypeSetOwnsRes <- declare_thing_type_set_owns_res
                                                   Proxy.Proxy
               let _ = Hs.pure Type_ResResThingTypeSetOwnsRes <*>
                         HsJSONPB.asProxy declare_thing_type_set_owns_res
               let declare_thing_type_unset_owns_res = HsJSONPB.declareSchemaRef
               type_ResResThingTypeUnsetOwnsRes <- declare_thing_type_unset_owns_res
                                                     Proxy.Proxy
               let _ = Hs.pure Type_ResResThingTypeUnsetOwnsRes <*>
                         HsJSONPB.asProxy declare_thing_type_unset_owns_res
               let declare_thing_type_set_plays_res = HsJSONPB.declareSchemaRef
               type_ResResThingTypeSetPlaysRes <- declare_thing_type_set_plays_res
                                                    Proxy.Proxy
               let _ = Hs.pure Type_ResResThingTypeSetPlaysRes <*>
                         HsJSONPB.asProxy declare_thing_type_set_plays_res
               let declare_thing_type_unset_plays_res = HsJSONPB.declareSchemaRef
               type_ResResThingTypeUnsetPlaysRes <- declare_thing_type_unset_plays_res
                                                      Proxy.Proxy
               let _ = Hs.pure Type_ResResThingTypeUnsetPlaysRes <*>
                         HsJSONPB.asProxy declare_thing_type_unset_plays_res
               let declare_entity_type_create_res = HsJSONPB.declareSchemaRef
               type_ResResEntityTypeCreateRes <- declare_entity_type_create_res
                                                   Proxy.Proxy
               let _ = Hs.pure Type_ResResEntityTypeCreateRes <*>
                         HsJSONPB.asProxy declare_entity_type_create_res
               let declare_relation_type_create_res = HsJSONPB.declareSchemaRef
               type_ResResRelationTypeCreateRes <- declare_relation_type_create_res
                                                     Proxy.Proxy
               let _ = Hs.pure Type_ResResRelationTypeCreateRes <*>
                         HsJSONPB.asProxy declare_relation_type_create_res
               let declare_relation_type_get_relates_for_role_label_res
                     = HsJSONPB.declareSchemaRef
               type_ResResRelationTypeGetRelatesForRoleLabelRes <- declare_relation_type_get_relates_for_role_label_res
                                                                     Proxy.Proxy
               let _ = Hs.pure Type_ResResRelationTypeGetRelatesForRoleLabelRes
                         <*>
                         HsJSONPB.asProxy
                           declare_relation_type_get_relates_for_role_label_res
               let declare_relation_type_set_relates_res
                     = HsJSONPB.declareSchemaRef
               type_ResResRelationTypeSetRelatesRes <- declare_relation_type_set_relates_res
                                                         Proxy.Proxy
               let _ = Hs.pure Type_ResResRelationTypeSetRelatesRes <*>
                         HsJSONPB.asProxy declare_relation_type_set_relates_res
               let declare_relation_type_unset_relates_res
                     = HsJSONPB.declareSchemaRef
               type_ResResRelationTypeUnsetRelatesRes <- declare_relation_type_unset_relates_res
                                                           Proxy.Proxy
               let _ = Hs.pure Type_ResResRelationTypeUnsetRelatesRes <*>
                         HsJSONPB.asProxy declare_relation_type_unset_relates_res
               let declare_attribute_type_put_res = HsJSONPB.declareSchemaRef
               type_ResResAttributeTypePutRes <- declare_attribute_type_put_res
                                                   Proxy.Proxy
               let _ = Hs.pure Type_ResResAttributeTypePutRes <*>
                         HsJSONPB.asProxy declare_attribute_type_put_res
               let declare_attribute_type_get_res = HsJSONPB.declareSchemaRef
               type_ResResAttributeTypeGetRes <- declare_attribute_type_get_res
                                                   Proxy.Proxy
               let _ = Hs.pure Type_ResResAttributeTypeGetRes <*>
                         HsJSONPB.asProxy declare_attribute_type_get_res
               let declare_attribute_type_get_regex_res
                     = HsJSONPB.declareSchemaRef
               type_ResResAttributeTypeGetRegexRes <- declare_attribute_type_get_regex_res
                                                        Proxy.Proxy
               let _ = Hs.pure Type_ResResAttributeTypeGetRegexRes <*>
                         HsJSONPB.asProxy declare_attribute_type_get_regex_res
               let declare_attribute_type_set_regex_res
                     = HsJSONPB.declareSchemaRef
               type_ResResAttributeTypeSetRegexRes <- declare_attribute_type_set_regex_res
                                                        Proxy.Proxy
               let _ = Hs.pure Type_ResResAttributeTypeSetRegexRes <*>
                         HsJSONPB.asProxy declare_attribute_type_set_regex_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_ResRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("type_delete_res",
                                                         type_ResResTypeDeleteRes),
                                                        ("type_set_label_res",
                                                         type_ResResTypeSetLabelRes),
                                                        ("type_is_abstract_res",
                                                         type_ResResTypeIsAbstractRes),
                                                        ("type_get_supertype_res",
                                                         type_ResResTypeGetSupertypeRes),
                                                        ("type_set_supertype_res",
                                                         type_ResResTypeSetSupertypeRes),
                                                        ("thing_type_set_abstract_res",
                                                         type_ResResThingTypeSetAbstractRes),
                                                        ("thing_type_unset_abstract_res",
                                                         type_ResResThingTypeUnsetAbstractRes),
                                                        ("thing_type_set_owns_res",
                                                         type_ResResThingTypeSetOwnsRes),
                                                        ("thing_type_unset_owns_res",
                                                         type_ResResThingTypeUnsetOwnsRes),
                                                        ("thing_type_set_plays_res",
                                                         type_ResResThingTypeSetPlaysRes),
                                                        ("thing_type_unset_plays_res",
                                                         type_ResResThingTypeUnsetPlaysRes),
                                                        ("entity_type_create_res",
                                                         type_ResResEntityTypeCreateRes),
                                                        ("relation_type_create_res",
                                                         type_ResResRelationTypeCreateRes),
                                                        ("relation_type_get_relates_for_role_label_res",
                                                         type_ResResRelationTypeGetRelatesForRoleLabelRes),
                                                        ("relation_type_set_relates_res",
                                                         type_ResResRelationTypeSetRelatesRes),
                                                        ("relation_type_unset_relates_res",
                                                         type_ResResRelationTypeUnsetRelatesRes),
                                                        ("attribute_type_put_res",
                                                         type_ResResAttributeTypePutRes),
                                                        ("attribute_type_get_res",
                                                         type_ResResAttributeTypeGetRes),
                                                        ("attribute_type_get_regex_res",
                                                         type_ResResAttributeTypeGetRegexRes),
                                                        ("attribute_type_set_regex_res",
                                                         type_ResResAttributeTypeSetRegexRes)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype Type_ResPart = Type_ResPart{type_ResPartRes ::
                                    Hs.Maybe Type_ResPartRes}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_ResPart where
        nameOf _ = (Hs.fromString "Type_ResPart")
 
instance HsProtobuf.HasDefault Type_ResPart
 
instance HsProtobuf.Message Type_ResPart where
        encodeMessage _ Type_ResPart{type_ResPartRes = type_ResPartRes}
          = (Hs.mconcat
               [case type_ResPartRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Type_ResPartResTypeGetSupertypesResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 100)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_GetSupertypes_ResPart)
                                        @(HsProtobuf.Nested Concept.Type_GetSupertypes_ResPart)
                                        (Hs.Just y)))
                             Type_ResPartResTypeGetSubtypesResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 101)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_GetSubtypes_ResPart)
                                        @(HsProtobuf.Nested Concept.Type_GetSubtypes_ResPart)
                                        (Hs.Just y)))
                             Type_ResPartResRoleTypeGetRelationTypesResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 200)
                                     (Hs.coerce
                                        @(Hs.Maybe Concept.RoleType_GetRelationTypes_ResPart)
                                        @(HsProtobuf.Nested Concept.RoleType_GetRelationTypes_ResPart)
                                        (Hs.Just y)))
                             Type_ResPartResRoleTypeGetPlayersResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 201)
                                     (Hs.coerce @(Hs.Maybe Concept.RoleType_GetPlayers_ResPart)
                                        @(HsProtobuf.Nested Concept.RoleType_GetPlayers_ResPart)
                                        (Hs.Just y)))
                             Type_ResPartResThingTypeGetInstancesResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 300)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_GetInstances_ResPart)
                                        @(HsProtobuf.Nested Concept.ThingType_GetInstances_ResPart)
                                        (Hs.Just y)))
                             Type_ResPartResThingTypeGetOwnsResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 301)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_GetOwns_ResPart)
                                        @(HsProtobuf.Nested Concept.ThingType_GetOwns_ResPart)
                                        (Hs.Just y)))
                             Type_ResPartResThingTypeGetPlaysResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 302)
                                     (Hs.coerce @(Hs.Maybe Concept.ThingType_GetPlays_ResPart)
                                        @(HsProtobuf.Nested Concept.ThingType_GetPlays_ResPart)
                                        (Hs.Just y)))
                             Type_ResPartResRelationTypeGetRelatesResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 500)
                                     (Hs.coerce @(Hs.Maybe Concept.RelationType_GetRelates_ResPart)
                                        @(HsProtobuf.Nested Concept.RelationType_GetRelates_ResPart)
                                        (Hs.Just y)))
                             Type_ResPartResAttributeTypeGetOwnersResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 600)
                                     (Hs.coerce @(Hs.Maybe Concept.AttributeType_GetOwners_ResPart)
                                        @(HsProtobuf.Nested Concept.AttributeType_GetOwners_ResPart)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Type_ResPart) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 100),
                   (Hs.pure (Hs.fmap Type_ResPartResTypeGetSupertypesResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.Type_GetSupertypes_ResPart))
                        @(_ (Hs.Maybe Concept.Type_GetSupertypes_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 101),
                   (Hs.pure (Hs.fmap Type_ResPartResTypeGetSubtypesResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.Type_GetSubtypes_ResPart))
                        @(_ (Hs.Maybe Concept.Type_GetSubtypes_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 200),
                   (Hs.pure (Hs.fmap Type_ResPartResRoleTypeGetRelationTypesResPart))
                     <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.RoleType_GetRelationTypes_ResPart))
                        @(_ (Hs.Maybe Concept.RoleType_GetRelationTypes_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 201),
                   (Hs.pure (Hs.fmap Type_ResPartResRoleTypeGetPlayersResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.RoleType_GetPlayers_ResPart))
                        @(_ (Hs.Maybe Concept.RoleType_GetPlayers_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 300),
                   (Hs.pure (Hs.fmap Type_ResPartResThingTypeGetInstancesResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ThingType_GetInstances_ResPart))
                        @(_ (Hs.Maybe Concept.ThingType_GetInstances_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 301),
                   (Hs.pure (Hs.fmap Type_ResPartResThingTypeGetOwnsResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ThingType_GetOwns_ResPart))
                        @(_ (Hs.Maybe Concept.ThingType_GetOwns_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 302),
                   (Hs.pure (Hs.fmap Type_ResPartResThingTypeGetPlaysResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.ThingType_GetPlays_ResPart))
                        @(_ (Hs.Maybe Concept.ThingType_GetPlays_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 500),
                   (Hs.pure (Hs.fmap Type_ResPartResRelationTypeGetRelatesResPart))
                     <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.RelationType_GetRelates_ResPart))
                        @(_ (Hs.Maybe Concept.RelationType_GetRelates_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 600),
                   (Hs.pure (Hs.fmap Type_ResPartResAttributeTypeGetOwnersResPart))
                     <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Concept.AttributeType_GetOwners_ResPart))
                        @(_ (Hs.Maybe Concept.AttributeType_GetOwners_ResPart))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_ResPart where
        toJSONPB
          (Type_ResPart
             f100_or_f101_or_f200_or_f201_or_f300_or_f301_or_f302_or_f500_or_f600)
          = (HsJSONPB.object
               [(let encodeRes
                       = (case
                            f100_or_f101_or_f200_or_f201_or_f300_or_f301_or_f302_or_f500_or_f600
                            of
                              Hs.Just (Type_ResPartResTypeGetSupertypesResPart f100)
                                -> (HsJSONPB.pair "type_get_supertypes_res_part" f100)
                              Hs.Just (Type_ResPartResTypeGetSubtypesResPart f101)
                                -> (HsJSONPB.pair "type_get_subtypes_res_part" f101)
                              Hs.Just (Type_ResPartResRoleTypeGetRelationTypesResPart f200)
                                -> (HsJSONPB.pair "role_type_get_relation_types_res_part" f200)
                              Hs.Just (Type_ResPartResRoleTypeGetPlayersResPart f201)
                                -> (HsJSONPB.pair "role_type_get_players_res_part" f201)
                              Hs.Just (Type_ResPartResThingTypeGetInstancesResPart f300)
                                -> (HsJSONPB.pair "thing_type_get_instances_res_part" f300)
                              Hs.Just (Type_ResPartResThingTypeGetOwnsResPart f301)
                                -> (HsJSONPB.pair "thing_type_get_owns_res_part" f301)
                              Hs.Just (Type_ResPartResThingTypeGetPlaysResPart f302)
                                -> (HsJSONPB.pair "thing_type_get_plays_res_part" f302)
                              Hs.Just (Type_ResPartResRelationTypeGetRelatesResPart f500)
                                -> (HsJSONPB.pair "relation_type_get_relates_res_part" f500)
                              Hs.Just (Type_ResPartResAttributeTypeGetOwnersResPart f600)
                                -> (HsJSONPB.pair "attribute_type_get_owners_res_part" f600)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB
          (Type_ResPart
             f100_or_f101_or_f200_or_f201_or_f300_or_f301_or_f302_or_f500_or_f600)
          = (HsJSONPB.pairs
               [(let encodeRes
                       = (case
                            f100_or_f101_or_f200_or_f201_or_f300_or_f301_or_f302_or_f500_or_f600
                            of
                              Hs.Just (Type_ResPartResTypeGetSupertypesResPart f100)
                                -> (HsJSONPB.pair "type_get_supertypes_res_part" f100)
                              Hs.Just (Type_ResPartResTypeGetSubtypesResPart f101)
                                -> (HsJSONPB.pair "type_get_subtypes_res_part" f101)
                              Hs.Just (Type_ResPartResRoleTypeGetRelationTypesResPart f200)
                                -> (HsJSONPB.pair "role_type_get_relation_types_res_part" f200)
                              Hs.Just (Type_ResPartResRoleTypeGetPlayersResPart f201)
                                -> (HsJSONPB.pair "role_type_get_players_res_part" f201)
                              Hs.Just (Type_ResPartResThingTypeGetInstancesResPart f300)
                                -> (HsJSONPB.pair "thing_type_get_instances_res_part" f300)
                              Hs.Just (Type_ResPartResThingTypeGetOwnsResPart f301)
                                -> (HsJSONPB.pair "thing_type_get_owns_res_part" f301)
                              Hs.Just (Type_ResPartResThingTypeGetPlaysResPart f302)
                                -> (HsJSONPB.pair "thing_type_get_plays_res_part" f302)
                              Hs.Just (Type_ResPartResRelationTypeGetRelatesResPart f500)
                                -> (HsJSONPB.pair "relation_type_get_relates_res_part" f500)
                              Hs.Just (Type_ResPartResAttributeTypeGetOwnersResPart f600)
                                -> (HsJSONPB.pair "attribute_type_get_owners_res_part" f600)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB Type_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "Type_ResPart"
               (\ obj ->
                  (Hs.pure Type_ResPart) <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Type_ResPartResTypeGetSupertypesResPart <$>
                                  (HsJSONPB.parseField parseObj "type_get_supertypes_res_part"),
                                Hs.Just Hs.. Type_ResPartResTypeGetSubtypesResPart <$>
                                  (HsJSONPB.parseField parseObj "type_get_subtypes_res_part"),
                                Hs.Just Hs.. Type_ResPartResRoleTypeGetRelationTypesResPart <$>
                                  (HsJSONPB.parseField parseObj
                                     "role_type_get_relation_types_res_part"),
                                Hs.Just Hs.. Type_ResPartResRoleTypeGetPlayersResPart <$>
                                  (HsJSONPB.parseField parseObj "role_type_get_players_res_part"),
                                Hs.Just Hs.. Type_ResPartResThingTypeGetInstancesResPart <$>
                                  (HsJSONPB.parseField parseObj
                                     "thing_type_get_instances_res_part"),
                                Hs.Just Hs.. Type_ResPartResThingTypeGetOwnsResPart <$>
                                  (HsJSONPB.parseField parseObj "thing_type_get_owns_res_part"),
                                Hs.Just Hs.. Type_ResPartResThingTypeGetPlaysResPart <$>
                                  (HsJSONPB.parseField parseObj "thing_type_get_plays_res_part"),
                                Hs.Just Hs.. Type_ResPartResRelationTypeGetRelatesResPart <$>
                                  (HsJSONPB.parseField parseObj
                                     "relation_type_get_relates_res_part"),
                                Hs.Just Hs.. Type_ResPartResAttributeTypeGetOwnersResPart <$>
                                  (HsJSONPB.parseField parseObj
                                     "attribute_type_get_owners_res_part"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON Type_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_ResPart where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               type_ResPartRes <- declare_res Proxy.Proxy
               let _ = Hs.pure Type_ResPart <*> HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res", type_ResPartRes)]}})
 
data Type_ResPartRes = Type_ResPartResTypeGetSupertypesResPart Concept.Type_GetSupertypes_ResPart
                     | Type_ResPartResTypeGetSubtypesResPart Concept.Type_GetSubtypes_ResPart
                     | Type_ResPartResRoleTypeGetRelationTypesResPart Concept.RoleType_GetRelationTypes_ResPart
                     | Type_ResPartResRoleTypeGetPlayersResPart Concept.RoleType_GetPlayers_ResPart
                     | Type_ResPartResThingTypeGetInstancesResPart Concept.ThingType_GetInstances_ResPart
                     | Type_ResPartResThingTypeGetOwnsResPart Concept.ThingType_GetOwns_ResPart
                     | Type_ResPartResThingTypeGetPlaysResPart Concept.ThingType_GetPlays_ResPart
                     | Type_ResPartResRelationTypeGetRelatesResPart Concept.RelationType_GetRelates_ResPart
                     | Type_ResPartResAttributeTypeGetOwnersResPart Concept.AttributeType_GetOwners_ResPart
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_ResPartRes where
        nameOf _ = (Hs.fromString "Type_ResPartRes")
 
instance HsJSONPB.ToSchema Type_ResPartRes where
        declareNamedSchema _
          = do let declare_type_get_supertypes_res_part
                     = HsJSONPB.declareSchemaRef
               type_ResPartResTypeGetSupertypesResPart <- declare_type_get_supertypes_res_part
                                                            Proxy.Proxy
               let _ = Hs.pure Type_ResPartResTypeGetSupertypesResPart <*>
                         HsJSONPB.asProxy declare_type_get_supertypes_res_part
               let declare_type_get_subtypes_res_part = HsJSONPB.declareSchemaRef
               type_ResPartResTypeGetSubtypesResPart <- declare_type_get_subtypes_res_part
                                                          Proxy.Proxy
               let _ = Hs.pure Type_ResPartResTypeGetSubtypesResPart <*>
                         HsJSONPB.asProxy declare_type_get_subtypes_res_part
               let declare_role_type_get_relation_types_res_part
                     = HsJSONPB.declareSchemaRef
               type_ResPartResRoleTypeGetRelationTypesResPart <- declare_role_type_get_relation_types_res_part
                                                                   Proxy.Proxy
               let _ = Hs.pure Type_ResPartResRoleTypeGetRelationTypesResPart <*>
                         HsJSONPB.asProxy declare_role_type_get_relation_types_res_part
               let declare_role_type_get_players_res_part
                     = HsJSONPB.declareSchemaRef
               type_ResPartResRoleTypeGetPlayersResPart <- declare_role_type_get_players_res_part
                                                             Proxy.Proxy
               let _ = Hs.pure Type_ResPartResRoleTypeGetPlayersResPart <*>
                         HsJSONPB.asProxy declare_role_type_get_players_res_part
               let declare_thing_type_get_instances_res_part
                     = HsJSONPB.declareSchemaRef
               type_ResPartResThingTypeGetInstancesResPart <- declare_thing_type_get_instances_res_part
                                                                Proxy.Proxy
               let _ = Hs.pure Type_ResPartResThingTypeGetInstancesResPart <*>
                         HsJSONPB.asProxy declare_thing_type_get_instances_res_part
               let declare_thing_type_get_owns_res_part
                     = HsJSONPB.declareSchemaRef
               type_ResPartResThingTypeGetOwnsResPart <- declare_thing_type_get_owns_res_part
                                                           Proxy.Proxy
               let _ = Hs.pure Type_ResPartResThingTypeGetOwnsResPart <*>
                         HsJSONPB.asProxy declare_thing_type_get_owns_res_part
               let declare_thing_type_get_plays_res_part
                     = HsJSONPB.declareSchemaRef
               type_ResPartResThingTypeGetPlaysResPart <- declare_thing_type_get_plays_res_part
                                                            Proxy.Proxy
               let _ = Hs.pure Type_ResPartResThingTypeGetPlaysResPart <*>
                         HsJSONPB.asProxy declare_thing_type_get_plays_res_part
               let declare_relation_type_get_relates_res_part
                     = HsJSONPB.declareSchemaRef
               type_ResPartResRelationTypeGetRelatesResPart <- declare_relation_type_get_relates_res_part
                                                                 Proxy.Proxy
               let _ = Hs.pure Type_ResPartResRelationTypeGetRelatesResPart <*>
                         HsJSONPB.asProxy declare_relation_type_get_relates_res_part
               let declare_attribute_type_get_owners_res_part
                     = HsJSONPB.declareSchemaRef
               type_ResPartResAttributeTypeGetOwnersResPart <- declare_attribute_type_get_owners_res_part
                                                                 Proxy.Proxy
               let _ = Hs.pure Type_ResPartResAttributeTypeGetOwnersResPart <*>
                         HsJSONPB.asProxy declare_attribute_type_get_owners_res_part
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_ResPartRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("type_get_supertypes_res_part",
                                                         type_ResPartResTypeGetSupertypesResPart),
                                                        ("type_get_subtypes_res_part",
                                                         type_ResPartResTypeGetSubtypesResPart),
                                                        ("role_type_get_relation_types_res_part",
                                                         type_ResPartResRoleTypeGetRelationTypesResPart),
                                                        ("role_type_get_players_res_part",
                                                         type_ResPartResRoleTypeGetPlayersResPart),
                                                        ("thing_type_get_instances_res_part",
                                                         type_ResPartResThingTypeGetInstancesResPart),
                                                        ("thing_type_get_owns_res_part",
                                                         type_ResPartResThingTypeGetOwnsResPart),
                                                        ("thing_type_get_plays_res_part",
                                                         type_ResPartResThingTypeGetPlaysResPart),
                                                        ("relation_type_get_relates_res_part",
                                                         type_ResPartResRelationTypeGetRelatesResPart),
                                                        ("attribute_type_get_owners_res_part",
                                                         type_ResPartResAttributeTypeGetOwnersResPart)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data Type_Encoding = Type_EncodingTHING_TYPE
                   | Type_EncodingENTITY_TYPE
                   | Type_EncodingRELATION_TYPE
                   | Type_EncodingATTRIBUTE_TYPE
                   | Type_EncodingROLE_TYPE
                   deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_Encoding where
        nameOf _ = (Hs.fromString "Type_Encoding")
 
instance HsProtobuf.HasDefault Type_Encoding
 
instance Hs.Bounded Type_Encoding where
        minBound = Type_EncodingTHING_TYPE
        maxBound = Type_EncodingROLE_TYPE
 
instance Hs.Ord Type_Encoding where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum Type_Encoding where
        toProtoEnumMay 0 = Hs.Just Type_EncodingTHING_TYPE
        toProtoEnumMay 1 = Hs.Just Type_EncodingENTITY_TYPE
        toProtoEnumMay 2 = Hs.Just Type_EncodingRELATION_TYPE
        toProtoEnumMay 3 = Hs.Just Type_EncodingATTRIBUTE_TYPE
        toProtoEnumMay 4 = Hs.Just Type_EncodingROLE_TYPE
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (Type_EncodingTHING_TYPE) = 0
        fromProtoEnum (Type_EncodingENTITY_TYPE) = 1
        fromProtoEnum (Type_EncodingRELATION_TYPE) = 2
        fromProtoEnum (Type_EncodingATTRIBUTE_TYPE) = 3
        fromProtoEnum (Type_EncodingROLE_TYPE) = 4
 
instance HsJSONPB.ToJSONPB Type_Encoding where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB Type_Encoding where
        parseJSONPB (HsJSONPB.String "THING_TYPE")
          = Hs.pure Type_EncodingTHING_TYPE
        parseJSONPB (HsJSONPB.String "ENTITY_TYPE")
          = Hs.pure Type_EncodingENTITY_TYPE
        parseJSONPB (HsJSONPB.String "RELATION_TYPE")
          = Hs.pure Type_EncodingRELATION_TYPE
        parseJSONPB (HsJSONPB.String "ATTRIBUTE_TYPE")
          = Hs.pure Type_EncodingATTRIBUTE_TYPE
        parseJSONPB (HsJSONPB.String "ROLE_TYPE")
          = Hs.pure Type_EncodingROLE_TYPE
        parseJSONPB v = (HsJSONPB.typeMismatch "Type_Encoding" v)
 
instance HsJSONPB.ToJSON Type_Encoding where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_Encoding where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite Type_Encoding
 
data Type_Delete = Type_Delete{}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_Delete where
        nameOf _ = (Hs.fromString "Type_Delete")
 
instance HsProtobuf.HasDefault Type_Delete
 
instance HsProtobuf.Message Type_Delete where
        encodeMessage _ Type_Delete{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_Delete)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_Delete where
        toJSONPB (Type_Delete) = (HsJSONPB.object [])
        toEncodingPB (Type_Delete) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_Delete where
        parseJSONPB
          = (HsJSONPB.withObject "Type_Delete"
               (\ obj -> (Hs.pure Type_Delete)))
 
instance HsJSONPB.ToJSON Type_Delete where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_Delete where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_Delete where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_Delete",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Type_Delete_Req = Type_Delete_Req{}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_Delete_Req where
        nameOf _ = (Hs.fromString "Type_Delete_Req")
 
instance HsProtobuf.HasDefault Type_Delete_Req
 
instance HsProtobuf.Message Type_Delete_Req where
        encodeMessage _ Type_Delete_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_Delete_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_Delete_Req where
        toJSONPB (Type_Delete_Req) = (HsJSONPB.object [])
        toEncodingPB (Type_Delete_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_Delete_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Type_Delete_Req"
               (\ obj -> (Hs.pure Type_Delete_Req)))
 
instance HsJSONPB.ToJSON Type_Delete_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_Delete_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_Delete_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_Delete_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Type_Delete_Res = Type_Delete_Res{}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_Delete_Res where
        nameOf _ = (Hs.fromString "Type_Delete_Res")
 
instance HsProtobuf.HasDefault Type_Delete_Res
 
instance HsProtobuf.Message Type_Delete_Res where
        encodeMessage _ Type_Delete_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_Delete_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_Delete_Res where
        toJSONPB (Type_Delete_Res) = (HsJSONPB.object [])
        toEncodingPB (Type_Delete_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_Delete_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Type_Delete_Res"
               (\ obj -> (Hs.pure Type_Delete_Res)))
 
instance HsJSONPB.ToJSON Type_Delete_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_Delete_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_Delete_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_Delete_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Type_SetLabel = Type_SetLabel{}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_SetLabel where
        nameOf _ = (Hs.fromString "Type_SetLabel")
 
instance HsProtobuf.HasDefault Type_SetLabel
 
instance HsProtobuf.Message Type_SetLabel where
        encodeMessage _ Type_SetLabel{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_SetLabel)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_SetLabel where
        toJSONPB (Type_SetLabel) = (HsJSONPB.object [])
        toEncodingPB (Type_SetLabel) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_SetLabel where
        parseJSONPB
          = (HsJSONPB.withObject "Type_SetLabel"
               (\ obj -> (Hs.pure Type_SetLabel)))
 
instance HsJSONPB.ToJSON Type_SetLabel where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_SetLabel where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_SetLabel where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_SetLabel",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Type_SetLabel_Req = Type_SetLabel_Req{type_SetLabel_ReqLabel
                                              :: Hs.Text}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_SetLabel_Req where
        nameOf _ = (Hs.fromString "Type_SetLabel_Req")
 
instance HsProtobuf.HasDefault Type_SetLabel_Req
 
instance HsProtobuf.Message Type_SetLabel_Req where
        encodeMessage _
          Type_SetLabel_Req{type_SetLabel_ReqLabel = type_SetLabel_ReqLabel}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   type_SetLabel_ReqLabel)])
        decodeMessage _
          = (Hs.pure Type_SetLabel_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Type_SetLabel_Req where
        toJSONPB (Type_SetLabel_Req f1) = (HsJSONPB.object ["label" .= f1])
        toEncodingPB (Type_SetLabel_Req f1)
          = (HsJSONPB.pairs ["label" .= f1])
 
instance HsJSONPB.FromJSONPB Type_SetLabel_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Type_SetLabel_Req"
               (\ obj -> (Hs.pure Type_SetLabel_Req) <*> obj .: "label"))
 
instance HsJSONPB.ToJSON Type_SetLabel_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_SetLabel_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_SetLabel_Req where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               type_SetLabel_ReqLabel <- declare_label Proxy.Proxy
               let _ = Hs.pure Type_SetLabel_Req <*>
                         HsJSONPB.asProxy declare_label
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_SetLabel_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label", type_SetLabel_ReqLabel)]}})
 
data Type_SetLabel_Res = Type_SetLabel_Res{}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_SetLabel_Res where
        nameOf _ = (Hs.fromString "Type_SetLabel_Res")
 
instance HsProtobuf.HasDefault Type_SetLabel_Res
 
instance HsProtobuf.Message Type_SetLabel_Res where
        encodeMessage _ Type_SetLabel_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_SetLabel_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_SetLabel_Res where
        toJSONPB (Type_SetLabel_Res) = (HsJSONPB.object [])
        toEncodingPB (Type_SetLabel_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_SetLabel_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Type_SetLabel_Res"
               (\ obj -> (Hs.pure Type_SetLabel_Res)))
 
instance HsJSONPB.ToJSON Type_SetLabel_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_SetLabel_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_SetLabel_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_SetLabel_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Type_IsAbstract = Type_IsAbstract{}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_IsAbstract where
        nameOf _ = (Hs.fromString "Type_IsAbstract")
 
instance HsProtobuf.HasDefault Type_IsAbstract
 
instance HsProtobuf.Message Type_IsAbstract where
        encodeMessage _ Type_IsAbstract{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_IsAbstract)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_IsAbstract where
        toJSONPB (Type_IsAbstract) = (HsJSONPB.object [])
        toEncodingPB (Type_IsAbstract) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_IsAbstract where
        parseJSONPB
          = (HsJSONPB.withObject "Type_IsAbstract"
               (\ obj -> (Hs.pure Type_IsAbstract)))
 
instance HsJSONPB.ToJSON Type_IsAbstract where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_IsAbstract where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_IsAbstract where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_IsAbstract",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Type_IsAbstract_Req = Type_IsAbstract_Req{}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_IsAbstract_Req where
        nameOf _ = (Hs.fromString "Type_IsAbstract_Req")
 
instance HsProtobuf.HasDefault Type_IsAbstract_Req
 
instance HsProtobuf.Message Type_IsAbstract_Req where
        encodeMessage _ Type_IsAbstract_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_IsAbstract_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_IsAbstract_Req where
        toJSONPB (Type_IsAbstract_Req) = (HsJSONPB.object [])
        toEncodingPB (Type_IsAbstract_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_IsAbstract_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Type_IsAbstract_Req"
               (\ obj -> (Hs.pure Type_IsAbstract_Req)))
 
instance HsJSONPB.ToJSON Type_IsAbstract_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_IsAbstract_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_IsAbstract_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_IsAbstract_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Type_IsAbstract_Res = Type_IsAbstract_Res{type_IsAbstract_ResAbstract
                                                  :: Hs.Bool}
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_IsAbstract_Res where
        nameOf _ = (Hs.fromString "Type_IsAbstract_Res")
 
instance HsProtobuf.HasDefault Type_IsAbstract_Res
 
instance HsProtobuf.Message Type_IsAbstract_Res where
        encodeMessage _
          Type_IsAbstract_Res{type_IsAbstract_ResAbstract =
                                type_IsAbstract_ResAbstract}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   type_IsAbstract_ResAbstract)])
        decodeMessage _
          = (Hs.pure Type_IsAbstract_Res) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "abstract")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Type_IsAbstract_Res where
        toJSONPB (Type_IsAbstract_Res f1)
          = (HsJSONPB.object ["abstract" .= f1])
        toEncodingPB (Type_IsAbstract_Res f1)
          = (HsJSONPB.pairs ["abstract" .= f1])
 
instance HsJSONPB.FromJSONPB Type_IsAbstract_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Type_IsAbstract_Res"
               (\ obj -> (Hs.pure Type_IsAbstract_Res) <*> obj .: "abstract"))
 
instance HsJSONPB.ToJSON Type_IsAbstract_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_IsAbstract_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_IsAbstract_Res where
        declareNamedSchema _
          = do let declare_abstract = HsJSONPB.declareSchemaRef
               type_IsAbstract_ResAbstract <- declare_abstract Proxy.Proxy
               let _ = Hs.pure Type_IsAbstract_Res <*>
                         HsJSONPB.asProxy declare_abstract
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_IsAbstract_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("abstract",
                                                         type_IsAbstract_ResAbstract)]}})
 
data Type_GetSupertype = Type_GetSupertype{}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_GetSupertype where
        nameOf _ = (Hs.fromString "Type_GetSupertype")
 
instance HsProtobuf.HasDefault Type_GetSupertype
 
instance HsProtobuf.Message Type_GetSupertype where
        encodeMessage _ Type_GetSupertype{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_GetSupertype)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_GetSupertype where
        toJSONPB (Type_GetSupertype) = (HsJSONPB.object [])
        toEncodingPB (Type_GetSupertype) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_GetSupertype where
        parseJSONPB
          = (HsJSONPB.withObject "Type_GetSupertype"
               (\ obj -> (Hs.pure Type_GetSupertype)))
 
instance HsJSONPB.ToJSON Type_GetSupertype where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_GetSupertype where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_GetSupertype where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_GetSupertype",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Type_GetSupertype_Req = Type_GetSupertype_Req{}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_GetSupertype_Req where
        nameOf _ = (Hs.fromString "Type_GetSupertype_Req")
 
instance HsProtobuf.HasDefault Type_GetSupertype_Req
 
instance HsProtobuf.Message Type_GetSupertype_Req where
        encodeMessage _ Type_GetSupertype_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_GetSupertype_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_GetSupertype_Req where
        toJSONPB (Type_GetSupertype_Req) = (HsJSONPB.object [])
        toEncodingPB (Type_GetSupertype_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_GetSupertype_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Type_GetSupertype_Req"
               (\ obj -> (Hs.pure Type_GetSupertype_Req)))
 
instance HsJSONPB.ToJSON Type_GetSupertype_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_GetSupertype_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_GetSupertype_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_GetSupertype_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Type_GetSupertype_Res = Type_GetSupertype_Res{type_GetSupertype_ResRes
                                                      :: Hs.Maybe Type_GetSupertype_ResRes}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_GetSupertype_Res where
        nameOf _ = (Hs.fromString "Type_GetSupertype_Res")
 
instance HsProtobuf.HasDefault Type_GetSupertype_Res
 
instance HsProtobuf.Message Type_GetSupertype_Res where
        encodeMessage _
          Type_GetSupertype_Res{type_GetSupertype_ResRes =
                                  type_GetSupertype_ResRes}
          = (Hs.mconcat
               [case type_GetSupertype_ResRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Type_GetSupertype_ResResType y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Concept.Type)
                                        @(HsProtobuf.Nested Concept.Type)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Type_GetSupertype_Res) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap Type_GetSupertype_ResResType)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                        @(_ (Hs.Maybe Concept.Type))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_GetSupertype_Res where
        toJSONPB (Type_GetSupertype_Res f1)
          = (HsJSONPB.object
               [(let encodeRes
                       = (case f1 of
                              Hs.Just (Type_GetSupertype_ResResType f1)
                                -> (HsJSONPB.pair "type" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB (Type_GetSupertype_Res f1)
          = (HsJSONPB.pairs
               [(let encodeRes
                       = (case f1 of
                              Hs.Just (Type_GetSupertype_ResResType f1)
                                -> (HsJSONPB.pair "type" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB Type_GetSupertype_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Type_GetSupertype_Res"
               (\ obj ->
                  (Hs.pure Type_GetSupertype_Res) <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Type_GetSupertype_ResResType <$>
                                  (HsJSONPB.parseField parseObj "type"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON Type_GetSupertype_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_GetSupertype_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_GetSupertype_Res where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               type_GetSupertype_ResRes <- declare_res Proxy.Proxy
               let _ = Hs.pure Type_GetSupertype_Res <*>
                         HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_GetSupertype_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res", type_GetSupertype_ResRes)]}})
 
data Type_GetSupertype_ResRes = Type_GetSupertype_ResResType Concept.Type
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_GetSupertype_ResRes where
        nameOf _ = (Hs.fromString "Type_GetSupertype_ResRes")
 
instance HsJSONPB.ToSchema Type_GetSupertype_ResRes where
        declareNamedSchema _
          = do let declare_type = HsJSONPB.declareSchemaRef
               type_GetSupertype_ResResType <- declare_type Proxy.Proxy
               let _ = Hs.pure Type_GetSupertype_ResResType <*>
                         HsJSONPB.asProxy declare_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_GetSupertype_ResRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("type", type_GetSupertype_ResResType)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data Type_SetSupertype = Type_SetSupertype{}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_SetSupertype where
        nameOf _ = (Hs.fromString "Type_SetSupertype")
 
instance HsProtobuf.HasDefault Type_SetSupertype
 
instance HsProtobuf.Message Type_SetSupertype where
        encodeMessage _ Type_SetSupertype{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_SetSupertype)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_SetSupertype where
        toJSONPB (Type_SetSupertype) = (HsJSONPB.object [])
        toEncodingPB (Type_SetSupertype) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_SetSupertype where
        parseJSONPB
          = (HsJSONPB.withObject "Type_SetSupertype"
               (\ obj -> (Hs.pure Type_SetSupertype)))
 
instance HsJSONPB.ToJSON Type_SetSupertype where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_SetSupertype where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_SetSupertype where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_SetSupertype",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Type_SetSupertype_Req = Type_SetSupertype_Req{type_SetSupertype_ReqType
                                                      :: Hs.Maybe Concept.Type}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_SetSupertype_Req where
        nameOf _ = (Hs.fromString "Type_SetSupertype_Req")
 
instance HsProtobuf.HasDefault Type_SetSupertype_Req
 
instance HsProtobuf.Message Type_SetSupertype_Req where
        encodeMessage _
          Type_SetSupertype_Req{type_SetSupertype_ReqType =
                                  type_SetSupertype_ReqType}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Type)
                      @(HsProtobuf.Nested Concept.Type)
                      type_SetSupertype_ReqType))])
        decodeMessage _
          = (Hs.pure Type_SetSupertype_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                 @(_ (Hs.Maybe Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "type")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Type_SetSupertype_Req where
        toJSONPB (Type_SetSupertype_Req f1)
          = (HsJSONPB.object ["type" .= f1])
        toEncodingPB (Type_SetSupertype_Req f1)
          = (HsJSONPB.pairs ["type" .= f1])
 
instance HsJSONPB.FromJSONPB Type_SetSupertype_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Type_SetSupertype_Req"
               (\ obj -> (Hs.pure Type_SetSupertype_Req) <*> obj .: "type"))
 
instance HsJSONPB.ToJSON Type_SetSupertype_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_SetSupertype_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_SetSupertype_Req where
        declareNamedSchema _
          = do let declare_type = HsJSONPB.declareSchemaRef
               type_SetSupertype_ReqType <- declare_type Proxy.Proxy
               let _ = Hs.pure Type_SetSupertype_Req <*>
                         HsJSONPB.asProxy declare_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_SetSupertype_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("type", type_SetSupertype_ReqType)]}})
 
data Type_SetSupertype_Res = Type_SetSupertype_Res{}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_SetSupertype_Res where
        nameOf _ = (Hs.fromString "Type_SetSupertype_Res")
 
instance HsProtobuf.HasDefault Type_SetSupertype_Res
 
instance HsProtobuf.Message Type_SetSupertype_Res where
        encodeMessage _ Type_SetSupertype_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_SetSupertype_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_SetSupertype_Res where
        toJSONPB (Type_SetSupertype_Res) = (HsJSONPB.object [])
        toEncodingPB (Type_SetSupertype_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_SetSupertype_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Type_SetSupertype_Res"
               (\ obj -> (Hs.pure Type_SetSupertype_Res)))
 
instance HsJSONPB.ToJSON Type_SetSupertype_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_SetSupertype_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_SetSupertype_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_SetSupertype_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Type_GetSupertypes = Type_GetSupertypes{}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_GetSupertypes where
        nameOf _ = (Hs.fromString "Type_GetSupertypes")
 
instance HsProtobuf.HasDefault Type_GetSupertypes
 
instance HsProtobuf.Message Type_GetSupertypes where
        encodeMessage _ Type_GetSupertypes{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_GetSupertypes)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_GetSupertypes where
        toJSONPB (Type_GetSupertypes) = (HsJSONPB.object [])
        toEncodingPB (Type_GetSupertypes) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_GetSupertypes where
        parseJSONPB
          = (HsJSONPB.withObject "Type_GetSupertypes"
               (\ obj -> (Hs.pure Type_GetSupertypes)))
 
instance HsJSONPB.ToJSON Type_GetSupertypes where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_GetSupertypes where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_GetSupertypes where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_GetSupertypes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Type_GetSupertypes_Req = Type_GetSupertypes_Req{}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_GetSupertypes_Req where
        nameOf _ = (Hs.fromString "Type_GetSupertypes_Req")
 
instance HsProtobuf.HasDefault Type_GetSupertypes_Req
 
instance HsProtobuf.Message Type_GetSupertypes_Req where
        encodeMessage _ Type_GetSupertypes_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_GetSupertypes_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_GetSupertypes_Req where
        toJSONPB (Type_GetSupertypes_Req) = (HsJSONPB.object [])
        toEncodingPB (Type_GetSupertypes_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_GetSupertypes_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Type_GetSupertypes_Req"
               (\ obj -> (Hs.pure Type_GetSupertypes_Req)))
 
instance HsJSONPB.ToJSON Type_GetSupertypes_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_GetSupertypes_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_GetSupertypes_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_GetSupertypes_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Type_GetSupertypes_ResPart = Type_GetSupertypes_ResPart{type_GetSupertypes_ResPartTypes
                                                                :: Hs.Vector Concept.Type}
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_GetSupertypes_ResPart where
        nameOf _ = (Hs.fromString "Type_GetSupertypes_ResPart")
 
instance HsProtobuf.HasDefault Type_GetSupertypes_ResPart
 
instance HsProtobuf.Message Type_GetSupertypes_ResPart where
        encodeMessage _
          Type_GetSupertypes_ResPart{type_GetSupertypes_ResPartTypes =
                                       type_GetSupertypes_ResPartTypes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Type)
                      @(HsProtobuf.NestedVec Concept.Type)
                      type_GetSupertypes_ResPartTypes))])
        decodeMessage _
          = (Hs.pure Type_GetSupertypes_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Type))
                 @(_ (Hs.Vector Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "types")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Type_GetSupertypes_ResPart where
        toJSONPB (Type_GetSupertypes_ResPart f1)
          = (HsJSONPB.object ["types" .= f1])
        toEncodingPB (Type_GetSupertypes_ResPart f1)
          = (HsJSONPB.pairs ["types" .= f1])
 
instance HsJSONPB.FromJSONPB Type_GetSupertypes_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "Type_GetSupertypes_ResPart"
               (\ obj -> (Hs.pure Type_GetSupertypes_ResPart) <*> obj .: "types"))
 
instance HsJSONPB.ToJSON Type_GetSupertypes_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_GetSupertypes_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_GetSupertypes_ResPart where
        declareNamedSchema _
          = do let declare_types = HsJSONPB.declareSchemaRef
               type_GetSupertypes_ResPartTypes <- declare_types Proxy.Proxy
               let _ = Hs.pure Type_GetSupertypes_ResPart <*>
                         HsJSONPB.asProxy declare_types
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_GetSupertypes_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("types",
                                                         type_GetSupertypes_ResPartTypes)]}})
 
data Type_GetSubtypes = Type_GetSubtypes{}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_GetSubtypes where
        nameOf _ = (Hs.fromString "Type_GetSubtypes")
 
instance HsProtobuf.HasDefault Type_GetSubtypes
 
instance HsProtobuf.Message Type_GetSubtypes where
        encodeMessage _ Type_GetSubtypes{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_GetSubtypes)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_GetSubtypes where
        toJSONPB (Type_GetSubtypes) = (HsJSONPB.object [])
        toEncodingPB (Type_GetSubtypes) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_GetSubtypes where
        parseJSONPB
          = (HsJSONPB.withObject "Type_GetSubtypes"
               (\ obj -> (Hs.pure Type_GetSubtypes)))
 
instance HsJSONPB.ToJSON Type_GetSubtypes where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_GetSubtypes where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_GetSubtypes where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_GetSubtypes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Type_GetSubtypes_Req = Type_GetSubtypes_Req{}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_GetSubtypes_Req where
        nameOf _ = (Hs.fromString "Type_GetSubtypes_Req")
 
instance HsProtobuf.HasDefault Type_GetSubtypes_Req
 
instance HsProtobuf.Message Type_GetSubtypes_Req where
        encodeMessage _ Type_GetSubtypes_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Type_GetSubtypes_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Type_GetSubtypes_Req where
        toJSONPB (Type_GetSubtypes_Req) = (HsJSONPB.object [])
        toEncodingPB (Type_GetSubtypes_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Type_GetSubtypes_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Type_GetSubtypes_Req"
               (\ obj -> (Hs.pure Type_GetSubtypes_Req)))
 
instance HsJSONPB.ToJSON Type_GetSubtypes_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_GetSubtypes_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_GetSubtypes_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_GetSubtypes_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Type_GetSubtypes_ResPart = Type_GetSubtypes_ResPart{type_GetSubtypes_ResPartTypes
                                                            :: Hs.Vector Concept.Type}
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Type_GetSubtypes_ResPart where
        nameOf _ = (Hs.fromString "Type_GetSubtypes_ResPart")
 
instance HsProtobuf.HasDefault Type_GetSubtypes_ResPart
 
instance HsProtobuf.Message Type_GetSubtypes_ResPart where
        encodeMessage _
          Type_GetSubtypes_ResPart{type_GetSubtypes_ResPartTypes =
                                     type_GetSubtypes_ResPartTypes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Type)
                      @(HsProtobuf.NestedVec Concept.Type)
                      type_GetSubtypes_ResPartTypes))])
        decodeMessage _
          = (Hs.pure Type_GetSubtypes_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Type))
                 @(_ (Hs.Vector Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "types")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Type_GetSubtypes_ResPart where
        toJSONPB (Type_GetSubtypes_ResPart f1)
          = (HsJSONPB.object ["types" .= f1])
        toEncodingPB (Type_GetSubtypes_ResPart f1)
          = (HsJSONPB.pairs ["types" .= f1])
 
instance HsJSONPB.FromJSONPB Type_GetSubtypes_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "Type_GetSubtypes_ResPart"
               (\ obj -> (Hs.pure Type_GetSubtypes_ResPart) <*> obj .: "types"))
 
instance HsJSONPB.ToJSON Type_GetSubtypes_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Type_GetSubtypes_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Type_GetSubtypes_ResPart where
        declareNamedSchema _
          = do let declare_types = HsJSONPB.declareSchemaRef
               type_GetSubtypes_ResPartTypes <- declare_types Proxy.Proxy
               let _ = Hs.pure Type_GetSubtypes_ResPart <*>
                         HsJSONPB.asProxy declare_types
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Type_GetSubtypes_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("types", type_GetSubtypes_ResPartTypes)]}})
 
data RoleType = RoleType{}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RoleType where
        nameOf _ = (Hs.fromString "RoleType")
 
instance HsProtobuf.HasDefault RoleType
 
instance HsProtobuf.Message RoleType where
        encodeMessage _ RoleType{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RoleType)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RoleType where
        toJSONPB (RoleType) = (HsJSONPB.object [])
        toEncodingPB (RoleType) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RoleType where
        parseJSONPB
          = (HsJSONPB.withObject "RoleType" (\ obj -> (Hs.pure RoleType)))
 
instance HsJSONPB.ToJSON RoleType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RoleType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RoleType where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RoleType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data RoleType_GetRelationTypes = RoleType_GetRelationTypes{}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RoleType_GetRelationTypes where
        nameOf _ = (Hs.fromString "RoleType_GetRelationTypes")
 
instance HsProtobuf.HasDefault RoleType_GetRelationTypes
 
instance HsProtobuf.Message RoleType_GetRelationTypes where
        encodeMessage _ RoleType_GetRelationTypes{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RoleType_GetRelationTypes)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RoleType_GetRelationTypes where
        toJSONPB (RoleType_GetRelationTypes) = (HsJSONPB.object [])
        toEncodingPB (RoleType_GetRelationTypes) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RoleType_GetRelationTypes where
        parseJSONPB
          = (HsJSONPB.withObject "RoleType_GetRelationTypes"
               (\ obj -> (Hs.pure RoleType_GetRelationTypes)))
 
instance HsJSONPB.ToJSON RoleType_GetRelationTypes where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RoleType_GetRelationTypes where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RoleType_GetRelationTypes where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RoleType_GetRelationTypes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data RoleType_GetRelationTypes_Req = RoleType_GetRelationTypes_Req{}
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RoleType_GetRelationTypes_Req where
        nameOf _ = (Hs.fromString "RoleType_GetRelationTypes_Req")
 
instance HsProtobuf.HasDefault RoleType_GetRelationTypes_Req
 
instance HsProtobuf.Message RoleType_GetRelationTypes_Req where
        encodeMessage _ RoleType_GetRelationTypes_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RoleType_GetRelationTypes_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RoleType_GetRelationTypes_Req where
        toJSONPB (RoleType_GetRelationTypes_Req) = (HsJSONPB.object [])
        toEncodingPB (RoleType_GetRelationTypes_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RoleType_GetRelationTypes_Req where
        parseJSONPB
          = (HsJSONPB.withObject "RoleType_GetRelationTypes_Req"
               (\ obj -> (Hs.pure RoleType_GetRelationTypes_Req)))
 
instance HsJSONPB.ToJSON RoleType_GetRelationTypes_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RoleType_GetRelationTypes_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RoleType_GetRelationTypes_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RoleType_GetRelationTypes_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype RoleType_GetRelationTypes_ResPart = RoleType_GetRelationTypes_ResPart{roleType_GetRelationTypes_ResPartRelationTypes
                                                                              ::
                                                                              Hs.Vector
                                                                                Concept.Type}
                                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RoleType_GetRelationTypes_ResPart where
        nameOf _ = (Hs.fromString "RoleType_GetRelationTypes_ResPart")
 
instance HsProtobuf.HasDefault RoleType_GetRelationTypes_ResPart
 
instance HsProtobuf.Message RoleType_GetRelationTypes_ResPart where
        encodeMessage _
          RoleType_GetRelationTypes_ResPart{roleType_GetRelationTypes_ResPartRelationTypes
                                              = roleType_GetRelationTypes_ResPartRelationTypes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Type)
                      @(HsProtobuf.NestedVec Concept.Type)
                      roleType_GetRelationTypes_ResPartRelationTypes))])
        decodeMessage _
          = (Hs.pure RoleType_GetRelationTypes_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Type))
                 @(_ (Hs.Vector Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "relation_types")
                []
                "")]
 
instance HsJSONPB.ToJSONPB RoleType_GetRelationTypes_ResPart where
        toJSONPB (RoleType_GetRelationTypes_ResPart f1)
          = (HsJSONPB.object ["relation_types" .= f1])
        toEncodingPB (RoleType_GetRelationTypes_ResPart f1)
          = (HsJSONPB.pairs ["relation_types" .= f1])
 
instance HsJSONPB.FromJSONPB RoleType_GetRelationTypes_ResPart
         where
        parseJSONPB
          = (HsJSONPB.withObject "RoleType_GetRelationTypes_ResPart"
               (\ obj ->
                  (Hs.pure RoleType_GetRelationTypes_ResPart) <*>
                    obj .: "relation_types"))
 
instance HsJSONPB.ToJSON RoleType_GetRelationTypes_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RoleType_GetRelationTypes_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RoleType_GetRelationTypes_ResPart where
        declareNamedSchema _
          = do let declare_relation_types = HsJSONPB.declareSchemaRef
               roleType_GetRelationTypes_ResPartRelationTypes <- declare_relation_types
                                                                   Proxy.Proxy
               let _ = Hs.pure RoleType_GetRelationTypes_ResPart <*>
                         HsJSONPB.asProxy declare_relation_types
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RoleType_GetRelationTypes_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("relation_types",
                                                         roleType_GetRelationTypes_ResPartRelationTypes)]}})
 
data RoleType_GetPlayers = RoleType_GetPlayers{}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RoleType_GetPlayers where
        nameOf _ = (Hs.fromString "RoleType_GetPlayers")
 
instance HsProtobuf.HasDefault RoleType_GetPlayers
 
instance HsProtobuf.Message RoleType_GetPlayers where
        encodeMessage _ RoleType_GetPlayers{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RoleType_GetPlayers)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RoleType_GetPlayers where
        toJSONPB (RoleType_GetPlayers) = (HsJSONPB.object [])
        toEncodingPB (RoleType_GetPlayers) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RoleType_GetPlayers where
        parseJSONPB
          = (HsJSONPB.withObject "RoleType_GetPlayers"
               (\ obj -> (Hs.pure RoleType_GetPlayers)))
 
instance HsJSONPB.ToJSON RoleType_GetPlayers where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RoleType_GetPlayers where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RoleType_GetPlayers where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RoleType_GetPlayers",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data RoleType_GetPlayers_Req = RoleType_GetPlayers_Req{}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RoleType_GetPlayers_Req where
        nameOf _ = (Hs.fromString "RoleType_GetPlayers_Req")
 
instance HsProtobuf.HasDefault RoleType_GetPlayers_Req
 
instance HsProtobuf.Message RoleType_GetPlayers_Req where
        encodeMessage _ RoleType_GetPlayers_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RoleType_GetPlayers_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RoleType_GetPlayers_Req where
        toJSONPB (RoleType_GetPlayers_Req) = (HsJSONPB.object [])
        toEncodingPB (RoleType_GetPlayers_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RoleType_GetPlayers_Req where
        parseJSONPB
          = (HsJSONPB.withObject "RoleType_GetPlayers_Req"
               (\ obj -> (Hs.pure RoleType_GetPlayers_Req)))
 
instance HsJSONPB.ToJSON RoleType_GetPlayers_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RoleType_GetPlayers_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RoleType_GetPlayers_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RoleType_GetPlayers_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype RoleType_GetPlayers_ResPart = RoleType_GetPlayers_ResPart{roleType_GetPlayers_ResPartThingTypes
                                                                  :: Hs.Vector Concept.Type}
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RoleType_GetPlayers_ResPart where
        nameOf _ = (Hs.fromString "RoleType_GetPlayers_ResPart")
 
instance HsProtobuf.HasDefault RoleType_GetPlayers_ResPart
 
instance HsProtobuf.Message RoleType_GetPlayers_ResPart where
        encodeMessage _
          RoleType_GetPlayers_ResPart{roleType_GetPlayers_ResPartThingTypes =
                                        roleType_GetPlayers_ResPartThingTypes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Type)
                      @(HsProtobuf.NestedVec Concept.Type)
                      roleType_GetPlayers_ResPartThingTypes))])
        decodeMessage _
          = (Hs.pure RoleType_GetPlayers_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Type))
                 @(_ (Hs.Vector Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "thing_types")
                []
                "")]
 
instance HsJSONPB.ToJSONPB RoleType_GetPlayers_ResPart where
        toJSONPB (RoleType_GetPlayers_ResPart f1)
          = (HsJSONPB.object ["thing_types" .= f1])
        toEncodingPB (RoleType_GetPlayers_ResPart f1)
          = (HsJSONPB.pairs ["thing_types" .= f1])
 
instance HsJSONPB.FromJSONPB RoleType_GetPlayers_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "RoleType_GetPlayers_ResPart"
               (\ obj ->
                  (Hs.pure RoleType_GetPlayers_ResPart) <*> obj .: "thing_types"))
 
instance HsJSONPB.ToJSON RoleType_GetPlayers_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RoleType_GetPlayers_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RoleType_GetPlayers_ResPart where
        declareNamedSchema _
          = do let declare_thing_types = HsJSONPB.declareSchemaRef
               roleType_GetPlayers_ResPartThingTypes <- declare_thing_types
                                                          Proxy.Proxy
               let _ = Hs.pure RoleType_GetPlayers_ResPart <*>
                         HsJSONPB.asProxy declare_thing_types
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RoleType_GetPlayers_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("thing_types",
                                                         roleType_GetPlayers_ResPartThingTypes)]}})
 
data ThingType = ThingType{}
               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType where
        nameOf _ = (Hs.fromString "ThingType")
 
instance HsProtobuf.HasDefault ThingType
 
instance HsProtobuf.Message ThingType where
        encodeMessage _ ThingType{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType where
        toJSONPB (ThingType) = (HsJSONPB.object [])
        toEncodingPB (ThingType) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType" (\ obj -> (Hs.pure ThingType)))
 
instance HsJSONPB.ToJSON ThingType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_SetAbstract = ThingType_SetAbstract{}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_SetAbstract where
        nameOf _ = (Hs.fromString "ThingType_SetAbstract")
 
instance HsProtobuf.HasDefault ThingType_SetAbstract
 
instance HsProtobuf.Message ThingType_SetAbstract where
        encodeMessage _ ThingType_SetAbstract{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_SetAbstract)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_SetAbstract where
        toJSONPB (ThingType_SetAbstract) = (HsJSONPB.object [])
        toEncodingPB (ThingType_SetAbstract) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_SetAbstract where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_SetAbstract"
               (\ obj -> (Hs.pure ThingType_SetAbstract)))
 
instance HsJSONPB.ToJSON ThingType_SetAbstract where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_SetAbstract where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_SetAbstract where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_SetAbstract",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_SetAbstract_Req = ThingType_SetAbstract_Req{}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_SetAbstract_Req where
        nameOf _ = (Hs.fromString "ThingType_SetAbstract_Req")
 
instance HsProtobuf.HasDefault ThingType_SetAbstract_Req
 
instance HsProtobuf.Message ThingType_SetAbstract_Req where
        encodeMessage _ ThingType_SetAbstract_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_SetAbstract_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_SetAbstract_Req where
        toJSONPB (ThingType_SetAbstract_Req) = (HsJSONPB.object [])
        toEncodingPB (ThingType_SetAbstract_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_SetAbstract_Req where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_SetAbstract_Req"
               (\ obj -> (Hs.pure ThingType_SetAbstract_Req)))
 
instance HsJSONPB.ToJSON ThingType_SetAbstract_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_SetAbstract_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_SetAbstract_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_SetAbstract_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_SetAbstract_Res = ThingType_SetAbstract_Res{}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_SetAbstract_Res where
        nameOf _ = (Hs.fromString "ThingType_SetAbstract_Res")
 
instance HsProtobuf.HasDefault ThingType_SetAbstract_Res
 
instance HsProtobuf.Message ThingType_SetAbstract_Res where
        encodeMessage _ ThingType_SetAbstract_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_SetAbstract_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_SetAbstract_Res where
        toJSONPB (ThingType_SetAbstract_Res) = (HsJSONPB.object [])
        toEncodingPB (ThingType_SetAbstract_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_SetAbstract_Res where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_SetAbstract_Res"
               (\ obj -> (Hs.pure ThingType_SetAbstract_Res)))
 
instance HsJSONPB.ToJSON ThingType_SetAbstract_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_SetAbstract_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_SetAbstract_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_SetAbstract_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_UnsetAbstract = ThingType_UnsetAbstract{}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_UnsetAbstract where
        nameOf _ = (Hs.fromString "ThingType_UnsetAbstract")
 
instance HsProtobuf.HasDefault ThingType_UnsetAbstract
 
instance HsProtobuf.Message ThingType_UnsetAbstract where
        encodeMessage _ ThingType_UnsetAbstract{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_UnsetAbstract)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_UnsetAbstract where
        toJSONPB (ThingType_UnsetAbstract) = (HsJSONPB.object [])
        toEncodingPB (ThingType_UnsetAbstract) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_UnsetAbstract where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_UnsetAbstract"
               (\ obj -> (Hs.pure ThingType_UnsetAbstract)))
 
instance HsJSONPB.ToJSON ThingType_UnsetAbstract where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_UnsetAbstract where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_UnsetAbstract where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_UnsetAbstract",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_UnsetAbstract_Req = ThingType_UnsetAbstract_Req{}
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_UnsetAbstract_Req where
        nameOf _ = (Hs.fromString "ThingType_UnsetAbstract_Req")
 
instance HsProtobuf.HasDefault ThingType_UnsetAbstract_Req
 
instance HsProtobuf.Message ThingType_UnsetAbstract_Req where
        encodeMessage _ ThingType_UnsetAbstract_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_UnsetAbstract_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_UnsetAbstract_Req where
        toJSONPB (ThingType_UnsetAbstract_Req) = (HsJSONPB.object [])
        toEncodingPB (ThingType_UnsetAbstract_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_UnsetAbstract_Req where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_UnsetAbstract_Req"
               (\ obj -> (Hs.pure ThingType_UnsetAbstract_Req)))
 
instance HsJSONPB.ToJSON ThingType_UnsetAbstract_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_UnsetAbstract_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_UnsetAbstract_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_UnsetAbstract_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_UnsetAbstract_Res = ThingType_UnsetAbstract_Res{}
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_UnsetAbstract_Res where
        nameOf _ = (Hs.fromString "ThingType_UnsetAbstract_Res")
 
instance HsProtobuf.HasDefault ThingType_UnsetAbstract_Res
 
instance HsProtobuf.Message ThingType_UnsetAbstract_Res where
        encodeMessage _ ThingType_UnsetAbstract_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_UnsetAbstract_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_UnsetAbstract_Res where
        toJSONPB (ThingType_UnsetAbstract_Res) = (HsJSONPB.object [])
        toEncodingPB (ThingType_UnsetAbstract_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_UnsetAbstract_Res where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_UnsetAbstract_Res"
               (\ obj -> (Hs.pure ThingType_UnsetAbstract_Res)))
 
instance HsJSONPB.ToJSON ThingType_UnsetAbstract_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_UnsetAbstract_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_UnsetAbstract_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_UnsetAbstract_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_GetInstances = ThingType_GetInstances{}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_GetInstances where
        nameOf _ = (Hs.fromString "ThingType_GetInstances")
 
instance HsProtobuf.HasDefault ThingType_GetInstances
 
instance HsProtobuf.Message ThingType_GetInstances where
        encodeMessage _ ThingType_GetInstances{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_GetInstances)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_GetInstances where
        toJSONPB (ThingType_GetInstances) = (HsJSONPB.object [])
        toEncodingPB (ThingType_GetInstances) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_GetInstances where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_GetInstances"
               (\ obj -> (Hs.pure ThingType_GetInstances)))
 
instance HsJSONPB.ToJSON ThingType_GetInstances where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_GetInstances where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_GetInstances where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_GetInstances",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_GetInstances_Req = ThingType_GetInstances_Req{}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_GetInstances_Req where
        nameOf _ = (Hs.fromString "ThingType_GetInstances_Req")
 
instance HsProtobuf.HasDefault ThingType_GetInstances_Req
 
instance HsProtobuf.Message ThingType_GetInstances_Req where
        encodeMessage _ ThingType_GetInstances_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_GetInstances_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_GetInstances_Req where
        toJSONPB (ThingType_GetInstances_Req) = (HsJSONPB.object [])
        toEncodingPB (ThingType_GetInstances_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_GetInstances_Req where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_GetInstances_Req"
               (\ obj -> (Hs.pure ThingType_GetInstances_Req)))
 
instance HsJSONPB.ToJSON ThingType_GetInstances_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_GetInstances_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_GetInstances_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_GetInstances_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype ThingType_GetInstances_ResPart = ThingType_GetInstances_ResPart{thingType_GetInstances_ResPartThings
                                                                        :: Hs.Vector Concept.Thing}
                                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_GetInstances_ResPart where
        nameOf _ = (Hs.fromString "ThingType_GetInstances_ResPart")
 
instance HsProtobuf.HasDefault ThingType_GetInstances_ResPart
 
instance HsProtobuf.Message ThingType_GetInstances_ResPart where
        encodeMessage _
          ThingType_GetInstances_ResPart{thingType_GetInstances_ResPartThings
                                           = thingType_GetInstances_ResPartThings}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Thing)
                      @(HsProtobuf.NestedVec Concept.Thing)
                      thingType_GetInstances_ResPartThings))])
        decodeMessage _
          = (Hs.pure ThingType_GetInstances_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Thing))
                 @(_ (Hs.Vector Concept.Thing))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Thing")))
                (HsProtobuf.Single "things")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ThingType_GetInstances_ResPart where
        toJSONPB (ThingType_GetInstances_ResPart f1)
          = (HsJSONPB.object ["things" .= f1])
        toEncodingPB (ThingType_GetInstances_ResPart f1)
          = (HsJSONPB.pairs ["things" .= f1])
 
instance HsJSONPB.FromJSONPB ThingType_GetInstances_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_GetInstances_ResPart"
               (\ obj ->
                  (Hs.pure ThingType_GetInstances_ResPart) <*> obj .: "things"))
 
instance HsJSONPB.ToJSON ThingType_GetInstances_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_GetInstances_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_GetInstances_ResPart where
        declareNamedSchema _
          = do let declare_things = HsJSONPB.declareSchemaRef
               thingType_GetInstances_ResPartThings <- declare_things Proxy.Proxy
               let _ = Hs.pure ThingType_GetInstances_ResPart <*>
                         HsJSONPB.asProxy declare_things
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_GetInstances_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("things",
                                                         thingType_GetInstances_ResPartThings)]}})
 
data ThingType_GetOwns = ThingType_GetOwns{}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_GetOwns where
        nameOf _ = (Hs.fromString "ThingType_GetOwns")
 
instance HsProtobuf.HasDefault ThingType_GetOwns
 
instance HsProtobuf.Message ThingType_GetOwns where
        encodeMessage _ ThingType_GetOwns{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_GetOwns)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_GetOwns where
        toJSONPB (ThingType_GetOwns) = (HsJSONPB.object [])
        toEncodingPB (ThingType_GetOwns) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_GetOwns where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_GetOwns"
               (\ obj -> (Hs.pure ThingType_GetOwns)))
 
instance HsJSONPB.ToJSON ThingType_GetOwns where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_GetOwns where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_GetOwns where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_GetOwns",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_GetOwns_Req = ThingType_GetOwns_Req{thingType_GetOwns_ReqFilter
                                                   :: Hs.Maybe ThingType_GetOwns_ReqFilter,
                                                   thingType_GetOwns_ReqKeysOnly :: Hs.Bool}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_GetOwns_Req where
        nameOf _ = (Hs.fromString "ThingType_GetOwns_Req")
 
instance HsProtobuf.HasDefault ThingType_GetOwns_Req
 
instance HsProtobuf.Message ThingType_GetOwns_Req where
        encodeMessage _
          ThingType_GetOwns_Req{thingType_GetOwns_ReqFilter =
                                  thingType_GetOwns_ReqFilter,
                                thingType_GetOwns_ReqKeysOnly = thingType_GetOwns_ReqKeysOnly}
          = (Hs.mconcat
               [case thingType_GetOwns_ReqFilter of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ThingType_GetOwns_ReqFilterValueType y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (HsProtobuf.ForceEmit y)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   thingType_GetOwns_ReqKeysOnly)])
        decodeMessage _
          = (Hs.pure ThingType_GetOwns_Req) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.Just Hs.. ThingType_GetOwns_ReqFilterValueType)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "keys_only")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ThingType_GetOwns_Req where
        toJSONPB (ThingType_GetOwns_Req f1 f3)
          = (HsJSONPB.object
               [(let encodeFilter
                       = (case f1 of
                              Hs.Just (ThingType_GetOwns_ReqFilterValueType f1)
                                -> (HsJSONPB.pair "value_type" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("filter" .= (HsJSONPB.objectOrNull [encodeFilter] options))
                         options
                       else encodeFilter options),
                "keys_only" .= f3])
        toEncodingPB (ThingType_GetOwns_Req f1 f3)
          = (HsJSONPB.pairs
               [(let encodeFilter
                       = (case f1 of
                              Hs.Just (ThingType_GetOwns_ReqFilterValueType f1)
                                -> (HsJSONPB.pair "value_type" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("filter" .= (HsJSONPB.pairsOrNull [encodeFilter] options)) options
                       else encodeFilter options),
                "keys_only" .= f3])
 
instance HsJSONPB.FromJSONPB ThingType_GetOwns_Req where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_GetOwns_Req"
               (\ obj ->
                  (Hs.pure ThingType_GetOwns_Req) <*>
                    (let parseFilter parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ThingType_GetOwns_ReqFilterValueType <$>
                                  (HsJSONPB.parseField parseObj "value_type"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "filter") Hs.>>=
                          (HsJSONPB.withObject "filter" parseFilter))
                         <|> (parseFilter obj))
                    <*> obj .: "keys_only"))
 
instance HsJSONPB.ToJSON ThingType_GetOwns_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_GetOwns_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_GetOwns_Req where
        declareNamedSchema _
          = do let declare_filter = HsJSONPB.declareSchemaRef
               thingType_GetOwns_ReqFilter <- declare_filter Proxy.Proxy
               let declare_keys_only = HsJSONPB.declareSchemaRef
               thingType_GetOwns_ReqKeysOnly <- declare_keys_only Proxy.Proxy
               let _ = Hs.pure ThingType_GetOwns_Req <*>
                         HsJSONPB.asProxy declare_filter
                         <*> HsJSONPB.asProxy declare_keys_only
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_GetOwns_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("filter", thingType_GetOwns_ReqFilter),
                                                        ("keys_only",
                                                         thingType_GetOwns_ReqKeysOnly)]}})
 
data ThingType_GetOwns_ReqFilter = ThingType_GetOwns_ReqFilterValueType (HsProtobuf.Enumerated
                                                                           Concept.AttributeType_ValueType)
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_GetOwns_ReqFilter where
        nameOf _ = (Hs.fromString "ThingType_GetOwns_ReqFilter")
 
instance HsJSONPB.ToSchema ThingType_GetOwns_ReqFilter where
        declareNamedSchema _
          = do let declare_value_type = HsJSONPB.declareSchemaRef
               thingType_GetOwns_ReqFilterValueType <- declare_value_type
                                                         Proxy.Proxy
               let _ = Hs.pure ThingType_GetOwns_ReqFilterValueType <*>
                         HsJSONPB.asProxy declare_value_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_GetOwns_ReqFilter",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value_type",
                                                         thingType_GetOwns_ReqFilterValueType)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype ThingType_GetOwns_ResPart = ThingType_GetOwns_ResPart{thingType_GetOwns_ResPartAttributeTypes
                                                              :: Hs.Vector Concept.Type}
                                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_GetOwns_ResPart where
        nameOf _ = (Hs.fromString "ThingType_GetOwns_ResPart")
 
instance HsProtobuf.HasDefault ThingType_GetOwns_ResPart
 
instance HsProtobuf.Message ThingType_GetOwns_ResPart where
        encodeMessage _
          ThingType_GetOwns_ResPart{thingType_GetOwns_ResPartAttributeTypes =
                                      thingType_GetOwns_ResPartAttributeTypes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Type)
                      @(HsProtobuf.NestedVec Concept.Type)
                      thingType_GetOwns_ResPartAttributeTypes))])
        decodeMessage _
          = (Hs.pure ThingType_GetOwns_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Type))
                 @(_ (Hs.Vector Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "attribute_types")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ThingType_GetOwns_ResPart where
        toJSONPB (ThingType_GetOwns_ResPart f1)
          = (HsJSONPB.object ["attribute_types" .= f1])
        toEncodingPB (ThingType_GetOwns_ResPart f1)
          = (HsJSONPB.pairs ["attribute_types" .= f1])
 
instance HsJSONPB.FromJSONPB ThingType_GetOwns_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_GetOwns_ResPart"
               (\ obj ->
                  (Hs.pure ThingType_GetOwns_ResPart) <*> obj .: "attribute_types"))
 
instance HsJSONPB.ToJSON ThingType_GetOwns_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_GetOwns_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_GetOwns_ResPart where
        declareNamedSchema _
          = do let declare_attribute_types = HsJSONPB.declareSchemaRef
               thingType_GetOwns_ResPartAttributeTypes <- declare_attribute_types
                                                            Proxy.Proxy
               let _ = Hs.pure ThingType_GetOwns_ResPart <*>
                         HsJSONPB.asProxy declare_attribute_types
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_GetOwns_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("attribute_types",
                                                         thingType_GetOwns_ResPartAttributeTypes)]}})
 
data ThingType_GetPlays = ThingType_GetPlays{}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_GetPlays where
        nameOf _ = (Hs.fromString "ThingType_GetPlays")
 
instance HsProtobuf.HasDefault ThingType_GetPlays
 
instance HsProtobuf.Message ThingType_GetPlays where
        encodeMessage _ ThingType_GetPlays{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_GetPlays)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_GetPlays where
        toJSONPB (ThingType_GetPlays) = (HsJSONPB.object [])
        toEncodingPB (ThingType_GetPlays) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_GetPlays where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_GetPlays"
               (\ obj -> (Hs.pure ThingType_GetPlays)))
 
instance HsJSONPB.ToJSON ThingType_GetPlays where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_GetPlays where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_GetPlays where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_GetPlays",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_GetPlays_Req = ThingType_GetPlays_Req{}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_GetPlays_Req where
        nameOf _ = (Hs.fromString "ThingType_GetPlays_Req")
 
instance HsProtobuf.HasDefault ThingType_GetPlays_Req
 
instance HsProtobuf.Message ThingType_GetPlays_Req where
        encodeMessage _ ThingType_GetPlays_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_GetPlays_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_GetPlays_Req where
        toJSONPB (ThingType_GetPlays_Req) = (HsJSONPB.object [])
        toEncodingPB (ThingType_GetPlays_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_GetPlays_Req where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_GetPlays_Req"
               (\ obj -> (Hs.pure ThingType_GetPlays_Req)))
 
instance HsJSONPB.ToJSON ThingType_GetPlays_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_GetPlays_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_GetPlays_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_GetPlays_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype ThingType_GetPlays_ResPart = ThingType_GetPlays_ResPart{thingType_GetPlays_ResPartRoles
                                                                :: Hs.Vector Concept.Type}
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_GetPlays_ResPart where
        nameOf _ = (Hs.fromString "ThingType_GetPlays_ResPart")
 
instance HsProtobuf.HasDefault ThingType_GetPlays_ResPart
 
instance HsProtobuf.Message ThingType_GetPlays_ResPart where
        encodeMessage _
          ThingType_GetPlays_ResPart{thingType_GetPlays_ResPartRoles =
                                       thingType_GetPlays_ResPartRoles}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Type)
                      @(HsProtobuf.NestedVec Concept.Type)
                      thingType_GetPlays_ResPartRoles))])
        decodeMessage _
          = (Hs.pure ThingType_GetPlays_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Type))
                 @(_ (Hs.Vector Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "roles")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ThingType_GetPlays_ResPart where
        toJSONPB (ThingType_GetPlays_ResPart f1)
          = (HsJSONPB.object ["roles" .= f1])
        toEncodingPB (ThingType_GetPlays_ResPart f1)
          = (HsJSONPB.pairs ["roles" .= f1])
 
instance HsJSONPB.FromJSONPB ThingType_GetPlays_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_GetPlays_ResPart"
               (\ obj -> (Hs.pure ThingType_GetPlays_ResPart) <*> obj .: "roles"))
 
instance HsJSONPB.ToJSON ThingType_GetPlays_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_GetPlays_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_GetPlays_ResPart where
        declareNamedSchema _
          = do let declare_roles = HsJSONPB.declareSchemaRef
               thingType_GetPlays_ResPartRoles <- declare_roles Proxy.Proxy
               let _ = Hs.pure ThingType_GetPlays_ResPart <*>
                         HsJSONPB.asProxy declare_roles
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_GetPlays_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("roles",
                                                         thingType_GetPlays_ResPartRoles)]}})
 
data ThingType_SetOwns = ThingType_SetOwns{}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_SetOwns where
        nameOf _ = (Hs.fromString "ThingType_SetOwns")
 
instance HsProtobuf.HasDefault ThingType_SetOwns
 
instance HsProtobuf.Message ThingType_SetOwns where
        encodeMessage _ ThingType_SetOwns{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_SetOwns)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_SetOwns where
        toJSONPB (ThingType_SetOwns) = (HsJSONPB.object [])
        toEncodingPB (ThingType_SetOwns) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_SetOwns where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_SetOwns"
               (\ obj -> (Hs.pure ThingType_SetOwns)))
 
instance HsJSONPB.ToJSON ThingType_SetOwns where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_SetOwns where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_SetOwns where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_SetOwns",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_SetOwns_Req = ThingType_SetOwns_Req{thingType_SetOwns_ReqAttributeType
                                                   :: Hs.Maybe Concept.Type,
                                                   thingType_SetOwns_ReqOverridden ::
                                                   Hs.Maybe ThingType_SetOwns_ReqOverridden,
                                                   thingType_SetOwns_ReqIsKey :: Hs.Bool}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_SetOwns_Req where
        nameOf _ = (Hs.fromString "ThingType_SetOwns_Req")
 
instance HsProtobuf.HasDefault ThingType_SetOwns_Req
 
instance HsProtobuf.Message ThingType_SetOwns_Req where
        encodeMessage _
          ThingType_SetOwns_Req{thingType_SetOwns_ReqAttributeType =
                                  thingType_SetOwns_ReqAttributeType,
                                thingType_SetOwns_ReqOverridden = thingType_SetOwns_ReqOverridden,
                                thingType_SetOwns_ReqIsKey = thingType_SetOwns_ReqIsKey}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Type)
                      @(HsProtobuf.Nested Concept.Type)
                      thingType_SetOwns_ReqAttributeType)),
                case thingType_SetOwns_ReqOverridden of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ThingType_SetOwns_ReqOverriddenOverriddenType y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Concept.Type)
                                        @(HsProtobuf.Nested Concept.Type)
                                        (Hs.Just y))),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   thingType_SetOwns_ReqIsKey)])
        decodeMessage _
          = (Hs.pure ThingType_SetOwns_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                 @(_ (Hs.Maybe Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap ThingType_SetOwns_ReqOverriddenOverriddenType))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                        @(_ (Hs.Maybe Concept.Type))
                        HsProtobuf.decodeMessageField))])
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "attribute_type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "is_key")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ThingType_SetOwns_Req where
        toJSONPB (ThingType_SetOwns_Req f1 f2 f3)
          = (HsJSONPB.object
               ["attribute_type" .= f1,
                (let encodeOverridden
                       = (case f2 of
                              Hs.Just (ThingType_SetOwns_ReqOverriddenOverriddenType f2)
                                -> (HsJSONPB.pair "overridden_type" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("overridden" .=
                          (HsJSONPB.objectOrNull [encodeOverridden] options))
                         options
                       else encodeOverridden options),
                "is_key" .= f3])
        toEncodingPB (ThingType_SetOwns_Req f1 f2 f3)
          = (HsJSONPB.pairs
               ["attribute_type" .= f1,
                (let encodeOverridden
                       = (case f2 of
                              Hs.Just (ThingType_SetOwns_ReqOverriddenOverriddenType f2)
                                -> (HsJSONPB.pair "overridden_type" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("overridden" .= (HsJSONPB.pairsOrNull [encodeOverridden] options))
                         options
                       else encodeOverridden options),
                "is_key" .= f3])
 
instance HsJSONPB.FromJSONPB ThingType_SetOwns_Req where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_SetOwns_Req"
               (\ obj ->
                  (Hs.pure ThingType_SetOwns_Req) <*> obj .: "attribute_type" <*>
                    (let parseOverridden parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ThingType_SetOwns_ReqOverriddenOverriddenType <$>
                                  (HsJSONPB.parseField parseObj "overridden_type"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "overridden") Hs.>>=
                          (HsJSONPB.withObject "overridden" parseOverridden))
                         <|> (parseOverridden obj))
                    <*> obj .: "is_key"))
 
instance HsJSONPB.ToJSON ThingType_SetOwns_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_SetOwns_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_SetOwns_Req where
        declareNamedSchema _
          = do let declare_attribute_type = HsJSONPB.declareSchemaRef
               thingType_SetOwns_ReqAttributeType <- declare_attribute_type
                                                       Proxy.Proxy
               let declare_overridden = HsJSONPB.declareSchemaRef
               thingType_SetOwns_ReqOverridden <- declare_overridden Proxy.Proxy
               let declare_is_key = HsJSONPB.declareSchemaRef
               thingType_SetOwns_ReqIsKey <- declare_is_key Proxy.Proxy
               let _ = Hs.pure ThingType_SetOwns_Req <*>
                         HsJSONPB.asProxy declare_attribute_type
                         <*> HsJSONPB.asProxy declare_overridden
                         <*> HsJSONPB.asProxy declare_is_key
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_SetOwns_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("attribute_type",
                                                         thingType_SetOwns_ReqAttributeType),
                                                        ("overridden",
                                                         thingType_SetOwns_ReqOverridden),
                                                        ("is_key", thingType_SetOwns_ReqIsKey)]}})
 
data ThingType_SetOwns_ReqOverridden = ThingType_SetOwns_ReqOverriddenOverriddenType Concept.Type
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_SetOwns_ReqOverridden where
        nameOf _ = (Hs.fromString "ThingType_SetOwns_ReqOverridden")
 
instance HsJSONPB.ToSchema ThingType_SetOwns_ReqOverridden where
        declareNamedSchema _
          = do let declare_overridden_type = HsJSONPB.declareSchemaRef
               thingType_SetOwns_ReqOverriddenOverriddenType <- declare_overridden_type
                                                                  Proxy.Proxy
               let _ = Hs.pure ThingType_SetOwns_ReqOverriddenOverriddenType <*>
                         HsJSONPB.asProxy declare_overridden_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_SetOwns_ReqOverridden",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("overridden_type",
                                                         thingType_SetOwns_ReqOverriddenOverriddenType)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data ThingType_SetOwns_Res = ThingType_SetOwns_Res{}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_SetOwns_Res where
        nameOf _ = (Hs.fromString "ThingType_SetOwns_Res")
 
instance HsProtobuf.HasDefault ThingType_SetOwns_Res
 
instance HsProtobuf.Message ThingType_SetOwns_Res where
        encodeMessage _ ThingType_SetOwns_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_SetOwns_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_SetOwns_Res where
        toJSONPB (ThingType_SetOwns_Res) = (HsJSONPB.object [])
        toEncodingPB (ThingType_SetOwns_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_SetOwns_Res where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_SetOwns_Res"
               (\ obj -> (Hs.pure ThingType_SetOwns_Res)))
 
instance HsJSONPB.ToJSON ThingType_SetOwns_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_SetOwns_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_SetOwns_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_SetOwns_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_SetPlays = ThingType_SetPlays{}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_SetPlays where
        nameOf _ = (Hs.fromString "ThingType_SetPlays")
 
instance HsProtobuf.HasDefault ThingType_SetPlays
 
instance HsProtobuf.Message ThingType_SetPlays where
        encodeMessage _ ThingType_SetPlays{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_SetPlays)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_SetPlays where
        toJSONPB (ThingType_SetPlays) = (HsJSONPB.object [])
        toEncodingPB (ThingType_SetPlays) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_SetPlays where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_SetPlays"
               (\ obj -> (Hs.pure ThingType_SetPlays)))
 
instance HsJSONPB.ToJSON ThingType_SetPlays where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_SetPlays where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_SetPlays where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_SetPlays",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_SetPlays_Req = ThingType_SetPlays_Req{thingType_SetPlays_ReqRole
                                                     :: Hs.Maybe Concept.Type,
                                                     thingType_SetPlays_ReqOverridden ::
                                                     Hs.Maybe ThingType_SetPlays_ReqOverridden}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_SetPlays_Req where
        nameOf _ = (Hs.fromString "ThingType_SetPlays_Req")
 
instance HsProtobuf.HasDefault ThingType_SetPlays_Req
 
instance HsProtobuf.Message ThingType_SetPlays_Req where
        encodeMessage _
          ThingType_SetPlays_Req{thingType_SetPlays_ReqRole =
                                   thingType_SetPlays_ReqRole,
                                 thingType_SetPlays_ReqOverridden =
                                   thingType_SetPlays_ReqOverridden}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Type)
                      @(HsProtobuf.Nested Concept.Type)
                      thingType_SetPlays_ReqRole)),
                case thingType_SetPlays_ReqOverridden of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ThingType_SetPlays_ReqOverriddenOverriddenRole y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Concept.Type)
                                        @(HsProtobuf.Nested Concept.Type)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure ThingType_SetPlays_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                 @(_ (Hs.Maybe Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap ThingType_SetPlays_ReqOverriddenOverriddenRole))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                        @(_ (Hs.Maybe Concept.Type))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "role")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ThingType_SetPlays_Req where
        toJSONPB (ThingType_SetPlays_Req f1 f2)
          = (HsJSONPB.object
               ["role" .= f1,
                (let encodeOverridden
                       = (case f2 of
                              Hs.Just (ThingType_SetPlays_ReqOverriddenOverriddenRole f2)
                                -> (HsJSONPB.pair "overridden_role" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("overridden" .=
                          (HsJSONPB.objectOrNull [encodeOverridden] options))
                         options
                       else encodeOverridden options)])
        toEncodingPB (ThingType_SetPlays_Req f1 f2)
          = (HsJSONPB.pairs
               ["role" .= f1,
                (let encodeOverridden
                       = (case f2 of
                              Hs.Just (ThingType_SetPlays_ReqOverriddenOverriddenRole f2)
                                -> (HsJSONPB.pair "overridden_role" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("overridden" .= (HsJSONPB.pairsOrNull [encodeOverridden] options))
                         options
                       else encodeOverridden options)])
 
instance HsJSONPB.FromJSONPB ThingType_SetPlays_Req where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_SetPlays_Req"
               (\ obj ->
                  (Hs.pure ThingType_SetPlays_Req) <*> obj .: "role" <*>
                    (let parseOverridden parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ThingType_SetPlays_ReqOverriddenOverriddenRole <$>
                                  (HsJSONPB.parseField parseObj "overridden_role"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "overridden") Hs.>>=
                          (HsJSONPB.withObject "overridden" parseOverridden))
                         <|> (parseOverridden obj))))
 
instance HsJSONPB.ToJSON ThingType_SetPlays_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_SetPlays_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_SetPlays_Req where
        declareNamedSchema _
          = do let declare_role = HsJSONPB.declareSchemaRef
               thingType_SetPlays_ReqRole <- declare_role Proxy.Proxy
               let declare_overridden = HsJSONPB.declareSchemaRef
               thingType_SetPlays_ReqOverridden <- declare_overridden Proxy.Proxy
               let _ = Hs.pure ThingType_SetPlays_Req <*>
                         HsJSONPB.asProxy declare_role
                         <*> HsJSONPB.asProxy declare_overridden
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_SetPlays_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("role", thingType_SetPlays_ReqRole),
                                                        ("overridden",
                                                         thingType_SetPlays_ReqOverridden)]}})
 
data ThingType_SetPlays_ReqOverridden = ThingType_SetPlays_ReqOverriddenOverriddenRole Concept.Type
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_SetPlays_ReqOverridden where
        nameOf _ = (Hs.fromString "ThingType_SetPlays_ReqOverridden")
 
instance HsJSONPB.ToSchema ThingType_SetPlays_ReqOverridden where
        declareNamedSchema _
          = do let declare_overridden_role = HsJSONPB.declareSchemaRef
               thingType_SetPlays_ReqOverriddenOverriddenRole <- declare_overridden_role
                                                                   Proxy.Proxy
               let _ = Hs.pure ThingType_SetPlays_ReqOverriddenOverriddenRole <*>
                         HsJSONPB.asProxy declare_overridden_role
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_SetPlays_ReqOverridden",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("overridden_role",
                                                         thingType_SetPlays_ReqOverriddenOverriddenRole)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data ThingType_SetPlays_Res = ThingType_SetPlays_Res{}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_SetPlays_Res where
        nameOf _ = (Hs.fromString "ThingType_SetPlays_Res")
 
instance HsProtobuf.HasDefault ThingType_SetPlays_Res
 
instance HsProtobuf.Message ThingType_SetPlays_Res where
        encodeMessage _ ThingType_SetPlays_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_SetPlays_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_SetPlays_Res where
        toJSONPB (ThingType_SetPlays_Res) = (HsJSONPB.object [])
        toEncodingPB (ThingType_SetPlays_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_SetPlays_Res where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_SetPlays_Res"
               (\ obj -> (Hs.pure ThingType_SetPlays_Res)))
 
instance HsJSONPB.ToJSON ThingType_SetPlays_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_SetPlays_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_SetPlays_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_SetPlays_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_UnsetOwns = ThingType_UnsetOwns{}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_UnsetOwns where
        nameOf _ = (Hs.fromString "ThingType_UnsetOwns")
 
instance HsProtobuf.HasDefault ThingType_UnsetOwns
 
instance HsProtobuf.Message ThingType_UnsetOwns where
        encodeMessage _ ThingType_UnsetOwns{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_UnsetOwns)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_UnsetOwns where
        toJSONPB (ThingType_UnsetOwns) = (HsJSONPB.object [])
        toEncodingPB (ThingType_UnsetOwns) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_UnsetOwns where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_UnsetOwns"
               (\ obj -> (Hs.pure ThingType_UnsetOwns)))
 
instance HsJSONPB.ToJSON ThingType_UnsetOwns where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_UnsetOwns where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_UnsetOwns where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_UnsetOwns",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype ThingType_UnsetOwns_Req = ThingType_UnsetOwns_Req{thingType_UnsetOwns_ReqAttributeType
                                                          :: Hs.Maybe Concept.Type}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_UnsetOwns_Req where
        nameOf _ = (Hs.fromString "ThingType_UnsetOwns_Req")
 
instance HsProtobuf.HasDefault ThingType_UnsetOwns_Req
 
instance HsProtobuf.Message ThingType_UnsetOwns_Req where
        encodeMessage _
          ThingType_UnsetOwns_Req{thingType_UnsetOwns_ReqAttributeType =
                                    thingType_UnsetOwns_ReqAttributeType}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Type)
                      @(HsProtobuf.Nested Concept.Type)
                      thingType_UnsetOwns_ReqAttributeType))])
        decodeMessage _
          = (Hs.pure ThingType_UnsetOwns_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                 @(_ (Hs.Maybe Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "attribute_type")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ThingType_UnsetOwns_Req where
        toJSONPB (ThingType_UnsetOwns_Req f1)
          = (HsJSONPB.object ["attribute_type" .= f1])
        toEncodingPB (ThingType_UnsetOwns_Req f1)
          = (HsJSONPB.pairs ["attribute_type" .= f1])
 
instance HsJSONPB.FromJSONPB ThingType_UnsetOwns_Req where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_UnsetOwns_Req"
               (\ obj ->
                  (Hs.pure ThingType_UnsetOwns_Req) <*> obj .: "attribute_type"))
 
instance HsJSONPB.ToJSON ThingType_UnsetOwns_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_UnsetOwns_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_UnsetOwns_Req where
        declareNamedSchema _
          = do let declare_attribute_type = HsJSONPB.declareSchemaRef
               thingType_UnsetOwns_ReqAttributeType <- declare_attribute_type
                                                         Proxy.Proxy
               let _ = Hs.pure ThingType_UnsetOwns_Req <*>
                         HsJSONPB.asProxy declare_attribute_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_UnsetOwns_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("attribute_type",
                                                         thingType_UnsetOwns_ReqAttributeType)]}})
 
data ThingType_UnsetOwns_Res = ThingType_UnsetOwns_Res{}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_UnsetOwns_Res where
        nameOf _ = (Hs.fromString "ThingType_UnsetOwns_Res")
 
instance HsProtobuf.HasDefault ThingType_UnsetOwns_Res
 
instance HsProtobuf.Message ThingType_UnsetOwns_Res where
        encodeMessage _ ThingType_UnsetOwns_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_UnsetOwns_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_UnsetOwns_Res where
        toJSONPB (ThingType_UnsetOwns_Res) = (HsJSONPB.object [])
        toEncodingPB (ThingType_UnsetOwns_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_UnsetOwns_Res where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_UnsetOwns_Res"
               (\ obj -> (Hs.pure ThingType_UnsetOwns_Res)))
 
instance HsJSONPB.ToJSON ThingType_UnsetOwns_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_UnsetOwns_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_UnsetOwns_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_UnsetOwns_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data ThingType_UnsetPlays = ThingType_UnsetPlays{}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_UnsetPlays where
        nameOf _ = (Hs.fromString "ThingType_UnsetPlays")
 
instance HsProtobuf.HasDefault ThingType_UnsetPlays
 
instance HsProtobuf.Message ThingType_UnsetPlays where
        encodeMessage _ ThingType_UnsetPlays{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_UnsetPlays)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_UnsetPlays where
        toJSONPB (ThingType_UnsetPlays) = (HsJSONPB.object [])
        toEncodingPB (ThingType_UnsetPlays) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_UnsetPlays where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_UnsetPlays"
               (\ obj -> (Hs.pure ThingType_UnsetPlays)))
 
instance HsJSONPB.ToJSON ThingType_UnsetPlays where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_UnsetPlays where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_UnsetPlays where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_UnsetPlays",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype ThingType_UnsetPlays_Req = ThingType_UnsetPlays_Req{thingType_UnsetPlays_ReqRole
                                                            :: Hs.Maybe Concept.Type}
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_UnsetPlays_Req where
        nameOf _ = (Hs.fromString "ThingType_UnsetPlays_Req")
 
instance HsProtobuf.HasDefault ThingType_UnsetPlays_Req
 
instance HsProtobuf.Message ThingType_UnsetPlays_Req where
        encodeMessage _
          ThingType_UnsetPlays_Req{thingType_UnsetPlays_ReqRole =
                                     thingType_UnsetPlays_ReqRole}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Type)
                      @(HsProtobuf.Nested Concept.Type)
                      thingType_UnsetPlays_ReqRole))])
        decodeMessage _
          = (Hs.pure ThingType_UnsetPlays_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                 @(_ (Hs.Maybe Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "role")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ThingType_UnsetPlays_Req where
        toJSONPB (ThingType_UnsetPlays_Req f1)
          = (HsJSONPB.object ["role" .= f1])
        toEncodingPB (ThingType_UnsetPlays_Req f1)
          = (HsJSONPB.pairs ["role" .= f1])
 
instance HsJSONPB.FromJSONPB ThingType_UnsetPlays_Req where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_UnsetPlays_Req"
               (\ obj -> (Hs.pure ThingType_UnsetPlays_Req) <*> obj .: "role"))
 
instance HsJSONPB.ToJSON ThingType_UnsetPlays_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_UnsetPlays_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_UnsetPlays_Req where
        declareNamedSchema _
          = do let declare_role = HsJSONPB.declareSchemaRef
               thingType_UnsetPlays_ReqRole <- declare_role Proxy.Proxy
               let _ = Hs.pure ThingType_UnsetPlays_Req <*>
                         HsJSONPB.asProxy declare_role
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_UnsetPlays_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("role", thingType_UnsetPlays_ReqRole)]}})
 
data ThingType_UnsetPlays_Res = ThingType_UnsetPlays_Res{}
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ThingType_UnsetPlays_Res where
        nameOf _ = (Hs.fromString "ThingType_UnsetPlays_Res")
 
instance HsProtobuf.HasDefault ThingType_UnsetPlays_Res
 
instance HsProtobuf.Message ThingType_UnsetPlays_Res where
        encodeMessage _ ThingType_UnsetPlays_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ThingType_UnsetPlays_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ThingType_UnsetPlays_Res where
        toJSONPB (ThingType_UnsetPlays_Res) = (HsJSONPB.object [])
        toEncodingPB (ThingType_UnsetPlays_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ThingType_UnsetPlays_Res where
        parseJSONPB
          = (HsJSONPB.withObject "ThingType_UnsetPlays_Res"
               (\ obj -> (Hs.pure ThingType_UnsetPlays_Res)))
 
instance HsJSONPB.ToJSON ThingType_UnsetPlays_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ThingType_UnsetPlays_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ThingType_UnsetPlays_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ThingType_UnsetPlays_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data EntityType = EntityType{}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named EntityType where
        nameOf _ = (Hs.fromString "EntityType")
 
instance HsProtobuf.HasDefault EntityType
 
instance HsProtobuf.Message EntityType where
        encodeMessage _ EntityType{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure EntityType)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB EntityType where
        toJSONPB (EntityType) = (HsJSONPB.object [])
        toEncodingPB (EntityType) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB EntityType where
        parseJSONPB
          = (HsJSONPB.withObject "EntityType"
               (\ obj -> (Hs.pure EntityType)))
 
instance HsJSONPB.ToJSON EntityType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON EntityType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema EntityType where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "EntityType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data EntityType_Create = EntityType_Create{}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named EntityType_Create where
        nameOf _ = (Hs.fromString "EntityType_Create")
 
instance HsProtobuf.HasDefault EntityType_Create
 
instance HsProtobuf.Message EntityType_Create where
        encodeMessage _ EntityType_Create{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure EntityType_Create)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB EntityType_Create where
        toJSONPB (EntityType_Create) = (HsJSONPB.object [])
        toEncodingPB (EntityType_Create) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB EntityType_Create where
        parseJSONPB
          = (HsJSONPB.withObject "EntityType_Create"
               (\ obj -> (Hs.pure EntityType_Create)))
 
instance HsJSONPB.ToJSON EntityType_Create where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON EntityType_Create where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema EntityType_Create where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "EntityType_Create",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data EntityType_Create_Req = EntityType_Create_Req{}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named EntityType_Create_Req where
        nameOf _ = (Hs.fromString "EntityType_Create_Req")
 
instance HsProtobuf.HasDefault EntityType_Create_Req
 
instance HsProtobuf.Message EntityType_Create_Req where
        encodeMessage _ EntityType_Create_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure EntityType_Create_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB EntityType_Create_Req where
        toJSONPB (EntityType_Create_Req) = (HsJSONPB.object [])
        toEncodingPB (EntityType_Create_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB EntityType_Create_Req where
        parseJSONPB
          = (HsJSONPB.withObject "EntityType_Create_Req"
               (\ obj -> (Hs.pure EntityType_Create_Req)))
 
instance HsJSONPB.ToJSON EntityType_Create_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON EntityType_Create_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema EntityType_Create_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "EntityType_Create_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype EntityType_Create_Res = EntityType_Create_Res{entityType_Create_ResEntity
                                                      :: Hs.Maybe Concept.Thing}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named EntityType_Create_Res where
        nameOf _ = (Hs.fromString "EntityType_Create_Res")
 
instance HsProtobuf.HasDefault EntityType_Create_Res
 
instance HsProtobuf.Message EntityType_Create_Res where
        encodeMessage _
          EntityType_Create_Res{entityType_Create_ResEntity =
                                  entityType_Create_ResEntity}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Thing)
                      @(HsProtobuf.Nested Concept.Thing)
                      entityType_Create_ResEntity))])
        decodeMessage _
          = (Hs.pure EntityType_Create_Res) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing))
                 @(_ (Hs.Maybe Concept.Thing))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Thing")))
                (HsProtobuf.Single "entity")
                []
                "")]
 
instance HsJSONPB.ToJSONPB EntityType_Create_Res where
        toJSONPB (EntityType_Create_Res f1)
          = (HsJSONPB.object ["entity" .= f1])
        toEncodingPB (EntityType_Create_Res f1)
          = (HsJSONPB.pairs ["entity" .= f1])
 
instance HsJSONPB.FromJSONPB EntityType_Create_Res where
        parseJSONPB
          = (HsJSONPB.withObject "EntityType_Create_Res"
               (\ obj -> (Hs.pure EntityType_Create_Res) <*> obj .: "entity"))
 
instance HsJSONPB.ToJSON EntityType_Create_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON EntityType_Create_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema EntityType_Create_Res where
        declareNamedSchema _
          = do let declare_entity = HsJSONPB.declareSchemaRef
               entityType_Create_ResEntity <- declare_entity Proxy.Proxy
               let _ = Hs.pure EntityType_Create_Res <*>
                         HsJSONPB.asProxy declare_entity
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "EntityType_Create_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("entity", entityType_Create_ResEntity)]}})
 
data RelationType = RelationType{}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType where
        nameOf _ = (Hs.fromString "RelationType")
 
instance HsProtobuf.HasDefault RelationType
 
instance HsProtobuf.Message RelationType where
        encodeMessage _ RelationType{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RelationType)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RelationType where
        toJSONPB (RelationType) = (HsJSONPB.object [])
        toEncodingPB (RelationType) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RelationType where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType"
               (\ obj -> (Hs.pure RelationType)))
 
instance HsJSONPB.ToJSON RelationType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data RelationType_Create = RelationType_Create{}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType_Create where
        nameOf _ = (Hs.fromString "RelationType_Create")
 
instance HsProtobuf.HasDefault RelationType_Create
 
instance HsProtobuf.Message RelationType_Create where
        encodeMessage _ RelationType_Create{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RelationType_Create)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RelationType_Create where
        toJSONPB (RelationType_Create) = (HsJSONPB.object [])
        toEncodingPB (RelationType_Create) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RelationType_Create where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_Create"
               (\ obj -> (Hs.pure RelationType_Create)))
 
instance HsJSONPB.ToJSON RelationType_Create where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_Create where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_Create where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_Create",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data RelationType_Create_Req = RelationType_Create_Req{}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType_Create_Req where
        nameOf _ = (Hs.fromString "RelationType_Create_Req")
 
instance HsProtobuf.HasDefault RelationType_Create_Req
 
instance HsProtobuf.Message RelationType_Create_Req where
        encodeMessage _ RelationType_Create_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RelationType_Create_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RelationType_Create_Req where
        toJSONPB (RelationType_Create_Req) = (HsJSONPB.object [])
        toEncodingPB (RelationType_Create_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RelationType_Create_Req where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_Create_Req"
               (\ obj -> (Hs.pure RelationType_Create_Req)))
 
instance HsJSONPB.ToJSON RelationType_Create_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_Create_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_Create_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_Create_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype RelationType_Create_Res = RelationType_Create_Res{relationType_Create_ResRelation
                                                          :: Hs.Maybe Concept.Thing}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType_Create_Res where
        nameOf _ = (Hs.fromString "RelationType_Create_Res")
 
instance HsProtobuf.HasDefault RelationType_Create_Res
 
instance HsProtobuf.Message RelationType_Create_Res where
        encodeMessage _
          RelationType_Create_Res{relationType_Create_ResRelation =
                                    relationType_Create_ResRelation}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Thing)
                      @(HsProtobuf.Nested Concept.Thing)
                      relationType_Create_ResRelation))])
        decodeMessage _
          = (Hs.pure RelationType_Create_Res) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing))
                 @(_ (Hs.Maybe Concept.Thing))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Thing")))
                (HsProtobuf.Single "relation")
                []
                "")]
 
instance HsJSONPB.ToJSONPB RelationType_Create_Res where
        toJSONPB (RelationType_Create_Res f1)
          = (HsJSONPB.object ["relation" .= f1])
        toEncodingPB (RelationType_Create_Res f1)
          = (HsJSONPB.pairs ["relation" .= f1])
 
instance HsJSONPB.FromJSONPB RelationType_Create_Res where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_Create_Res"
               (\ obj -> (Hs.pure RelationType_Create_Res) <*> obj .: "relation"))
 
instance HsJSONPB.ToJSON RelationType_Create_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_Create_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_Create_Res where
        declareNamedSchema _
          = do let declare_relation = HsJSONPB.declareSchemaRef
               relationType_Create_ResRelation <- declare_relation Proxy.Proxy
               let _ = Hs.pure RelationType_Create_Res <*>
                         HsJSONPB.asProxy declare_relation
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_Create_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("relation",
                                                         relationType_Create_ResRelation)]}})
 
data RelationType_GetRelates = RelationType_GetRelates{}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType_GetRelates where
        nameOf _ = (Hs.fromString "RelationType_GetRelates")
 
instance HsProtobuf.HasDefault RelationType_GetRelates
 
instance HsProtobuf.Message RelationType_GetRelates where
        encodeMessage _ RelationType_GetRelates{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RelationType_GetRelates)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RelationType_GetRelates where
        toJSONPB (RelationType_GetRelates) = (HsJSONPB.object [])
        toEncodingPB (RelationType_GetRelates) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RelationType_GetRelates where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_GetRelates"
               (\ obj -> (Hs.pure RelationType_GetRelates)))
 
instance HsJSONPB.ToJSON RelationType_GetRelates where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_GetRelates where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_GetRelates where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_GetRelates",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data RelationType_GetRelates_Req = RelationType_GetRelates_Req{}
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType_GetRelates_Req where
        nameOf _ = (Hs.fromString "RelationType_GetRelates_Req")
 
instance HsProtobuf.HasDefault RelationType_GetRelates_Req
 
instance HsProtobuf.Message RelationType_GetRelates_Req where
        encodeMessage _ RelationType_GetRelates_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RelationType_GetRelates_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RelationType_GetRelates_Req where
        toJSONPB (RelationType_GetRelates_Req) = (HsJSONPB.object [])
        toEncodingPB (RelationType_GetRelates_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RelationType_GetRelates_Req where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_GetRelates_Req"
               (\ obj -> (Hs.pure RelationType_GetRelates_Req)))
 
instance HsJSONPB.ToJSON RelationType_GetRelates_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_GetRelates_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_GetRelates_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_GetRelates_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype RelationType_GetRelates_ResPart = RelationType_GetRelates_ResPart{relationType_GetRelates_ResPartRoles
                                                                          :: Hs.Vector Concept.Type}
                                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType_GetRelates_ResPart where
        nameOf _ = (Hs.fromString "RelationType_GetRelates_ResPart")
 
instance HsProtobuf.HasDefault RelationType_GetRelates_ResPart
 
instance HsProtobuf.Message RelationType_GetRelates_ResPart where
        encodeMessage _
          RelationType_GetRelates_ResPart{relationType_GetRelates_ResPartRoles
                                            = relationType_GetRelates_ResPartRoles}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Type)
                      @(HsProtobuf.NestedVec Concept.Type)
                      relationType_GetRelates_ResPartRoles))])
        decodeMessage _
          = (Hs.pure RelationType_GetRelates_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Type))
                 @(_ (Hs.Vector Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "roles")
                []
                "")]
 
instance HsJSONPB.ToJSONPB RelationType_GetRelates_ResPart where
        toJSONPB (RelationType_GetRelates_ResPart f1)
          = (HsJSONPB.object ["roles" .= f1])
        toEncodingPB (RelationType_GetRelates_ResPart f1)
          = (HsJSONPB.pairs ["roles" .= f1])
 
instance HsJSONPB.FromJSONPB RelationType_GetRelates_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_GetRelates_ResPart"
               (\ obj ->
                  (Hs.pure RelationType_GetRelates_ResPart) <*> obj .: "roles"))
 
instance HsJSONPB.ToJSON RelationType_GetRelates_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_GetRelates_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_GetRelates_ResPart where
        declareNamedSchema _
          = do let declare_roles = HsJSONPB.declareSchemaRef
               relationType_GetRelates_ResPartRoles <- declare_roles Proxy.Proxy
               let _ = Hs.pure RelationType_GetRelates_ResPart <*>
                         HsJSONPB.asProxy declare_roles
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_GetRelates_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("roles",
                                                         relationType_GetRelates_ResPartRoles)]}})
 
data RelationType_GetRelatesForRoleLabel = RelationType_GetRelatesForRoleLabel{}
                                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType_GetRelatesForRoleLabel where
        nameOf _ = (Hs.fromString "RelationType_GetRelatesForRoleLabel")
 
instance HsProtobuf.HasDefault RelationType_GetRelatesForRoleLabel
 
instance HsProtobuf.Message RelationType_GetRelatesForRoleLabel
         where
        encodeMessage _ RelationType_GetRelatesForRoleLabel{}
          = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RelationType_GetRelatesForRoleLabel)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RelationType_GetRelatesForRoleLabel
         where
        toJSONPB (RelationType_GetRelatesForRoleLabel)
          = (HsJSONPB.object [])
        toEncodingPB (RelationType_GetRelatesForRoleLabel)
          = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RelationType_GetRelatesForRoleLabel
         where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_GetRelatesForRoleLabel"
               (\ obj -> (Hs.pure RelationType_GetRelatesForRoleLabel)))
 
instance HsJSONPB.ToJSON RelationType_GetRelatesForRoleLabel where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_GetRelatesForRoleLabel
         where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_GetRelatesForRoleLabel
         where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_GetRelatesForRoleLabel",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype RelationType_GetRelatesForRoleLabel_Req = RelationType_GetRelatesForRoleLabel_Req{relationType_GetRelatesForRoleLabel_ReqLabel
                                                                                          ::
                                                                                          Hs.Text}
                                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                            Hs.NFData)
 
instance HsProtobuf.Named RelationType_GetRelatesForRoleLabel_Req
         where
        nameOf _
          = (Hs.fromString "RelationType_GetRelatesForRoleLabel_Req")
 
instance HsProtobuf.HasDefault
         RelationType_GetRelatesForRoleLabel_Req
 
instance HsProtobuf.Message RelationType_GetRelatesForRoleLabel_Req
         where
        encodeMessage _
          RelationType_GetRelatesForRoleLabel_Req{relationType_GetRelatesForRoleLabel_ReqLabel
                                                    = relationType_GetRelatesForRoleLabel_ReqLabel}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   relationType_GetRelatesForRoleLabel_ReqLabel)])
        decodeMessage _
          = (Hs.pure RelationType_GetRelatesForRoleLabel_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                "")]
 
instance HsJSONPB.ToJSONPB RelationType_GetRelatesForRoleLabel_Req
         where
        toJSONPB (RelationType_GetRelatesForRoleLabel_Req f1)
          = (HsJSONPB.object ["label" .= f1])
        toEncodingPB (RelationType_GetRelatesForRoleLabel_Req f1)
          = (HsJSONPB.pairs ["label" .= f1])
 
instance HsJSONPB.FromJSONPB
         RelationType_GetRelatesForRoleLabel_Req where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_GetRelatesForRoleLabel_Req"
               (\ obj ->
                  (Hs.pure RelationType_GetRelatesForRoleLabel_Req) <*>
                    obj .: "label"))
 
instance HsJSONPB.ToJSON RelationType_GetRelatesForRoleLabel_Req
         where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_GetRelatesForRoleLabel_Req
         where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_GetRelatesForRoleLabel_Req
         where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               relationType_GetRelatesForRoleLabel_ReqLabel <- declare_label
                                                                 Proxy.Proxy
               let _ = Hs.pure RelationType_GetRelatesForRoleLabel_Req <*>
                         HsJSONPB.asProxy declare_label
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_GetRelatesForRoleLabel_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label",
                                                         relationType_GetRelatesForRoleLabel_ReqLabel)]}})
 
newtype RelationType_GetRelatesForRoleLabel_Res = RelationType_GetRelatesForRoleLabel_Res{relationType_GetRelatesForRoleLabel_ResRole
                                                                                          ::
                                                                                          Hs.Maybe
                                                                                            RelationType_GetRelatesForRoleLabel_ResRole}
                                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                            Hs.NFData)
 
instance HsProtobuf.Named RelationType_GetRelatesForRoleLabel_Res
         where
        nameOf _
          = (Hs.fromString "RelationType_GetRelatesForRoleLabel_Res")
 
instance HsProtobuf.HasDefault
         RelationType_GetRelatesForRoleLabel_Res
 
instance HsProtobuf.Message RelationType_GetRelatesForRoleLabel_Res
         where
        encodeMessage _
          RelationType_GetRelatesForRoleLabel_Res{relationType_GetRelatesForRoleLabel_ResRole
                                                    = relationType_GetRelatesForRoleLabel_ResRole}
          = (Hs.mconcat
               [case relationType_GetRelatesForRoleLabel_ResRole of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             RelationType_GetRelatesForRoleLabel_ResRoleRoleType y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Concept.Type)
                                        @(HsProtobuf.Nested Concept.Type)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure RelationType_GetRelatesForRoleLabel_Res) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure
                      (Hs.fmap RelationType_GetRelatesForRoleLabel_ResRoleRoleType))
                     <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type))
                        @(_ (Hs.Maybe Concept.Type))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RelationType_GetRelatesForRoleLabel_Res
         where
        toJSONPB (RelationType_GetRelatesForRoleLabel_Res f1)
          = (HsJSONPB.object
               [(let encodeRole
                       = (case f1 of
                              Hs.Just (RelationType_GetRelatesForRoleLabel_ResRoleRoleType f1)
                                -> (HsJSONPB.pair "role_type" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("role" .= (HsJSONPB.objectOrNull [encodeRole] options)) options
                       else encodeRole options)])
        toEncodingPB (RelationType_GetRelatesForRoleLabel_Res f1)
          = (HsJSONPB.pairs
               [(let encodeRole
                       = (case f1 of
                              Hs.Just (RelationType_GetRelatesForRoleLabel_ResRoleRoleType f1)
                                -> (HsJSONPB.pair "role_type" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("role" .= (HsJSONPB.pairsOrNull [encodeRole] options)) options
                       else encodeRole options)])
 
instance HsJSONPB.FromJSONPB
         RelationType_GetRelatesForRoleLabel_Res where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_GetRelatesForRoleLabel_Res"
               (\ obj ->
                  (Hs.pure RelationType_GetRelatesForRoleLabel_Res) <*>
                    (let parseRole parseObj
                           = Hs.msum
                               [Hs.Just Hs.. RelationType_GetRelatesForRoleLabel_ResRoleRoleType
                                  <$> (HsJSONPB.parseField parseObj "role_type"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "role") Hs.>>= (HsJSONPB.withObject "role" parseRole)) <|>
                         (parseRole obj))))
 
instance HsJSONPB.ToJSON RelationType_GetRelatesForRoleLabel_Res
         where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_GetRelatesForRoleLabel_Res
         where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_GetRelatesForRoleLabel_Res
         where
        declareNamedSchema _
          = do let declare_role = HsJSONPB.declareSchemaRef
               relationType_GetRelatesForRoleLabel_ResRole <- declare_role
                                                                Proxy.Proxy
               let _ = Hs.pure RelationType_GetRelatesForRoleLabel_Res <*>
                         HsJSONPB.asProxy declare_role
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_GetRelatesForRoleLabel_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("role",
                                                         relationType_GetRelatesForRoleLabel_ResRole)]}})
 
data RelationType_GetRelatesForRoleLabel_ResRole = RelationType_GetRelatesForRoleLabel_ResRoleRoleType Concept.Type
                                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                           Hs.NFData)
 
instance HsProtobuf.Named
         RelationType_GetRelatesForRoleLabel_ResRole where
        nameOf _
          = (Hs.fromString "RelationType_GetRelatesForRoleLabel_ResRole")
 
instance HsJSONPB.ToSchema
         RelationType_GetRelatesForRoleLabel_ResRole where
        declareNamedSchema _
          = do let declare_role_type = HsJSONPB.declareSchemaRef
               relationType_GetRelatesForRoleLabel_ResRoleRoleType <- declare_role_type
                                                                        Proxy.Proxy
               let _ = Hs.pure RelationType_GetRelatesForRoleLabel_ResRoleRoleType
                         <*> HsJSONPB.asProxy declare_role_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_GetRelatesForRoleLabel_ResRole",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("role_type",
                                                         relationType_GetRelatesForRoleLabel_ResRoleRoleType)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data RelationType_SetRelates = RelationType_SetRelates{}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType_SetRelates where
        nameOf _ = (Hs.fromString "RelationType_SetRelates")
 
instance HsProtobuf.HasDefault RelationType_SetRelates
 
instance HsProtobuf.Message RelationType_SetRelates where
        encodeMessage _ RelationType_SetRelates{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RelationType_SetRelates)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RelationType_SetRelates where
        toJSONPB (RelationType_SetRelates) = (HsJSONPB.object [])
        toEncodingPB (RelationType_SetRelates) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RelationType_SetRelates where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_SetRelates"
               (\ obj -> (Hs.pure RelationType_SetRelates)))
 
instance HsJSONPB.ToJSON RelationType_SetRelates where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_SetRelates where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_SetRelates where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_SetRelates",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data RelationType_SetRelates_Req = RelationType_SetRelates_Req{relationType_SetRelates_ReqLabel
                                                               :: Hs.Text,
                                                               relationType_SetRelates_ReqOverridden
                                                               ::
                                                               Hs.Maybe
                                                                 RelationType_SetRelates_ReqOverridden}
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType_SetRelates_Req where
        nameOf _ = (Hs.fromString "RelationType_SetRelates_Req")
 
instance HsProtobuf.HasDefault RelationType_SetRelates_Req
 
instance HsProtobuf.Message RelationType_SetRelates_Req where
        encodeMessage _
          RelationType_SetRelates_Req{relationType_SetRelates_ReqLabel =
                                        relationType_SetRelates_ReqLabel,
                                      relationType_SetRelates_ReqOverridden =
                                        relationType_SetRelates_ReqOverridden}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   relationType_SetRelates_ReqLabel),
                case relationType_SetRelates_ReqOverridden of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             RelationType_SetRelates_ReqOverriddenOverriddenLabel y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (HsProtobuf.ForceEmit y))])
        decodeMessage _
          = (Hs.pure RelationType_SetRelates_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 2),
                   (Hs.pure
                      (Hs.Just Hs..
                         RelationType_SetRelates_ReqOverriddenOverriddenLabel))
                     <*> HsProtobuf.decodeMessageField)])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                "")]
 
instance HsJSONPB.ToJSONPB RelationType_SetRelates_Req where
        toJSONPB (RelationType_SetRelates_Req f1 f2)
          = (HsJSONPB.object
               ["label" .= f1,
                (let encodeOverridden
                       = (case f2 of
                              Hs.Just (RelationType_SetRelates_ReqOverriddenOverriddenLabel f2)
                                -> (HsJSONPB.pair "overridden_label" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("overridden" .=
                          (HsJSONPB.objectOrNull [encodeOverridden] options))
                         options
                       else encodeOverridden options)])
        toEncodingPB (RelationType_SetRelates_Req f1 f2)
          = (HsJSONPB.pairs
               ["label" .= f1,
                (let encodeOverridden
                       = (case f2 of
                              Hs.Just (RelationType_SetRelates_ReqOverriddenOverriddenLabel f2)
                                -> (HsJSONPB.pair "overridden_label" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("overridden" .= (HsJSONPB.pairsOrNull [encodeOverridden] options))
                         options
                       else encodeOverridden options)])
 
instance HsJSONPB.FromJSONPB RelationType_SetRelates_Req where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_SetRelates_Req"
               (\ obj ->
                  (Hs.pure RelationType_SetRelates_Req) <*> obj .: "label" <*>
                    (let parseOverridden parseObj
                           = Hs.msum
                               [Hs.Just Hs.. RelationType_SetRelates_ReqOverriddenOverriddenLabel
                                  <$> (HsJSONPB.parseField parseObj "overridden_label"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "overridden") Hs.>>=
                          (HsJSONPB.withObject "overridden" parseOverridden))
                         <|> (parseOverridden obj))))
 
instance HsJSONPB.ToJSON RelationType_SetRelates_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_SetRelates_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_SetRelates_Req where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               relationType_SetRelates_ReqLabel <- declare_label Proxy.Proxy
               let declare_overridden = HsJSONPB.declareSchemaRef
               relationType_SetRelates_ReqOverridden <- declare_overridden
                                                          Proxy.Proxy
               let _ = Hs.pure RelationType_SetRelates_Req <*>
                         HsJSONPB.asProxy declare_label
                         <*> HsJSONPB.asProxy declare_overridden
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_SetRelates_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label", relationType_SetRelates_ReqLabel),
                                                        ("overridden",
                                                         relationType_SetRelates_ReqOverridden)]}})
 
data RelationType_SetRelates_ReqOverridden = RelationType_SetRelates_ReqOverriddenOverriddenLabel Hs.Text
                                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType_SetRelates_ReqOverridden
         where
        nameOf _ = (Hs.fromString "RelationType_SetRelates_ReqOverridden")
 
instance HsJSONPB.ToSchema RelationType_SetRelates_ReqOverridden
         where
        declareNamedSchema _
          = do let declare_overridden_label = HsJSONPB.declareSchemaRef
               relationType_SetRelates_ReqOverriddenOverriddenLabel <- declare_overridden_label
                                                                         Proxy.Proxy
               let _ = Hs.pure
                         RelationType_SetRelates_ReqOverriddenOverriddenLabel
                         <*> HsJSONPB.asProxy declare_overridden_label
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_SetRelates_ReqOverridden",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("overridden_label",
                                                         relationType_SetRelates_ReqOverriddenOverriddenLabel)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data RelationType_SetRelates_Res = RelationType_SetRelates_Res{}
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType_SetRelates_Res where
        nameOf _ = (Hs.fromString "RelationType_SetRelates_Res")
 
instance HsProtobuf.HasDefault RelationType_SetRelates_Res
 
instance HsProtobuf.Message RelationType_SetRelates_Res where
        encodeMessage _ RelationType_SetRelates_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RelationType_SetRelates_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RelationType_SetRelates_Res where
        toJSONPB (RelationType_SetRelates_Res) = (HsJSONPB.object [])
        toEncodingPB (RelationType_SetRelates_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RelationType_SetRelates_Res where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_SetRelates_Res"
               (\ obj -> (Hs.pure RelationType_SetRelates_Res)))
 
instance HsJSONPB.ToJSON RelationType_SetRelates_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_SetRelates_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_SetRelates_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_SetRelates_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data RelationType_UnsetRelates = RelationType_UnsetRelates{}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType_UnsetRelates where
        nameOf _ = (Hs.fromString "RelationType_UnsetRelates")
 
instance HsProtobuf.HasDefault RelationType_UnsetRelates
 
instance HsProtobuf.Message RelationType_UnsetRelates where
        encodeMessage _ RelationType_UnsetRelates{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RelationType_UnsetRelates)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RelationType_UnsetRelates where
        toJSONPB (RelationType_UnsetRelates) = (HsJSONPB.object [])
        toEncodingPB (RelationType_UnsetRelates) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RelationType_UnsetRelates where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_UnsetRelates"
               (\ obj -> (Hs.pure RelationType_UnsetRelates)))
 
instance HsJSONPB.ToJSON RelationType_UnsetRelates where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_UnsetRelates where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_UnsetRelates where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_UnsetRelates",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype RelationType_UnsetRelates_Req = RelationType_UnsetRelates_Req{relationType_UnsetRelates_ReqLabel
                                                                      :: Hs.Text}
                                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType_UnsetRelates_Req where
        nameOf _ = (Hs.fromString "RelationType_UnsetRelates_Req")
 
instance HsProtobuf.HasDefault RelationType_UnsetRelates_Req
 
instance HsProtobuf.Message RelationType_UnsetRelates_Req where
        encodeMessage _
          RelationType_UnsetRelates_Req{relationType_UnsetRelates_ReqLabel =
                                          relationType_UnsetRelates_ReqLabel}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   relationType_UnsetRelates_ReqLabel)])
        decodeMessage _
          = (Hs.pure RelationType_UnsetRelates_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                "")]
 
instance HsJSONPB.ToJSONPB RelationType_UnsetRelates_Req where
        toJSONPB (RelationType_UnsetRelates_Req f1)
          = (HsJSONPB.object ["label" .= f1])
        toEncodingPB (RelationType_UnsetRelates_Req f1)
          = (HsJSONPB.pairs ["label" .= f1])
 
instance HsJSONPB.FromJSONPB RelationType_UnsetRelates_Req where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_UnsetRelates_Req"
               (\ obj ->
                  (Hs.pure RelationType_UnsetRelates_Req) <*> obj .: "label"))
 
instance HsJSONPB.ToJSON RelationType_UnsetRelates_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_UnsetRelates_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_UnsetRelates_Req where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               relationType_UnsetRelates_ReqLabel <- declare_label Proxy.Proxy
               let _ = Hs.pure RelationType_UnsetRelates_Req <*>
                         HsJSONPB.asProxy declare_label
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_UnsetRelates_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label",
                                                         relationType_UnsetRelates_ReqLabel)]}})
 
data RelationType_UnsetRelates_Res = RelationType_UnsetRelates_Res{}
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RelationType_UnsetRelates_Res where
        nameOf _ = (Hs.fromString "RelationType_UnsetRelates_Res")
 
instance HsProtobuf.HasDefault RelationType_UnsetRelates_Res
 
instance HsProtobuf.Message RelationType_UnsetRelates_Res where
        encodeMessage _ RelationType_UnsetRelates_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure RelationType_UnsetRelates_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB RelationType_UnsetRelates_Res where
        toJSONPB (RelationType_UnsetRelates_Res) = (HsJSONPB.object [])
        toEncodingPB (RelationType_UnsetRelates_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB RelationType_UnsetRelates_Res where
        parseJSONPB
          = (HsJSONPB.withObject "RelationType_UnsetRelates_Res"
               (\ obj -> (Hs.pure RelationType_UnsetRelates_Res)))
 
instance HsJSONPB.ToJSON RelationType_UnsetRelates_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RelationType_UnsetRelates_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RelationType_UnsetRelates_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RelationType_UnsetRelates_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data AttributeType = AttributeType{}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType where
        nameOf _ = (Hs.fromString "AttributeType")
 
instance HsProtobuf.HasDefault AttributeType
 
instance HsProtobuf.Message AttributeType where
        encodeMessage _ AttributeType{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure AttributeType)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AttributeType where
        toJSONPB (AttributeType) = (HsJSONPB.object [])
        toEncodingPB (AttributeType) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB AttributeType where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType"
               (\ obj -> (Hs.pure AttributeType)))
 
instance HsJSONPB.ToJSON AttributeType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data AttributeType_ValueType = AttributeType_ValueTypeOBJECT
                             | AttributeType_ValueTypeBOOLEAN
                             | AttributeType_ValueTypeLONG
                             | AttributeType_ValueTypeDOUBLE
                             | AttributeType_ValueTypeSTRING
                             | AttributeType_ValueTypeDATETIME
                             deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_ValueType where
        nameOf _ = (Hs.fromString "AttributeType_ValueType")
 
instance HsProtobuf.HasDefault AttributeType_ValueType
 
instance Hs.Bounded AttributeType_ValueType where
        minBound = AttributeType_ValueTypeOBJECT
        maxBound = AttributeType_ValueTypeDATETIME
 
instance Hs.Ord AttributeType_ValueType where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum AttributeType_ValueType where
        toProtoEnumMay 0 = Hs.Just AttributeType_ValueTypeOBJECT
        toProtoEnumMay 1 = Hs.Just AttributeType_ValueTypeBOOLEAN
        toProtoEnumMay 2 = Hs.Just AttributeType_ValueTypeLONG
        toProtoEnumMay 3 = Hs.Just AttributeType_ValueTypeDOUBLE
        toProtoEnumMay 4 = Hs.Just AttributeType_ValueTypeSTRING
        toProtoEnumMay 5 = Hs.Just AttributeType_ValueTypeDATETIME
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (AttributeType_ValueTypeOBJECT) = 0
        fromProtoEnum (AttributeType_ValueTypeBOOLEAN) = 1
        fromProtoEnum (AttributeType_ValueTypeLONG) = 2
        fromProtoEnum (AttributeType_ValueTypeDOUBLE) = 3
        fromProtoEnum (AttributeType_ValueTypeSTRING) = 4
        fromProtoEnum (AttributeType_ValueTypeDATETIME) = 5
 
instance HsJSONPB.ToJSONPB AttributeType_ValueType where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB AttributeType_ValueType where
        parseJSONPB (HsJSONPB.String "OBJECT")
          = Hs.pure AttributeType_ValueTypeOBJECT
        parseJSONPB (HsJSONPB.String "BOOLEAN")
          = Hs.pure AttributeType_ValueTypeBOOLEAN
        parseJSONPB (HsJSONPB.String "LONG")
          = Hs.pure AttributeType_ValueTypeLONG
        parseJSONPB (HsJSONPB.String "DOUBLE")
          = Hs.pure AttributeType_ValueTypeDOUBLE
        parseJSONPB (HsJSONPB.String "STRING")
          = Hs.pure AttributeType_ValueTypeSTRING
        parseJSONPB (HsJSONPB.String "DATETIME")
          = Hs.pure AttributeType_ValueTypeDATETIME
        parseJSONPB v = (HsJSONPB.typeMismatch "AttributeType_ValueType" v)
 
instance HsJSONPB.ToJSON AttributeType_ValueType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_ValueType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite AttributeType_ValueType
 
data AttributeType_Put = AttributeType_Put{}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_Put where
        nameOf _ = (Hs.fromString "AttributeType_Put")
 
instance HsProtobuf.HasDefault AttributeType_Put
 
instance HsProtobuf.Message AttributeType_Put where
        encodeMessage _ AttributeType_Put{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure AttributeType_Put)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AttributeType_Put where
        toJSONPB (AttributeType_Put) = (HsJSONPB.object [])
        toEncodingPB (AttributeType_Put) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB AttributeType_Put where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_Put"
               (\ obj -> (Hs.pure AttributeType_Put)))
 
instance HsJSONPB.ToJSON AttributeType_Put where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_Put where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_Put where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_Put",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype AttributeType_Put_Req = AttributeType_Put_Req{attributeType_Put_ReqValue
                                                      :: Hs.Maybe Concept.Attribute_Value}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_Put_Req where
        nameOf _ = (Hs.fromString "AttributeType_Put_Req")
 
instance HsProtobuf.HasDefault AttributeType_Put_Req
 
instance HsProtobuf.Message AttributeType_Put_Req where
        encodeMessage _
          AttributeType_Put_Req{attributeType_Put_ReqValue =
                                  attributeType_Put_ReqValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Attribute_Value)
                      @(HsProtobuf.Nested Concept.Attribute_Value)
                      attributeType_Put_ReqValue))])
        decodeMessage _
          = (Hs.pure AttributeType_Put_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Attribute_Value))
                 @(_ (Hs.Maybe Concept.Attribute_Value))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots (HsProtobuf.Path ("Attribute" Hs.:| ["Value"])))))
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB AttributeType_Put_Req where
        toJSONPB (AttributeType_Put_Req f1)
          = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (AttributeType_Put_Req f1)
          = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB AttributeType_Put_Req where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_Put_Req"
               (\ obj -> (Hs.pure AttributeType_Put_Req) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON AttributeType_Put_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_Put_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_Put_Req where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               attributeType_Put_ReqValue <- declare_value Proxy.Proxy
               let _ = Hs.pure AttributeType_Put_Req <*>
                         HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_Put_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", attributeType_Put_ReqValue)]}})
 
newtype AttributeType_Put_Res = AttributeType_Put_Res{attributeType_Put_ResAttribute
                                                      :: Hs.Maybe Concept.Thing}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_Put_Res where
        nameOf _ = (Hs.fromString "AttributeType_Put_Res")
 
instance HsProtobuf.HasDefault AttributeType_Put_Res
 
instance HsProtobuf.Message AttributeType_Put_Res where
        encodeMessage _
          AttributeType_Put_Res{attributeType_Put_ResAttribute =
                                  attributeType_Put_ResAttribute}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Thing)
                      @(HsProtobuf.Nested Concept.Thing)
                      attributeType_Put_ResAttribute))])
        decodeMessage _
          = (Hs.pure AttributeType_Put_Res) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing))
                 @(_ (Hs.Maybe Concept.Thing))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Thing")))
                (HsProtobuf.Single "attribute")
                []
                "")]
 
instance HsJSONPB.ToJSONPB AttributeType_Put_Res where
        toJSONPB (AttributeType_Put_Res f1)
          = (HsJSONPB.object ["attribute" .= f1])
        toEncodingPB (AttributeType_Put_Res f1)
          = (HsJSONPB.pairs ["attribute" .= f1])
 
instance HsJSONPB.FromJSONPB AttributeType_Put_Res where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_Put_Res"
               (\ obj -> (Hs.pure AttributeType_Put_Res) <*> obj .: "attribute"))
 
instance HsJSONPB.ToJSON AttributeType_Put_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_Put_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_Put_Res where
        declareNamedSchema _
          = do let declare_attribute = HsJSONPB.declareSchemaRef
               attributeType_Put_ResAttribute <- declare_attribute Proxy.Proxy
               let _ = Hs.pure AttributeType_Put_Res <*>
                         HsJSONPB.asProxy declare_attribute
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_Put_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("attribute",
                                                         attributeType_Put_ResAttribute)]}})
 
data AttributeType_Get = AttributeType_Get{}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_Get where
        nameOf _ = (Hs.fromString "AttributeType_Get")
 
instance HsProtobuf.HasDefault AttributeType_Get
 
instance HsProtobuf.Message AttributeType_Get where
        encodeMessage _ AttributeType_Get{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure AttributeType_Get)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AttributeType_Get where
        toJSONPB (AttributeType_Get) = (HsJSONPB.object [])
        toEncodingPB (AttributeType_Get) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB AttributeType_Get where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_Get"
               (\ obj -> (Hs.pure AttributeType_Get)))
 
instance HsJSONPB.ToJSON AttributeType_Get where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_Get where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_Get where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_Get",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype AttributeType_Get_Req = AttributeType_Get_Req{attributeType_Get_ReqValue
                                                      :: Hs.Maybe Concept.Attribute_Value}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_Get_Req where
        nameOf _ = (Hs.fromString "AttributeType_Get_Req")
 
instance HsProtobuf.HasDefault AttributeType_Get_Req
 
instance HsProtobuf.Message AttributeType_Get_Req where
        encodeMessage _
          AttributeType_Get_Req{attributeType_Get_ReqValue =
                                  attributeType_Get_ReqValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Attribute_Value)
                      @(HsProtobuf.Nested Concept.Attribute_Value)
                      attributeType_Get_ReqValue))])
        decodeMessage _
          = (Hs.pure AttributeType_Get_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Attribute_Value))
                 @(_ (Hs.Maybe Concept.Attribute_Value))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots (HsProtobuf.Path ("Attribute" Hs.:| ["Value"])))))
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB AttributeType_Get_Req where
        toJSONPB (AttributeType_Get_Req f1)
          = (HsJSONPB.object ["value" .= f1])
        toEncodingPB (AttributeType_Get_Req f1)
          = (HsJSONPB.pairs ["value" .= f1])
 
instance HsJSONPB.FromJSONPB AttributeType_Get_Req where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_Get_Req"
               (\ obj -> (Hs.pure AttributeType_Get_Req) <*> obj .: "value"))
 
instance HsJSONPB.ToJSON AttributeType_Get_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_Get_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_Get_Req where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               attributeType_Get_ReqValue <- declare_value Proxy.Proxy
               let _ = Hs.pure AttributeType_Get_Req <*>
                         HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_Get_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", attributeType_Get_ReqValue)]}})
 
newtype AttributeType_Get_Res = AttributeType_Get_Res{attributeType_Get_ResRes
                                                      :: Hs.Maybe AttributeType_Get_ResRes}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_Get_Res where
        nameOf _ = (Hs.fromString "AttributeType_Get_Res")
 
instance HsProtobuf.HasDefault AttributeType_Get_Res
 
instance HsProtobuf.Message AttributeType_Get_Res where
        encodeMessage _
          AttributeType_Get_Res{attributeType_Get_ResRes =
                                  attributeType_Get_ResRes}
          = (Hs.mconcat
               [case attributeType_Get_ResRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             AttributeType_Get_ResResAttribute y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing)
                                        @(HsProtobuf.Nested Concept.Thing)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure AttributeType_Get_Res) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap AttributeType_Get_ResResAttribute)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing))
                        @(_ (Hs.Maybe Concept.Thing))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AttributeType_Get_Res where
        toJSONPB (AttributeType_Get_Res f1)
          = (HsJSONPB.object
               [(let encodeRes
                       = (case f1 of
                              Hs.Just (AttributeType_Get_ResResAttribute f1)
                                -> (HsJSONPB.pair "attribute" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB (AttributeType_Get_Res f1)
          = (HsJSONPB.pairs
               [(let encodeRes
                       = (case f1 of
                              Hs.Just (AttributeType_Get_ResResAttribute f1)
                                -> (HsJSONPB.pair "attribute" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB AttributeType_Get_Res where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_Get_Res"
               (\ obj ->
                  (Hs.pure AttributeType_Get_Res) <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. AttributeType_Get_ResResAttribute <$>
                                  (HsJSONPB.parseField parseObj "attribute"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON AttributeType_Get_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_Get_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_Get_Res where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               attributeType_Get_ResRes <- declare_res Proxy.Proxy
               let _ = Hs.pure AttributeType_Get_Res <*>
                         HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_Get_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res", attributeType_Get_ResRes)]}})
 
data AttributeType_Get_ResRes = AttributeType_Get_ResResAttribute Concept.Thing
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_Get_ResRes where
        nameOf _ = (Hs.fromString "AttributeType_Get_ResRes")
 
instance HsJSONPB.ToSchema AttributeType_Get_ResRes where
        declareNamedSchema _
          = do let declare_attribute = HsJSONPB.declareSchemaRef
               attributeType_Get_ResResAttribute <- declare_attribute Proxy.Proxy
               let _ = Hs.pure AttributeType_Get_ResResAttribute <*>
                         HsJSONPB.asProxy declare_attribute
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_Get_ResRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("attribute",
                                                         attributeType_Get_ResResAttribute)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data AttributeType_GetOwners = AttributeType_GetOwners{}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_GetOwners where
        nameOf _ = (Hs.fromString "AttributeType_GetOwners")
 
instance HsProtobuf.HasDefault AttributeType_GetOwners
 
instance HsProtobuf.Message AttributeType_GetOwners where
        encodeMessage _ AttributeType_GetOwners{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure AttributeType_GetOwners)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AttributeType_GetOwners where
        toJSONPB (AttributeType_GetOwners) = (HsJSONPB.object [])
        toEncodingPB (AttributeType_GetOwners) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB AttributeType_GetOwners where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_GetOwners"
               (\ obj -> (Hs.pure AttributeType_GetOwners)))
 
instance HsJSONPB.ToJSON AttributeType_GetOwners where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_GetOwners where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_GetOwners where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_GetOwners",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype AttributeType_GetOwners_Req = AttributeType_GetOwners_Req{attributeType_GetOwners_ReqOnlyKey
                                                                  :: Hs.Bool}
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_GetOwners_Req where
        nameOf _ = (Hs.fromString "AttributeType_GetOwners_Req")
 
instance HsProtobuf.HasDefault AttributeType_GetOwners_Req
 
instance HsProtobuf.Message AttributeType_GetOwners_Req where
        encodeMessage _
          AttributeType_GetOwners_Req{attributeType_GetOwners_ReqOnlyKey =
                                        attributeType_GetOwners_ReqOnlyKey}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   attributeType_GetOwners_ReqOnlyKey)])
        decodeMessage _
          = (Hs.pure AttributeType_GetOwners_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "only_key")
                []
                "")]
 
instance HsJSONPB.ToJSONPB AttributeType_GetOwners_Req where
        toJSONPB (AttributeType_GetOwners_Req f1)
          = (HsJSONPB.object ["only_key" .= f1])
        toEncodingPB (AttributeType_GetOwners_Req f1)
          = (HsJSONPB.pairs ["only_key" .= f1])
 
instance HsJSONPB.FromJSONPB AttributeType_GetOwners_Req where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_GetOwners_Req"
               (\ obj ->
                  (Hs.pure AttributeType_GetOwners_Req) <*> obj .: "only_key"))
 
instance HsJSONPB.ToJSON AttributeType_GetOwners_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_GetOwners_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_GetOwners_Req where
        declareNamedSchema _
          = do let declare_only_key = HsJSONPB.declareSchemaRef
               attributeType_GetOwners_ReqOnlyKey <- declare_only_key Proxy.Proxy
               let _ = Hs.pure AttributeType_GetOwners_Req <*>
                         HsJSONPB.asProxy declare_only_key
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_GetOwners_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("only_key",
                                                         attributeType_GetOwners_ReqOnlyKey)]}})
 
newtype AttributeType_GetOwners_ResPart = AttributeType_GetOwners_ResPart{attributeType_GetOwners_ResPartOwners
                                                                          :: Hs.Vector Concept.Type}
                                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_GetOwners_ResPart where
        nameOf _ = (Hs.fromString "AttributeType_GetOwners_ResPart")
 
instance HsProtobuf.HasDefault AttributeType_GetOwners_ResPart
 
instance HsProtobuf.Message AttributeType_GetOwners_ResPart where
        encodeMessage _
          AttributeType_GetOwners_ResPart{attributeType_GetOwners_ResPartOwners
                                            = attributeType_GetOwners_ResPartOwners}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Type)
                      @(HsProtobuf.NestedVec Concept.Type)
                      attributeType_GetOwners_ResPartOwners))])
        decodeMessage _
          = (Hs.pure AttributeType_GetOwners_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Type))
                 @(_ (Hs.Vector Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "owners")
                []
                "")]
 
instance HsJSONPB.ToJSONPB AttributeType_GetOwners_ResPart where
        toJSONPB (AttributeType_GetOwners_ResPart f1)
          = (HsJSONPB.object ["owners" .= f1])
        toEncodingPB (AttributeType_GetOwners_ResPart f1)
          = (HsJSONPB.pairs ["owners" .= f1])
 
instance HsJSONPB.FromJSONPB AttributeType_GetOwners_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_GetOwners_ResPart"
               (\ obj ->
                  (Hs.pure AttributeType_GetOwners_ResPart) <*> obj .: "owners"))
 
instance HsJSONPB.ToJSON AttributeType_GetOwners_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_GetOwners_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_GetOwners_ResPart where
        declareNamedSchema _
          = do let declare_owners = HsJSONPB.declareSchemaRef
               attributeType_GetOwners_ResPartOwners <- declare_owners Proxy.Proxy
               let _ = Hs.pure AttributeType_GetOwners_ResPart <*>
                         HsJSONPB.asProxy declare_owners
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_GetOwners_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("owners",
                                                         attributeType_GetOwners_ResPartOwners)]}})
 
data AttributeType_GetRegex = AttributeType_GetRegex{}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_GetRegex where
        nameOf _ = (Hs.fromString "AttributeType_GetRegex")
 
instance HsProtobuf.HasDefault AttributeType_GetRegex
 
instance HsProtobuf.Message AttributeType_GetRegex where
        encodeMessage _ AttributeType_GetRegex{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure AttributeType_GetRegex)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AttributeType_GetRegex where
        toJSONPB (AttributeType_GetRegex) = (HsJSONPB.object [])
        toEncodingPB (AttributeType_GetRegex) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB AttributeType_GetRegex where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_GetRegex"
               (\ obj -> (Hs.pure AttributeType_GetRegex)))
 
instance HsJSONPB.ToJSON AttributeType_GetRegex where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_GetRegex where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_GetRegex where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_GetRegex",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data AttributeType_GetRegex_Req = AttributeType_GetRegex_Req{}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_GetRegex_Req where
        nameOf _ = (Hs.fromString "AttributeType_GetRegex_Req")
 
instance HsProtobuf.HasDefault AttributeType_GetRegex_Req
 
instance HsProtobuf.Message AttributeType_GetRegex_Req where
        encodeMessage _ AttributeType_GetRegex_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure AttributeType_GetRegex_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AttributeType_GetRegex_Req where
        toJSONPB (AttributeType_GetRegex_Req) = (HsJSONPB.object [])
        toEncodingPB (AttributeType_GetRegex_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB AttributeType_GetRegex_Req where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_GetRegex_Req"
               (\ obj -> (Hs.pure AttributeType_GetRegex_Req)))
 
instance HsJSONPB.ToJSON AttributeType_GetRegex_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_GetRegex_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_GetRegex_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_GetRegex_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype AttributeType_GetRegex_Res = AttributeType_GetRegex_Res{attributeType_GetRegex_ResRegex
                                                                :: Hs.Text}
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_GetRegex_Res where
        nameOf _ = (Hs.fromString "AttributeType_GetRegex_Res")
 
instance HsProtobuf.HasDefault AttributeType_GetRegex_Res
 
instance HsProtobuf.Message AttributeType_GetRegex_Res where
        encodeMessage _
          AttributeType_GetRegex_Res{attributeType_GetRegex_ResRegex =
                                       attributeType_GetRegex_ResRegex}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   attributeType_GetRegex_ResRegex)])
        decodeMessage _
          = (Hs.pure AttributeType_GetRegex_Res) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "regex")
                []
                "")]
 
instance HsJSONPB.ToJSONPB AttributeType_GetRegex_Res where
        toJSONPB (AttributeType_GetRegex_Res f1)
          = (HsJSONPB.object ["regex" .= f1])
        toEncodingPB (AttributeType_GetRegex_Res f1)
          = (HsJSONPB.pairs ["regex" .= f1])
 
instance HsJSONPB.FromJSONPB AttributeType_GetRegex_Res where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_GetRegex_Res"
               (\ obj -> (Hs.pure AttributeType_GetRegex_Res) <*> obj .: "regex"))
 
instance HsJSONPB.ToJSON AttributeType_GetRegex_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_GetRegex_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_GetRegex_Res where
        declareNamedSchema _
          = do let declare_regex = HsJSONPB.declareSchemaRef
               attributeType_GetRegex_ResRegex <- declare_regex Proxy.Proxy
               let _ = Hs.pure AttributeType_GetRegex_Res <*>
                         HsJSONPB.asProxy declare_regex
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_GetRegex_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("regex",
                                                         attributeType_GetRegex_ResRegex)]}})
 
data AttributeType_SetRegex = AttributeType_SetRegex{}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_SetRegex where
        nameOf _ = (Hs.fromString "AttributeType_SetRegex")
 
instance HsProtobuf.HasDefault AttributeType_SetRegex
 
instance HsProtobuf.Message AttributeType_SetRegex where
        encodeMessage _ AttributeType_SetRegex{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure AttributeType_SetRegex)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AttributeType_SetRegex where
        toJSONPB (AttributeType_SetRegex) = (HsJSONPB.object [])
        toEncodingPB (AttributeType_SetRegex) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB AttributeType_SetRegex where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_SetRegex"
               (\ obj -> (Hs.pure AttributeType_SetRegex)))
 
instance HsJSONPB.ToJSON AttributeType_SetRegex where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_SetRegex where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_SetRegex where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_SetRegex",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype AttributeType_SetRegex_Req = AttributeType_SetRegex_Req{attributeType_SetRegex_ReqRegex
                                                                :: Hs.Text}
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_SetRegex_Req where
        nameOf _ = (Hs.fromString "AttributeType_SetRegex_Req")
 
instance HsProtobuf.HasDefault AttributeType_SetRegex_Req
 
instance HsProtobuf.Message AttributeType_SetRegex_Req where
        encodeMessage _
          AttributeType_SetRegex_Req{attributeType_SetRegex_ReqRegex =
                                       attributeType_SetRegex_ReqRegex}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   attributeType_SetRegex_ReqRegex)])
        decodeMessage _
          = (Hs.pure AttributeType_SetRegex_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "regex")
                []
                "")]
 
instance HsJSONPB.ToJSONPB AttributeType_SetRegex_Req where
        toJSONPB (AttributeType_SetRegex_Req f1)
          = (HsJSONPB.object ["regex" .= f1])
        toEncodingPB (AttributeType_SetRegex_Req f1)
          = (HsJSONPB.pairs ["regex" .= f1])
 
instance HsJSONPB.FromJSONPB AttributeType_SetRegex_Req where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_SetRegex_Req"
               (\ obj -> (Hs.pure AttributeType_SetRegex_Req) <*> obj .: "regex"))
 
instance HsJSONPB.ToJSON AttributeType_SetRegex_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_SetRegex_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_SetRegex_Req where
        declareNamedSchema _
          = do let declare_regex = HsJSONPB.declareSchemaRef
               attributeType_SetRegex_ReqRegex <- declare_regex Proxy.Proxy
               let _ = Hs.pure AttributeType_SetRegex_Req <*>
                         HsJSONPB.asProxy declare_regex
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_SetRegex_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("regex",
                                                         attributeType_SetRegex_ReqRegex)]}})
 
data AttributeType_SetRegex_Res = AttributeType_SetRegex_Res{}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_SetRegex_Res where
        nameOf _ = (Hs.fromString "AttributeType_SetRegex_Res")
 
instance HsProtobuf.HasDefault AttributeType_SetRegex_Res
 
instance HsProtobuf.Message AttributeType_SetRegex_Res where
        encodeMessage _ AttributeType_SetRegex_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure AttributeType_SetRegex_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AttributeType_SetRegex_Res where
        toJSONPB (AttributeType_SetRegex_Res) = (HsJSONPB.object [])
        toEncodingPB (AttributeType_SetRegex_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB AttributeType_SetRegex_Res where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_SetRegex_Res"
               (\ obj -> (Hs.pure AttributeType_SetRegex_Res)))
 
instance HsJSONPB.ToJSON AttributeType_SetRegex_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_SetRegex_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_SetRegex_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_SetRegex_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data AttributeType_GetSubtypes = AttributeType_GetSubtypes{}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_GetSubtypes where
        nameOf _ = (Hs.fromString "AttributeType_GetSubtypes")
 
instance HsProtobuf.HasDefault AttributeType_GetSubtypes
 
instance HsProtobuf.Message AttributeType_GetSubtypes where
        encodeMessage _ AttributeType_GetSubtypes{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure AttributeType_GetSubtypes)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AttributeType_GetSubtypes where
        toJSONPB (AttributeType_GetSubtypes) = (HsJSONPB.object [])
        toEncodingPB (AttributeType_GetSubtypes) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB AttributeType_GetSubtypes where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_GetSubtypes"
               (\ obj -> (Hs.pure AttributeType_GetSubtypes)))
 
instance HsJSONPB.ToJSON AttributeType_GetSubtypes where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_GetSubtypes where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_GetSubtypes where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_GetSubtypes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype AttributeType_GetSubtypes_Req = AttributeType_GetSubtypes_Req{attributeType_GetSubtypes_ReqReq
                                                                      ::
                                                                      Hs.Maybe
                                                                        AttributeType_GetSubtypes_ReqReq}
                                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_GetSubtypes_Req where
        nameOf _ = (Hs.fromString "AttributeType_GetSubtypes_Req")
 
instance HsProtobuf.HasDefault AttributeType_GetSubtypes_Req
 
instance HsProtobuf.Message AttributeType_GetSubtypes_Req where
        encodeMessage _
          AttributeType_GetSubtypes_Req{attributeType_GetSubtypes_ReqReq =
                                          attributeType_GetSubtypes_ReqReq}
          = (Hs.mconcat
               [case attributeType_GetSubtypes_ReqReq of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             AttributeType_GetSubtypes_ReqReqValueType y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (HsProtobuf.ForceEmit y))])
        decodeMessage _
          = (Hs.pure AttributeType_GetSubtypes_Req) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.Just Hs.. AttributeType_GetSubtypes_ReqReqValueType))
                     <*> HsProtobuf.decodeMessageField)])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AttributeType_GetSubtypes_Req where
        toJSONPB (AttributeType_GetSubtypes_Req f1)
          = (HsJSONPB.object
               [(let encodeReq
                       = (case f1 of
                              Hs.Just (AttributeType_GetSubtypes_ReqReqValueType f1)
                                -> (HsJSONPB.pair "value_type" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.objectOrNull [encodeReq] options)) options else
                       encodeReq options)])
        toEncodingPB (AttributeType_GetSubtypes_Req f1)
          = (HsJSONPB.pairs
               [(let encodeReq
                       = (case f1 of
                              Hs.Just (AttributeType_GetSubtypes_ReqReqValueType f1)
                                -> (HsJSONPB.pair "value_type" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.pairsOrNull [encodeReq] options)) options else
                       encodeReq options)])
 
instance HsJSONPB.FromJSONPB AttributeType_GetSubtypes_Req where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_GetSubtypes_Req"
               (\ obj ->
                  (Hs.pure AttributeType_GetSubtypes_Req) <*>
                    (let parseReq parseObj
                           = Hs.msum
                               [Hs.Just Hs.. AttributeType_GetSubtypes_ReqReqValueType <$>
                                  (HsJSONPB.parseField parseObj "value_type"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "req") Hs.>>= (HsJSONPB.withObject "req" parseReq)) <|>
                         (parseReq obj))))
 
instance HsJSONPB.ToJSON AttributeType_GetSubtypes_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_GetSubtypes_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_GetSubtypes_Req where
        declareNamedSchema _
          = do let declare_req = HsJSONPB.declareSchemaRef
               attributeType_GetSubtypes_ReqReq <- declare_req Proxy.Proxy
               let _ = Hs.pure AttributeType_GetSubtypes_Req <*>
                         HsJSONPB.asProxy declare_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_GetSubtypes_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("req",
                                                         attributeType_GetSubtypes_ReqReq)]}})
 
data AttributeType_GetSubtypes_ReqReq = AttributeType_GetSubtypes_ReqReqValueType (HsProtobuf.Enumerated
                                                                                     Concept.AttributeType_ValueType)
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_GetSubtypes_ReqReq where
        nameOf _ = (Hs.fromString "AttributeType_GetSubtypes_ReqReq")
 
instance HsJSONPB.ToSchema AttributeType_GetSubtypes_ReqReq where
        declareNamedSchema _
          = do let declare_value_type = HsJSONPB.declareSchemaRef
               attributeType_GetSubtypes_ReqReqValueType <- declare_value_type
                                                              Proxy.Proxy
               let _ = Hs.pure AttributeType_GetSubtypes_ReqReqValueType <*>
                         HsJSONPB.asProxy declare_value_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_GetSubtypes_ReqReq",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value_type",
                                                         attributeType_GetSubtypes_ReqReqValueType)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype AttributeType_GetSubtypes_ResPart = AttributeType_GetSubtypes_ResPart{attributeType_GetSubtypes_ResPartTypes
                                                                              ::
                                                                              Hs.Vector
                                                                                Concept.Type}
                                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_GetSubtypes_ResPart where
        nameOf _ = (Hs.fromString "AttributeType_GetSubtypes_ResPart")
 
instance HsProtobuf.HasDefault AttributeType_GetSubtypes_ResPart
 
instance HsProtobuf.Message AttributeType_GetSubtypes_ResPart where
        encodeMessage _
          AttributeType_GetSubtypes_ResPart{attributeType_GetSubtypes_ResPartTypes
                                              = attributeType_GetSubtypes_ResPartTypes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Type)
                      @(HsProtobuf.NestedVec Concept.Type)
                      attributeType_GetSubtypes_ResPartTypes))])
        decodeMessage _
          = (Hs.pure AttributeType_GetSubtypes_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Type))
                 @(_ (Hs.Vector Concept.Type))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "types")
                []
                "")]
 
instance HsJSONPB.ToJSONPB AttributeType_GetSubtypes_ResPart where
        toJSONPB (AttributeType_GetSubtypes_ResPart f1)
          = (HsJSONPB.object ["types" .= f1])
        toEncodingPB (AttributeType_GetSubtypes_ResPart f1)
          = (HsJSONPB.pairs ["types" .= f1])
 
instance HsJSONPB.FromJSONPB AttributeType_GetSubtypes_ResPart
         where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_GetSubtypes_ResPart"
               (\ obj ->
                  (Hs.pure AttributeType_GetSubtypes_ResPart) <*> obj .: "types"))
 
instance HsJSONPB.ToJSON AttributeType_GetSubtypes_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_GetSubtypes_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_GetSubtypes_ResPart where
        declareNamedSchema _
          = do let declare_types = HsJSONPB.declareSchemaRef
               attributeType_GetSubtypes_ResPartTypes <- declare_types Proxy.Proxy
               let _ = Hs.pure AttributeType_GetSubtypes_ResPart <*>
                         HsJSONPB.asProxy declare_types
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_GetSubtypes_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("types",
                                                         attributeType_GetSubtypes_ResPartTypes)]}})
 
data AttributeType_GetInstances = AttributeType_GetInstances{}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_GetInstances where
        nameOf _ = (Hs.fromString "AttributeType_GetInstances")
 
instance HsProtobuf.HasDefault AttributeType_GetInstances
 
instance HsProtobuf.Message AttributeType_GetInstances where
        encodeMessage _ AttributeType_GetInstances{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure AttributeType_GetInstances)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AttributeType_GetInstances where
        toJSONPB (AttributeType_GetInstances) = (HsJSONPB.object [])
        toEncodingPB (AttributeType_GetInstances) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB AttributeType_GetInstances where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_GetInstances"
               (\ obj -> (Hs.pure AttributeType_GetInstances)))
 
instance HsJSONPB.ToJSON AttributeType_GetInstances where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_GetInstances where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_GetInstances where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_GetInstances",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype AttributeType_GetInstances_Req = AttributeType_GetInstances_Req{attributeType_GetInstances_ReqReq
                                                                        ::
                                                                        Hs.Maybe
                                                                          AttributeType_GetInstances_ReqReq}
                                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_GetInstances_Req where
        nameOf _ = (Hs.fromString "AttributeType_GetInstances_Req")
 
instance HsProtobuf.HasDefault AttributeType_GetInstances_Req
 
instance HsProtobuf.Message AttributeType_GetInstances_Req where
        encodeMessage _
          AttributeType_GetInstances_Req{attributeType_GetInstances_ReqReq =
                                           attributeType_GetInstances_ReqReq}
          = (Hs.mconcat
               [case attributeType_GetInstances_ReqReq of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             AttributeType_GetInstances_ReqReqValueType y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (HsProtobuf.ForceEmit y))])
        decodeMessage _
          = (Hs.pure AttributeType_GetInstances_Req) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.Just Hs.. AttributeType_GetInstances_ReqReqValueType))
                     <*> HsProtobuf.decodeMessageField)])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB AttributeType_GetInstances_Req where
        toJSONPB (AttributeType_GetInstances_Req f1)
          = (HsJSONPB.object
               [(let encodeReq
                       = (case f1 of
                              Hs.Just (AttributeType_GetInstances_ReqReqValueType f1)
                                -> (HsJSONPB.pair "value_type" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.objectOrNull [encodeReq] options)) options else
                       encodeReq options)])
        toEncodingPB (AttributeType_GetInstances_Req f1)
          = (HsJSONPB.pairs
               [(let encodeReq
                       = (case f1 of
                              Hs.Just (AttributeType_GetInstances_ReqReqValueType f1)
                                -> (HsJSONPB.pair "value_type" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.pairsOrNull [encodeReq] options)) options else
                       encodeReq options)])
 
instance HsJSONPB.FromJSONPB AttributeType_GetInstances_Req where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_GetInstances_Req"
               (\ obj ->
                  (Hs.pure AttributeType_GetInstances_Req) <*>
                    (let parseReq parseObj
                           = Hs.msum
                               [Hs.Just Hs.. AttributeType_GetInstances_ReqReqValueType <$>
                                  (HsJSONPB.parseField parseObj "value_type"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "req") Hs.>>= (HsJSONPB.withObject "req" parseReq)) <|>
                         (parseReq obj))))
 
instance HsJSONPB.ToJSON AttributeType_GetInstances_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_GetInstances_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_GetInstances_Req where
        declareNamedSchema _
          = do let declare_req = HsJSONPB.declareSchemaRef
               attributeType_GetInstances_ReqReq <- declare_req Proxy.Proxy
               let _ = Hs.pure AttributeType_GetInstances_Req <*>
                         HsJSONPB.asProxy declare_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_GetInstances_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("req",
                                                         attributeType_GetInstances_ReqReq)]}})
 
data AttributeType_GetInstances_ReqReq = AttributeType_GetInstances_ReqReqValueType (HsProtobuf.Enumerated
                                                                                       Concept.AttributeType_ValueType)
                                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named AttributeType_GetInstances_ReqReq where
        nameOf _ = (Hs.fromString "AttributeType_GetInstances_ReqReq")
 
instance HsJSONPB.ToSchema AttributeType_GetInstances_ReqReq where
        declareNamedSchema _
          = do let declare_value_type = HsJSONPB.declareSchemaRef
               attributeType_GetInstances_ReqReqValueType <- declare_value_type
                                                               Proxy.Proxy
               let _ = Hs.pure AttributeType_GetInstances_ReqReqValueType <*>
                         HsJSONPB.asProxy declare_value_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_GetInstances_ReqReq",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value_type",
                                                         attributeType_GetInstances_ReqReqValueType)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype AttributeType_GetInstances_ResPart = AttributeType_GetInstances_ResPart{attributeType_GetInstances_ResPartThings
                                                                                ::
                                                                                Hs.Vector
                                                                                  Concept.Thing}
                                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                       Hs.NFData)
 
instance HsProtobuf.Named AttributeType_GetInstances_ResPart where
        nameOf _ = (Hs.fromString "AttributeType_GetInstances_ResPart")
 
instance HsProtobuf.HasDefault AttributeType_GetInstances_ResPart
 
instance HsProtobuf.Message AttributeType_GetInstances_ResPart
         where
        encodeMessage _
          AttributeType_GetInstances_ResPart{attributeType_GetInstances_ResPartThings
                                               = attributeType_GetInstances_ResPartThings}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Concept.Thing)
                      @(HsProtobuf.NestedVec Concept.Thing)
                      attributeType_GetInstances_ResPartThings))])
        decodeMessage _
          = (Hs.pure AttributeType_GetInstances_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Concept.Thing))
                 @(_ (Hs.Vector Concept.Thing))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Thing")))
                (HsProtobuf.Single "things")
                []
                "")]
 
instance HsJSONPB.ToJSONPB AttributeType_GetInstances_ResPart where
        toJSONPB (AttributeType_GetInstances_ResPart f1)
          = (HsJSONPB.object ["things" .= f1])
        toEncodingPB (AttributeType_GetInstances_ResPart f1)
          = (HsJSONPB.pairs ["things" .= f1])
 
instance HsJSONPB.FromJSONPB AttributeType_GetInstances_ResPart
         where
        parseJSONPB
          = (HsJSONPB.withObject "AttributeType_GetInstances_ResPart"
               (\ obj ->
                  (Hs.pure AttributeType_GetInstances_ResPart) <*> obj .: "things"))
 
instance HsJSONPB.ToJSON AttributeType_GetInstances_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON AttributeType_GetInstances_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema AttributeType_GetInstances_ResPart where
        declareNamedSchema _
          = do let declare_things = HsJSONPB.declareSchemaRef
               attributeType_GetInstances_ResPartThings <- declare_things
                                                             Proxy.Proxy
               let _ = Hs.pure AttributeType_GetInstances_ResPart <*>
                         HsJSONPB.asProxy declare_things
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "AttributeType_GetInstances_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("things",
                                                         attributeType_GetInstances_ResPartThings)]}})