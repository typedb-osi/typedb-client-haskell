{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Query where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Answer
import qualified Logic
import qualified Options
 
data QueryManager = QueryManager{}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager where
        nameOf _ = (Hs.fromString "QueryManager")
 
instance HsProtobuf.HasDefault QueryManager
 
instance HsProtobuf.Message QueryManager where
        encodeMessage _ QueryManager{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure QueryManager)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager where
        toJSONPB (QueryManager) = (HsJSONPB.object [])
        toEncodingPB (QueryManager) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB QueryManager where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager"
               (\ obj -> (Hs.pure QueryManager)))
 
instance HsJSONPB.ToJSON QueryManager where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data QueryManager_Req = QueryManager_Req{queryManager_ReqOptions ::
                                         Hs.Maybe Options.Options,
                                         queryManager_ReqReq :: Hs.Maybe QueryManager_ReqReq}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Req where
        nameOf _ = (Hs.fromString "QueryManager_Req")
 
instance HsProtobuf.HasDefault QueryManager_Req
 
instance HsProtobuf.Message QueryManager_Req where
        encodeMessage _
          QueryManager_Req{queryManager_ReqOptions = queryManager_ReqOptions,
                           queryManager_ReqReq = queryManager_ReqReq}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Options.Options)
                      @(HsProtobuf.Nested Options.Options)
                      queryManager_ReqOptions)),
                case queryManager_ReqReq of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             QueryManager_ReqReqDefineReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 100)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Define_Req)
                                        @(HsProtobuf.Nested Query.QueryManager_Define_Req)
                                        (Hs.Just y)))
                             QueryManager_ReqReqUndefineReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 101)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Undefine_Req)
                                        @(HsProtobuf.Nested Query.QueryManager_Undefine_Req)
                                        (Hs.Just y)))
                             QueryManager_ReqReqMatchReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 102)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Match_Req)
                                        @(HsProtobuf.Nested Query.QueryManager_Match_Req)
                                        (Hs.Just y)))
                             QueryManager_ReqReqMatchAggregateReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 103)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_MatchAggregate_Req)
                                        @(HsProtobuf.Nested Query.QueryManager_MatchAggregate_Req)
                                        (Hs.Just y)))
                             QueryManager_ReqReqMatchGroupReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 104)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_MatchGroup_Req)
                                        @(HsProtobuf.Nested Query.QueryManager_MatchGroup_Req)
                                        (Hs.Just y)))
                             QueryManager_ReqReqMatchGroupAggregateReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 105)
                                     (Hs.coerce
                                        @(Hs.Maybe Query.QueryManager_MatchGroupAggregate_Req)
                                        @(HsProtobuf.Nested Query.QueryManager_MatchGroupAggregate_Req)
                                        (Hs.Just y)))
                             QueryManager_ReqReqInsertReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 106)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Insert_Req)
                                        @(HsProtobuf.Nested Query.QueryManager_Insert_Req)
                                        (Hs.Just y)))
                             QueryManager_ReqReqDeleteReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 107)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Delete_Req)
                                        @(HsProtobuf.Nested Query.QueryManager_Delete_Req)
                                        (Hs.Just y)))
                             QueryManager_ReqReqUpdateReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 108)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Update_Req)
                                        @(HsProtobuf.Nested Query.QueryManager_Update_Req)
                                        (Hs.Just y)))
                             QueryManager_ReqReqExplainReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 109)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Explain_Req)
                                        @(HsProtobuf.Nested Query.QueryManager_Explain_Req)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure QueryManager_Req) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Options.Options))
                 @(_ (Hs.Maybe Options.Options))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 100),
                   (Hs.pure (Hs.fmap QueryManager_ReqReqDefineReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Query.QueryManager_Define_Req))
                        @(_ (Hs.Maybe Query.QueryManager_Define_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 101),
                   (Hs.pure (Hs.fmap QueryManager_ReqReqUndefineReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Query.QueryManager_Undefine_Req))
                        @(_ (Hs.Maybe Query.QueryManager_Undefine_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 102),
                   (Hs.pure (Hs.fmap QueryManager_ReqReqMatchReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Query.QueryManager_Match_Req))
                        @(_ (Hs.Maybe Query.QueryManager_Match_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 103),
                   (Hs.pure (Hs.fmap QueryManager_ReqReqMatchAggregateReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Query.QueryManager_MatchAggregate_Req))
                        @(_ (Hs.Maybe Query.QueryManager_MatchAggregate_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 104),
                   (Hs.pure (Hs.fmap QueryManager_ReqReqMatchGroupReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Query.QueryManager_MatchGroup_Req))
                        @(_ (Hs.Maybe Query.QueryManager_MatchGroup_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 105),
                   (Hs.pure (Hs.fmap QueryManager_ReqReqMatchGroupAggregateReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Query.QueryManager_MatchGroupAggregate_Req))
                        @(_ (Hs.Maybe Query.QueryManager_MatchGroupAggregate_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 106),
                   (Hs.pure (Hs.fmap QueryManager_ReqReqInsertReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Query.QueryManager_Insert_Req))
                        @(_ (Hs.Maybe Query.QueryManager_Insert_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 107),
                   (Hs.pure (Hs.fmap QueryManager_ReqReqDeleteReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Query.QueryManager_Delete_Req))
                        @(_ (Hs.Maybe Query.QueryManager_Delete_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 108),
                   (Hs.pure (Hs.fmap QueryManager_ReqReqUpdateReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Query.QueryManager_Update_Req))
                        @(_ (Hs.Maybe Query.QueryManager_Update_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 109),
                   (Hs.pure (Hs.fmap QueryManager_ReqReqExplainReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Query.QueryManager_Explain_Req))
                        @(_ (Hs.Maybe Query.QueryManager_Explain_Req))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Options")))
                (HsProtobuf.Single "options")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_Req where
        toJSONPB
          (QueryManager_Req f1
             f100_or_f101_or_f102_or_f103_or_f104_or_f105_or_f106_or_f107_or_f108_or_f109)
          = (HsJSONPB.object
               ["options" .= f1,
                (let encodeReq
                       = (case
                            f100_or_f101_or_f102_or_f103_or_f104_or_f105_or_f106_or_f107_or_f108_or_f109
                            of
                              Hs.Just (QueryManager_ReqReqDefineReq f100)
                                -> (HsJSONPB.pair "define_req" f100)
                              Hs.Just (QueryManager_ReqReqUndefineReq f101)
                                -> (HsJSONPB.pair "undefine_req" f101)
                              Hs.Just (QueryManager_ReqReqMatchReq f102)
                                -> (HsJSONPB.pair "match_req" f102)
                              Hs.Just (QueryManager_ReqReqMatchAggregateReq f103)
                                -> (HsJSONPB.pair "match_aggregate_req" f103)
                              Hs.Just (QueryManager_ReqReqMatchGroupReq f104)
                                -> (HsJSONPB.pair "match_group_req" f104)
                              Hs.Just (QueryManager_ReqReqMatchGroupAggregateReq f105)
                                -> (HsJSONPB.pair "match_group_aggregate_req" f105)
                              Hs.Just (QueryManager_ReqReqInsertReq f106)
                                -> (HsJSONPB.pair "insert_req" f106)
                              Hs.Just (QueryManager_ReqReqDeleteReq f107)
                                -> (HsJSONPB.pair "delete_req" f107)
                              Hs.Just (QueryManager_ReqReqUpdateReq f108)
                                -> (HsJSONPB.pair "update_req" f108)
                              Hs.Just (QueryManager_ReqReqExplainReq f109)
                                -> (HsJSONPB.pair "explain_req" f109)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.objectOrNull [encodeReq] options)) options else
                       encodeReq options)])
        toEncodingPB
          (QueryManager_Req f1
             f100_or_f101_or_f102_or_f103_or_f104_or_f105_or_f106_or_f107_or_f108_or_f109)
          = (HsJSONPB.pairs
               ["options" .= f1,
                (let encodeReq
                       = (case
                            f100_or_f101_or_f102_or_f103_or_f104_or_f105_or_f106_or_f107_or_f108_or_f109
                            of
                              Hs.Just (QueryManager_ReqReqDefineReq f100)
                                -> (HsJSONPB.pair "define_req" f100)
                              Hs.Just (QueryManager_ReqReqUndefineReq f101)
                                -> (HsJSONPB.pair "undefine_req" f101)
                              Hs.Just (QueryManager_ReqReqMatchReq f102)
                                -> (HsJSONPB.pair "match_req" f102)
                              Hs.Just (QueryManager_ReqReqMatchAggregateReq f103)
                                -> (HsJSONPB.pair "match_aggregate_req" f103)
                              Hs.Just (QueryManager_ReqReqMatchGroupReq f104)
                                -> (HsJSONPB.pair "match_group_req" f104)
                              Hs.Just (QueryManager_ReqReqMatchGroupAggregateReq f105)
                                -> (HsJSONPB.pair "match_group_aggregate_req" f105)
                              Hs.Just (QueryManager_ReqReqInsertReq f106)
                                -> (HsJSONPB.pair "insert_req" f106)
                              Hs.Just (QueryManager_ReqReqDeleteReq f107)
                                -> (HsJSONPB.pair "delete_req" f107)
                              Hs.Just (QueryManager_ReqReqUpdateReq f108)
                                -> (HsJSONPB.pair "update_req" f108)
                              Hs.Just (QueryManager_ReqReqExplainReq f109)
                                -> (HsJSONPB.pair "explain_req" f109)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.pairsOrNull [encodeReq] options)) options else
                       encodeReq options)])
 
instance HsJSONPB.FromJSONPB QueryManager_Req where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Req"
               (\ obj ->
                  (Hs.pure QueryManager_Req) <*> obj .: "options" <*>
                    (let parseReq parseObj
                           = Hs.msum
                               [Hs.Just Hs.. QueryManager_ReqReqDefineReq <$>
                                  (HsJSONPB.parseField parseObj "define_req"),
                                Hs.Just Hs.. QueryManager_ReqReqUndefineReq <$>
                                  (HsJSONPB.parseField parseObj "undefine_req"),
                                Hs.Just Hs.. QueryManager_ReqReqMatchReq <$>
                                  (HsJSONPB.parseField parseObj "match_req"),
                                Hs.Just Hs.. QueryManager_ReqReqMatchAggregateReq <$>
                                  (HsJSONPB.parseField parseObj "match_aggregate_req"),
                                Hs.Just Hs.. QueryManager_ReqReqMatchGroupReq <$>
                                  (HsJSONPB.parseField parseObj "match_group_req"),
                                Hs.Just Hs.. QueryManager_ReqReqMatchGroupAggregateReq <$>
                                  (HsJSONPB.parseField parseObj "match_group_aggregate_req"),
                                Hs.Just Hs.. QueryManager_ReqReqInsertReq <$>
                                  (HsJSONPB.parseField parseObj "insert_req"),
                                Hs.Just Hs.. QueryManager_ReqReqDeleteReq <$>
                                  (HsJSONPB.parseField parseObj "delete_req"),
                                Hs.Just Hs.. QueryManager_ReqReqUpdateReq <$>
                                  (HsJSONPB.parseField parseObj "update_req"),
                                Hs.Just Hs.. QueryManager_ReqReqExplainReq <$>
                                  (HsJSONPB.parseField parseObj "explain_req"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "req") Hs.>>= (HsJSONPB.withObject "req" parseReq)) <|>
                         (parseReq obj))))
 
instance HsJSONPB.ToJSON QueryManager_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Req where
        declareNamedSchema _
          = do let declare_options = HsJSONPB.declareSchemaRef
               queryManager_ReqOptions <- declare_options Proxy.Proxy
               let declare_req = HsJSONPB.declareSchemaRef
               queryManager_ReqReq <- declare_req Proxy.Proxy
               let _ = Hs.pure QueryManager_Req <*>
                         HsJSONPB.asProxy declare_options
                         <*> HsJSONPB.asProxy declare_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("options", queryManager_ReqOptions),
                                                        ("req", queryManager_ReqReq)]}})
 
data QueryManager_ReqReq = QueryManager_ReqReqDefineReq Query.QueryManager_Define_Req
                         | QueryManager_ReqReqUndefineReq Query.QueryManager_Undefine_Req
                         | QueryManager_ReqReqMatchReq Query.QueryManager_Match_Req
                         | QueryManager_ReqReqMatchAggregateReq Query.QueryManager_MatchAggregate_Req
                         | QueryManager_ReqReqMatchGroupReq Query.QueryManager_MatchGroup_Req
                         | QueryManager_ReqReqMatchGroupAggregateReq Query.QueryManager_MatchGroupAggregate_Req
                         | QueryManager_ReqReqInsertReq Query.QueryManager_Insert_Req
                         | QueryManager_ReqReqDeleteReq Query.QueryManager_Delete_Req
                         | QueryManager_ReqReqUpdateReq Query.QueryManager_Update_Req
                         | QueryManager_ReqReqExplainReq Query.QueryManager_Explain_Req
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_ReqReq where
        nameOf _ = (Hs.fromString "QueryManager_ReqReq")
 
instance HsJSONPB.ToSchema QueryManager_ReqReq where
        declareNamedSchema _
          = do let declare_define_req = HsJSONPB.declareSchemaRef
               queryManager_ReqReqDefineReq <- declare_define_req Proxy.Proxy
               let _ = Hs.pure QueryManager_ReqReqDefineReq <*>
                         HsJSONPB.asProxy declare_define_req
               let declare_undefine_req = HsJSONPB.declareSchemaRef
               queryManager_ReqReqUndefineReq <- declare_undefine_req Proxy.Proxy
               let _ = Hs.pure QueryManager_ReqReqUndefineReq <*>
                         HsJSONPB.asProxy declare_undefine_req
               let declare_match_req = HsJSONPB.declareSchemaRef
               queryManager_ReqReqMatchReq <- declare_match_req Proxy.Proxy
               let _ = Hs.pure QueryManager_ReqReqMatchReq <*>
                         HsJSONPB.asProxy declare_match_req
               let declare_match_aggregate_req = HsJSONPB.declareSchemaRef
               queryManager_ReqReqMatchAggregateReq <- declare_match_aggregate_req
                                                         Proxy.Proxy
               let _ = Hs.pure QueryManager_ReqReqMatchAggregateReq <*>
                         HsJSONPB.asProxy declare_match_aggregate_req
               let declare_match_group_req = HsJSONPB.declareSchemaRef
               queryManager_ReqReqMatchGroupReq <- declare_match_group_req
                                                     Proxy.Proxy
               let _ = Hs.pure QueryManager_ReqReqMatchGroupReq <*>
                         HsJSONPB.asProxy declare_match_group_req
               let declare_match_group_aggregate_req = HsJSONPB.declareSchemaRef
               queryManager_ReqReqMatchGroupAggregateReq <- declare_match_group_aggregate_req
                                                              Proxy.Proxy
               let _ = Hs.pure QueryManager_ReqReqMatchGroupAggregateReq <*>
                         HsJSONPB.asProxy declare_match_group_aggregate_req
               let declare_insert_req = HsJSONPB.declareSchemaRef
               queryManager_ReqReqInsertReq <- declare_insert_req Proxy.Proxy
               let _ = Hs.pure QueryManager_ReqReqInsertReq <*>
                         HsJSONPB.asProxy declare_insert_req
               let declare_delete_req = HsJSONPB.declareSchemaRef
               queryManager_ReqReqDeleteReq <- declare_delete_req Proxy.Proxy
               let _ = Hs.pure QueryManager_ReqReqDeleteReq <*>
                         HsJSONPB.asProxy declare_delete_req
               let declare_update_req = HsJSONPB.declareSchemaRef
               queryManager_ReqReqUpdateReq <- declare_update_req Proxy.Proxy
               let _ = Hs.pure QueryManager_ReqReqUpdateReq <*>
                         HsJSONPB.asProxy declare_update_req
               let declare_explain_req = HsJSONPB.declareSchemaRef
               queryManager_ReqReqExplainReq <- declare_explain_req Proxy.Proxy
               let _ = Hs.pure QueryManager_ReqReqExplainReq <*>
                         HsJSONPB.asProxy declare_explain_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_ReqReq",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("define_req",
                                                         queryManager_ReqReqDefineReq),
                                                        ("undefine_req",
                                                         queryManager_ReqReqUndefineReq),
                                                        ("match_req", queryManager_ReqReqMatchReq),
                                                        ("match_aggregate_req",
                                                         queryManager_ReqReqMatchAggregateReq),
                                                        ("match_group_req",
                                                         queryManager_ReqReqMatchGroupReq),
                                                        ("match_group_aggregate_req",
                                                         queryManager_ReqReqMatchGroupAggregateReq),
                                                        ("insert_req",
                                                         queryManager_ReqReqInsertReq),
                                                        ("delete_req",
                                                         queryManager_ReqReqDeleteReq),
                                                        ("update_req",
                                                         queryManager_ReqReqUpdateReq),
                                                        ("explain_req",
                                                         queryManager_ReqReqExplainReq)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype QueryManager_Res = QueryManager_Res{queryManager_ResRes ::
                                            Hs.Maybe QueryManager_ResRes}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Res where
        nameOf _ = (Hs.fromString "QueryManager_Res")
 
instance HsProtobuf.HasDefault QueryManager_Res
 
instance HsProtobuf.Message QueryManager_Res where
        encodeMessage _
          QueryManager_Res{queryManager_ResRes = queryManager_ResRes}
          = (Hs.mconcat
               [case queryManager_ResRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             QueryManager_ResResDefineRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 100)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Define_Res)
                                        @(HsProtobuf.Nested Query.QueryManager_Define_Res)
                                        (Hs.Just y)))
                             QueryManager_ResResUndefineRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 101)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Undefine_Res)
                                        @(HsProtobuf.Nested Query.QueryManager_Undefine_Res)
                                        (Hs.Just y)))
                             QueryManager_ResResMatchAggregateRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 102)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_MatchAggregate_Res)
                                        @(HsProtobuf.Nested Query.QueryManager_MatchAggregate_Res)
                                        (Hs.Just y)))
                             QueryManager_ResResDeleteRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 104)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Delete_Res)
                                        @(HsProtobuf.Nested Query.QueryManager_Delete_Res)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure QueryManager_Res) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 100),
                   (Hs.pure (Hs.fmap QueryManager_ResResDefineRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Query.QueryManager_Define_Res))
                        @(_ (Hs.Maybe Query.QueryManager_Define_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 101),
                   (Hs.pure (Hs.fmap QueryManager_ResResUndefineRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Query.QueryManager_Undefine_Res))
                        @(_ (Hs.Maybe Query.QueryManager_Undefine_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 102),
                   (Hs.pure (Hs.fmap QueryManager_ResResMatchAggregateRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Query.QueryManager_MatchAggregate_Res))
                        @(_ (Hs.Maybe Query.QueryManager_MatchAggregate_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 104),
                   (Hs.pure (Hs.fmap QueryManager_ResResDeleteRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Query.QueryManager_Delete_Res))
                        @(_ (Hs.Maybe Query.QueryManager_Delete_Res))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_Res where
        toJSONPB (QueryManager_Res f100_or_f101_or_f102_or_f104)
          = (HsJSONPB.object
               [(let encodeRes
                       = (case f100_or_f101_or_f102_or_f104 of
                              Hs.Just (QueryManager_ResResDefineRes f100)
                                -> (HsJSONPB.pair "define_res" f100)
                              Hs.Just (QueryManager_ResResUndefineRes f101)
                                -> (HsJSONPB.pair "undefine_res" f101)
                              Hs.Just (QueryManager_ResResMatchAggregateRes f102)
                                -> (HsJSONPB.pair "match_aggregate_res" f102)
                              Hs.Just (QueryManager_ResResDeleteRes f104)
                                -> (HsJSONPB.pair "delete_res" f104)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB (QueryManager_Res f100_or_f101_or_f102_or_f104)
          = (HsJSONPB.pairs
               [(let encodeRes
                       = (case f100_or_f101_or_f102_or_f104 of
                              Hs.Just (QueryManager_ResResDefineRes f100)
                                -> (HsJSONPB.pair "define_res" f100)
                              Hs.Just (QueryManager_ResResUndefineRes f101)
                                -> (HsJSONPB.pair "undefine_res" f101)
                              Hs.Just (QueryManager_ResResMatchAggregateRes f102)
                                -> (HsJSONPB.pair "match_aggregate_res" f102)
                              Hs.Just (QueryManager_ResResDeleteRes f104)
                                -> (HsJSONPB.pair "delete_res" f104)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB QueryManager_Res where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Res"
               (\ obj ->
                  (Hs.pure QueryManager_Res) <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. QueryManager_ResResDefineRes <$>
                                  (HsJSONPB.parseField parseObj "define_res"),
                                Hs.Just Hs.. QueryManager_ResResUndefineRes <$>
                                  (HsJSONPB.parseField parseObj "undefine_res"),
                                Hs.Just Hs.. QueryManager_ResResMatchAggregateRes <$>
                                  (HsJSONPB.parseField parseObj "match_aggregate_res"),
                                Hs.Just Hs.. QueryManager_ResResDeleteRes <$>
                                  (HsJSONPB.parseField parseObj "delete_res"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON QueryManager_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Res where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               queryManager_ResRes <- declare_res Proxy.Proxy
               let _ = Hs.pure QueryManager_Res <*> HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res", queryManager_ResRes)]}})
 
data QueryManager_ResRes = QueryManager_ResResDefineRes Query.QueryManager_Define_Res
                         | QueryManager_ResResUndefineRes Query.QueryManager_Undefine_Res
                         | QueryManager_ResResMatchAggregateRes Query.QueryManager_MatchAggregate_Res
                         | QueryManager_ResResDeleteRes Query.QueryManager_Delete_Res
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_ResRes where
        nameOf _ = (Hs.fromString "QueryManager_ResRes")
 
instance HsJSONPB.ToSchema QueryManager_ResRes where
        declareNamedSchema _
          = do let declare_define_res = HsJSONPB.declareSchemaRef
               queryManager_ResResDefineRes <- declare_define_res Proxy.Proxy
               let _ = Hs.pure QueryManager_ResResDefineRes <*>
                         HsJSONPB.asProxy declare_define_res
               let declare_undefine_res = HsJSONPB.declareSchemaRef
               queryManager_ResResUndefineRes <- declare_undefine_res Proxy.Proxy
               let _ = Hs.pure QueryManager_ResResUndefineRes <*>
                         HsJSONPB.asProxy declare_undefine_res
               let declare_match_aggregate_res = HsJSONPB.declareSchemaRef
               queryManager_ResResMatchAggregateRes <- declare_match_aggregate_res
                                                         Proxy.Proxy
               let _ = Hs.pure QueryManager_ResResMatchAggregateRes <*>
                         HsJSONPB.asProxy declare_match_aggregate_res
               let declare_delete_res = HsJSONPB.declareSchemaRef
               queryManager_ResResDeleteRes <- declare_delete_res Proxy.Proxy
               let _ = Hs.pure QueryManager_ResResDeleteRes <*>
                         HsJSONPB.asProxy declare_delete_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_ResRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("define_res",
                                                         queryManager_ResResDefineRes),
                                                        ("undefine_res",
                                                         queryManager_ResResUndefineRes),
                                                        ("match_aggregate_res",
                                                         queryManager_ResResMatchAggregateRes),
                                                        ("delete_res",
                                                         queryManager_ResResDeleteRes)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype QueryManager_ResPart = QueryManager_ResPart{queryManager_ResPartRes
                                                    :: Hs.Maybe QueryManager_ResPartRes}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_ResPart where
        nameOf _ = (Hs.fromString "QueryManager_ResPart")
 
instance HsProtobuf.HasDefault QueryManager_ResPart
 
instance HsProtobuf.Message QueryManager_ResPart where
        encodeMessage _
          QueryManager_ResPart{queryManager_ResPartRes =
                                 queryManager_ResPartRes}
          = (Hs.mconcat
               [case queryManager_ResPartRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             QueryManager_ResPartResMatchResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 100)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Match_ResPart)
                                        @(HsProtobuf.Nested Query.QueryManager_Match_ResPart)
                                        (Hs.Just y)))
                             QueryManager_ResPartResMatchGroupResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 101)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_MatchGroup_ResPart)
                                        @(HsProtobuf.Nested Query.QueryManager_MatchGroup_ResPart)
                                        (Hs.Just y)))
                             QueryManager_ResPartResMatchGroupAggregateResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 102)
                                     (Hs.coerce
                                        @(Hs.Maybe Query.QueryManager_MatchGroupAggregate_ResPart)
                                        @(HsProtobuf.Nested Query.QueryManager_MatchGroupAggregate_ResPart)
                                        (Hs.Just y)))
                             QueryManager_ResPartResInsertResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 103)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Insert_ResPart)
                                        @(HsProtobuf.Nested Query.QueryManager_Insert_ResPart)
                                        (Hs.Just y)))
                             QueryManager_ResPartResUpdateResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 104)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Update_ResPart)
                                        @(HsProtobuf.Nested Query.QueryManager_Update_ResPart)
                                        (Hs.Just y)))
                             QueryManager_ResPartResExplainResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 105)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Explain_ResPart)
                                        @(HsProtobuf.Nested Query.QueryManager_Explain_ResPart)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure QueryManager_ResPart) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 100),
                   (Hs.pure (Hs.fmap QueryManager_ResPartResMatchResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Query.QueryManager_Match_ResPart))
                        @(_ (Hs.Maybe Query.QueryManager_Match_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 101),
                   (Hs.pure (Hs.fmap QueryManager_ResPartResMatchGroupResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Query.QueryManager_MatchGroup_ResPart))
                        @(_ (Hs.Maybe Query.QueryManager_MatchGroup_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 102),
                   (Hs.pure
                      (Hs.fmap QueryManager_ResPartResMatchGroupAggregateResPart))
                     <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Query.QueryManager_MatchGroupAggregate_ResPart))
                        @(_ (Hs.Maybe Query.QueryManager_MatchGroupAggregate_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 103),
                   (Hs.pure (Hs.fmap QueryManager_ResPartResInsertResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Query.QueryManager_Insert_ResPart))
                        @(_ (Hs.Maybe Query.QueryManager_Insert_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 104),
                   (Hs.pure (Hs.fmap QueryManager_ResPartResUpdateResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Query.QueryManager_Update_ResPart))
                        @(_ (Hs.Maybe Query.QueryManager_Update_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 105),
                   (Hs.pure (Hs.fmap QueryManager_ResPartResExplainResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Query.QueryManager_Explain_ResPart))
                        @(_ (Hs.Maybe Query.QueryManager_Explain_ResPart))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_ResPart where
        toJSONPB
          (QueryManager_ResPart f100_or_f101_or_f102_or_f103_or_f104_or_f105)
          = (HsJSONPB.object
               [(let encodeRes
                       = (case f100_or_f101_or_f102_or_f103_or_f104_or_f105 of
                              Hs.Just (QueryManager_ResPartResMatchResPart f100)
                                -> (HsJSONPB.pair "match_res_part" f100)
                              Hs.Just (QueryManager_ResPartResMatchGroupResPart f101)
                                -> (HsJSONPB.pair "match_group_res_part" f101)
                              Hs.Just (QueryManager_ResPartResMatchGroupAggregateResPart f102)
                                -> (HsJSONPB.pair "match_group_aggregate_res_part" f102)
                              Hs.Just (QueryManager_ResPartResInsertResPart f103)
                                -> (HsJSONPB.pair "insert_res_part" f103)
                              Hs.Just (QueryManager_ResPartResUpdateResPart f104)
                                -> (HsJSONPB.pair "update_res_part" f104)
                              Hs.Just (QueryManager_ResPartResExplainResPart f105)
                                -> (HsJSONPB.pair "explain_res_part" f105)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB
          (QueryManager_ResPart f100_or_f101_or_f102_or_f103_or_f104_or_f105)
          = (HsJSONPB.pairs
               [(let encodeRes
                       = (case f100_or_f101_or_f102_or_f103_or_f104_or_f105 of
                              Hs.Just (QueryManager_ResPartResMatchResPart f100)
                                -> (HsJSONPB.pair "match_res_part" f100)
                              Hs.Just (QueryManager_ResPartResMatchGroupResPart f101)
                                -> (HsJSONPB.pair "match_group_res_part" f101)
                              Hs.Just (QueryManager_ResPartResMatchGroupAggregateResPart f102)
                                -> (HsJSONPB.pair "match_group_aggregate_res_part" f102)
                              Hs.Just (QueryManager_ResPartResInsertResPart f103)
                                -> (HsJSONPB.pair "insert_res_part" f103)
                              Hs.Just (QueryManager_ResPartResUpdateResPart f104)
                                -> (HsJSONPB.pair "update_res_part" f104)
                              Hs.Just (QueryManager_ResPartResExplainResPart f105)
                                -> (HsJSONPB.pair "explain_res_part" f105)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB QueryManager_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_ResPart"
               (\ obj ->
                  (Hs.pure QueryManager_ResPart) <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. QueryManager_ResPartResMatchResPart <$>
                                  (HsJSONPB.parseField parseObj "match_res_part"),
                                Hs.Just Hs.. QueryManager_ResPartResMatchGroupResPart <$>
                                  (HsJSONPB.parseField parseObj "match_group_res_part"),
                                Hs.Just Hs.. QueryManager_ResPartResMatchGroupAggregateResPart <$>
                                  (HsJSONPB.parseField parseObj "match_group_aggregate_res_part"),
                                Hs.Just Hs.. QueryManager_ResPartResInsertResPart <$>
                                  (HsJSONPB.parseField parseObj "insert_res_part"),
                                Hs.Just Hs.. QueryManager_ResPartResUpdateResPart <$>
                                  (HsJSONPB.parseField parseObj "update_res_part"),
                                Hs.Just Hs.. QueryManager_ResPartResExplainResPart <$>
                                  (HsJSONPB.parseField parseObj "explain_res_part"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON QueryManager_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_ResPart where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               queryManager_ResPartRes <- declare_res Proxy.Proxy
               let _ = Hs.pure QueryManager_ResPart <*>
                         HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res", queryManager_ResPartRes)]}})
 
data QueryManager_ResPartRes = QueryManager_ResPartResMatchResPart Query.QueryManager_Match_ResPart
                             | QueryManager_ResPartResMatchGroupResPart Query.QueryManager_MatchGroup_ResPart
                             | QueryManager_ResPartResMatchGroupAggregateResPart Query.QueryManager_MatchGroupAggregate_ResPart
                             | QueryManager_ResPartResInsertResPart Query.QueryManager_Insert_ResPart
                             | QueryManager_ResPartResUpdateResPart Query.QueryManager_Update_ResPart
                             | QueryManager_ResPartResExplainResPart Query.QueryManager_Explain_ResPart
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_ResPartRes where
        nameOf _ = (Hs.fromString "QueryManager_ResPartRes")
 
instance HsJSONPB.ToSchema QueryManager_ResPartRes where
        declareNamedSchema _
          = do let declare_match_res_part = HsJSONPB.declareSchemaRef
               queryManager_ResPartResMatchResPart <- declare_match_res_part
                                                        Proxy.Proxy
               let _ = Hs.pure QueryManager_ResPartResMatchResPart <*>
                         HsJSONPB.asProxy declare_match_res_part
               let declare_match_group_res_part = HsJSONPB.declareSchemaRef
               queryManager_ResPartResMatchGroupResPart <- declare_match_group_res_part
                                                             Proxy.Proxy
               let _ = Hs.pure QueryManager_ResPartResMatchGroupResPart <*>
                         HsJSONPB.asProxy declare_match_group_res_part
               let declare_match_group_aggregate_res_part
                     = HsJSONPB.declareSchemaRef
               queryManager_ResPartResMatchGroupAggregateResPart <- declare_match_group_aggregate_res_part
                                                                      Proxy.Proxy
               let _ = Hs.pure QueryManager_ResPartResMatchGroupAggregateResPart
                         <*> HsJSONPB.asProxy declare_match_group_aggregate_res_part
               let declare_insert_res_part = HsJSONPB.declareSchemaRef
               queryManager_ResPartResInsertResPart <- declare_insert_res_part
                                                         Proxy.Proxy
               let _ = Hs.pure QueryManager_ResPartResInsertResPart <*>
                         HsJSONPB.asProxy declare_insert_res_part
               let declare_update_res_part = HsJSONPB.declareSchemaRef
               queryManager_ResPartResUpdateResPart <- declare_update_res_part
                                                         Proxy.Proxy
               let _ = Hs.pure QueryManager_ResPartResUpdateResPart <*>
                         HsJSONPB.asProxy declare_update_res_part
               let declare_explain_res_part = HsJSONPB.declareSchemaRef
               queryManager_ResPartResExplainResPart <- declare_explain_res_part
                                                          Proxy.Proxy
               let _ = Hs.pure QueryManager_ResPartResExplainResPart <*>
                         HsJSONPB.asProxy declare_explain_res_part
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_ResPartRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("match_res_part",
                                                         queryManager_ResPartResMatchResPart),
                                                        ("match_group_res_part",
                                                         queryManager_ResPartResMatchGroupResPart),
                                                        ("match_group_aggregate_res_part",
                                                         queryManager_ResPartResMatchGroupAggregateResPart),
                                                        ("insert_res_part",
                                                         queryManager_ResPartResInsertResPart),
                                                        ("update_res_part",
                                                         queryManager_ResPartResUpdateResPart),
                                                        ("explain_res_part",
                                                         queryManager_ResPartResExplainResPart)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data QueryManager_Match = QueryManager_Match{}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Match where
        nameOf _ = (Hs.fromString "QueryManager_Match")
 
instance HsProtobuf.HasDefault QueryManager_Match
 
instance HsProtobuf.Message QueryManager_Match where
        encodeMessage _ QueryManager_Match{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure QueryManager_Match)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_Match where
        toJSONPB (QueryManager_Match) = (HsJSONPB.object [])
        toEncodingPB (QueryManager_Match) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB QueryManager_Match where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Match"
               (\ obj -> (Hs.pure QueryManager_Match)))
 
instance HsJSONPB.ToJSON QueryManager_Match where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Match where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Match where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Match",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype QueryManager_Match_Req = QueryManager_Match_Req{queryManager_Match_ReqQuery
                                                        :: Hs.Text}
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Match_Req where
        nameOf _ = (Hs.fromString "QueryManager_Match_Req")
 
instance HsProtobuf.HasDefault QueryManager_Match_Req
 
instance HsProtobuf.Message QueryManager_Match_Req where
        encodeMessage _
          QueryManager_Match_Req{queryManager_Match_ReqQuery =
                                   queryManager_Match_ReqQuery}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryManager_Match_ReqQuery)])
        decodeMessage _
          = (Hs.pure QueryManager_Match_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "query")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_Match_Req where
        toJSONPB (QueryManager_Match_Req f1)
          = (HsJSONPB.object ["query" .= f1])
        toEncodingPB (QueryManager_Match_Req f1)
          = (HsJSONPB.pairs ["query" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_Match_Req where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Match_Req"
               (\ obj -> (Hs.pure QueryManager_Match_Req) <*> obj .: "query"))
 
instance HsJSONPB.ToJSON QueryManager_Match_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Match_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Match_Req where
        declareNamedSchema _
          = do let declare_query = HsJSONPB.declareSchemaRef
               queryManager_Match_ReqQuery <- declare_query Proxy.Proxy
               let _ = Hs.pure QueryManager_Match_Req <*>
                         HsJSONPB.asProxy declare_query
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Match_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("query", queryManager_Match_ReqQuery)]}})
 
newtype QueryManager_Match_ResPart = QueryManager_Match_ResPart{queryManager_Match_ResPartAnswers
                                                                :: Hs.Vector Answer.ConceptMap}
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Match_ResPart where
        nameOf _ = (Hs.fromString "QueryManager_Match_ResPart")
 
instance HsProtobuf.HasDefault QueryManager_Match_ResPart
 
instance HsProtobuf.Message QueryManager_Match_ResPart where
        encodeMessage _
          QueryManager_Match_ResPart{queryManager_Match_ResPartAnswers =
                                       queryManager_Match_ResPartAnswers}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Answer.ConceptMap)
                      @(HsProtobuf.NestedVec Answer.ConceptMap)
                      queryManager_Match_ResPartAnswers))])
        decodeMessage _
          = (Hs.pure QueryManager_Match_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Answer.ConceptMap))
                 @(_ (Hs.Vector Answer.ConceptMap))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "ConceptMap")))
                (HsProtobuf.Single "answers")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_Match_ResPart where
        toJSONPB (QueryManager_Match_ResPart f1)
          = (HsJSONPB.object ["answers" .= f1])
        toEncodingPB (QueryManager_Match_ResPart f1)
          = (HsJSONPB.pairs ["answers" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_Match_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Match_ResPart"
               (\ obj ->
                  (Hs.pure QueryManager_Match_ResPart) <*> obj .: "answers"))
 
instance HsJSONPB.ToJSON QueryManager_Match_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Match_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Match_ResPart where
        declareNamedSchema _
          = do let declare_answers = HsJSONPB.declareSchemaRef
               queryManager_Match_ResPartAnswers <- declare_answers Proxy.Proxy
               let _ = Hs.pure QueryManager_Match_ResPart <*>
                         HsJSONPB.asProxy declare_answers
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Match_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("answers",
                                                         queryManager_Match_ResPartAnswers)]}})
 
data QueryManager_MatchAggregate = QueryManager_MatchAggregate{}
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_MatchAggregate where
        nameOf _ = (Hs.fromString "QueryManager_MatchAggregate")
 
instance HsProtobuf.HasDefault QueryManager_MatchAggregate
 
instance HsProtobuf.Message QueryManager_MatchAggregate where
        encodeMessage _ QueryManager_MatchAggregate{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure QueryManager_MatchAggregate)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_MatchAggregate where
        toJSONPB (QueryManager_MatchAggregate) = (HsJSONPB.object [])
        toEncodingPB (QueryManager_MatchAggregate) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB QueryManager_MatchAggregate where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_MatchAggregate"
               (\ obj -> (Hs.pure QueryManager_MatchAggregate)))
 
instance HsJSONPB.ToJSON QueryManager_MatchAggregate where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_MatchAggregate where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_MatchAggregate where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_MatchAggregate",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype QueryManager_MatchAggregate_Req = QueryManager_MatchAggregate_Req{queryManager_MatchAggregate_ReqQuery
                                                                          :: Hs.Text}
                                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_MatchAggregate_Req where
        nameOf _ = (Hs.fromString "QueryManager_MatchAggregate_Req")
 
instance HsProtobuf.HasDefault QueryManager_MatchAggregate_Req
 
instance HsProtobuf.Message QueryManager_MatchAggregate_Req where
        encodeMessage _
          QueryManager_MatchAggregate_Req{queryManager_MatchAggregate_ReqQuery
                                            = queryManager_MatchAggregate_ReqQuery}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryManager_MatchAggregate_ReqQuery)])
        decodeMessage _
          = (Hs.pure QueryManager_MatchAggregate_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "query")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_MatchAggregate_Req where
        toJSONPB (QueryManager_MatchAggregate_Req f1)
          = (HsJSONPB.object ["query" .= f1])
        toEncodingPB (QueryManager_MatchAggregate_Req f1)
          = (HsJSONPB.pairs ["query" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_MatchAggregate_Req where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_MatchAggregate_Req"
               (\ obj ->
                  (Hs.pure QueryManager_MatchAggregate_Req) <*> obj .: "query"))
 
instance HsJSONPB.ToJSON QueryManager_MatchAggregate_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_MatchAggregate_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_MatchAggregate_Req where
        declareNamedSchema _
          = do let declare_query = HsJSONPB.declareSchemaRef
               queryManager_MatchAggregate_ReqQuery <- declare_query Proxy.Proxy
               let _ = Hs.pure QueryManager_MatchAggregate_Req <*>
                         HsJSONPB.asProxy declare_query
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_MatchAggregate_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("query",
                                                         queryManager_MatchAggregate_ReqQuery)]}})
 
newtype QueryManager_MatchAggregate_Res = QueryManager_MatchAggregate_Res{queryManager_MatchAggregate_ResAnswer
                                                                          ::
                                                                          Hs.Maybe Answer.Numeric}
                                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_MatchAggregate_Res where
        nameOf _ = (Hs.fromString "QueryManager_MatchAggregate_Res")
 
instance HsProtobuf.HasDefault QueryManager_MatchAggregate_Res
 
instance HsProtobuf.Message QueryManager_MatchAggregate_Res where
        encodeMessage _
          QueryManager_MatchAggregate_Res{queryManager_MatchAggregate_ResAnswer
                                            = queryManager_MatchAggregate_ResAnswer}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Answer.Numeric)
                      @(HsProtobuf.Nested Answer.Numeric)
                      queryManager_MatchAggregate_ResAnswer))])
        decodeMessage _
          = (Hs.pure QueryManager_MatchAggregate_Res) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Answer.Numeric))
                 @(_ (Hs.Maybe Answer.Numeric))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Numeric")))
                (HsProtobuf.Single "answer")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_MatchAggregate_Res where
        toJSONPB (QueryManager_MatchAggregate_Res f1)
          = (HsJSONPB.object ["answer" .= f1])
        toEncodingPB (QueryManager_MatchAggregate_Res f1)
          = (HsJSONPB.pairs ["answer" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_MatchAggregate_Res where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_MatchAggregate_Res"
               (\ obj ->
                  (Hs.pure QueryManager_MatchAggregate_Res) <*> obj .: "answer"))
 
instance HsJSONPB.ToJSON QueryManager_MatchAggregate_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_MatchAggregate_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_MatchAggregate_Res where
        declareNamedSchema _
          = do let declare_answer = HsJSONPB.declareSchemaRef
               queryManager_MatchAggregate_ResAnswer <- declare_answer Proxy.Proxy
               let _ = Hs.pure QueryManager_MatchAggregate_Res <*>
                         HsJSONPB.asProxy declare_answer
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_MatchAggregate_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("answer",
                                                         queryManager_MatchAggregate_ResAnswer)]}})
 
data QueryManager_MatchGroup = QueryManager_MatchGroup{}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_MatchGroup where
        nameOf _ = (Hs.fromString "QueryManager_MatchGroup")
 
instance HsProtobuf.HasDefault QueryManager_MatchGroup
 
instance HsProtobuf.Message QueryManager_MatchGroup where
        encodeMessage _ QueryManager_MatchGroup{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure QueryManager_MatchGroup)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_MatchGroup where
        toJSONPB (QueryManager_MatchGroup) = (HsJSONPB.object [])
        toEncodingPB (QueryManager_MatchGroup) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB QueryManager_MatchGroup where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_MatchGroup"
               (\ obj -> (Hs.pure QueryManager_MatchGroup)))
 
instance HsJSONPB.ToJSON QueryManager_MatchGroup where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_MatchGroup where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_MatchGroup where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_MatchGroup",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype QueryManager_MatchGroup_Req = QueryManager_MatchGroup_Req{queryManager_MatchGroup_ReqQuery
                                                                  :: Hs.Text}
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_MatchGroup_Req where
        nameOf _ = (Hs.fromString "QueryManager_MatchGroup_Req")
 
instance HsProtobuf.HasDefault QueryManager_MatchGroup_Req
 
instance HsProtobuf.Message QueryManager_MatchGroup_Req where
        encodeMessage _
          QueryManager_MatchGroup_Req{queryManager_MatchGroup_ReqQuery =
                                        queryManager_MatchGroup_ReqQuery}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryManager_MatchGroup_ReqQuery)])
        decodeMessage _
          = (Hs.pure QueryManager_MatchGroup_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "query")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_MatchGroup_Req where
        toJSONPB (QueryManager_MatchGroup_Req f1)
          = (HsJSONPB.object ["query" .= f1])
        toEncodingPB (QueryManager_MatchGroup_Req f1)
          = (HsJSONPB.pairs ["query" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_MatchGroup_Req where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_MatchGroup_Req"
               (\ obj ->
                  (Hs.pure QueryManager_MatchGroup_Req) <*> obj .: "query"))
 
instance HsJSONPB.ToJSON QueryManager_MatchGroup_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_MatchGroup_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_MatchGroup_Req where
        declareNamedSchema _
          = do let declare_query = HsJSONPB.declareSchemaRef
               queryManager_MatchGroup_ReqQuery <- declare_query Proxy.Proxy
               let _ = Hs.pure QueryManager_MatchGroup_Req <*>
                         HsJSONPB.asProxy declare_query
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_MatchGroup_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("query",
                                                         queryManager_MatchGroup_ReqQuery)]}})
 
newtype QueryManager_MatchGroup_ResPart = QueryManager_MatchGroup_ResPart{queryManager_MatchGroup_ResPartAnswers
                                                                          ::
                                                                          Hs.Vector
                                                                            Answer.ConceptMapGroup}
                                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_MatchGroup_ResPart where
        nameOf _ = (Hs.fromString "QueryManager_MatchGroup_ResPart")
 
instance HsProtobuf.HasDefault QueryManager_MatchGroup_ResPart
 
instance HsProtobuf.Message QueryManager_MatchGroup_ResPart where
        encodeMessage _
          QueryManager_MatchGroup_ResPart{queryManager_MatchGroup_ResPartAnswers
                                            = queryManager_MatchGroup_ResPartAnswers}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Answer.ConceptMapGroup)
                      @(HsProtobuf.NestedVec Answer.ConceptMapGroup)
                      queryManager_MatchGroup_ResPartAnswers))])
        decodeMessage _
          = (Hs.pure QueryManager_MatchGroup_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Answer.ConceptMapGroup))
                 @(_ (Hs.Vector Answer.ConceptMapGroup))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "ConceptMapGroup")))
                (HsProtobuf.Single "answers")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_MatchGroup_ResPart where
        toJSONPB (QueryManager_MatchGroup_ResPart f1)
          = (HsJSONPB.object ["answers" .= f1])
        toEncodingPB (QueryManager_MatchGroup_ResPart f1)
          = (HsJSONPB.pairs ["answers" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_MatchGroup_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_MatchGroup_ResPart"
               (\ obj ->
                  (Hs.pure QueryManager_MatchGroup_ResPart) <*> obj .: "answers"))
 
instance HsJSONPB.ToJSON QueryManager_MatchGroup_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_MatchGroup_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_MatchGroup_ResPart where
        declareNamedSchema _
          = do let declare_answers = HsJSONPB.declareSchemaRef
               queryManager_MatchGroup_ResPartAnswers <- declare_answers
                                                           Proxy.Proxy
               let _ = Hs.pure QueryManager_MatchGroup_ResPart <*>
                         HsJSONPB.asProxy declare_answers
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_MatchGroup_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("answers",
                                                         queryManager_MatchGroup_ResPartAnswers)]}})
 
data QueryManager_MatchGroupAggregate = QueryManager_MatchGroupAggregate{}
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_MatchGroupAggregate where
        nameOf _ = (Hs.fromString "QueryManager_MatchGroupAggregate")
 
instance HsProtobuf.HasDefault QueryManager_MatchGroupAggregate
 
instance HsProtobuf.Message QueryManager_MatchGroupAggregate where
        encodeMessage _ QueryManager_MatchGroupAggregate{}
          = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure QueryManager_MatchGroupAggregate)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_MatchGroupAggregate where
        toJSONPB (QueryManager_MatchGroupAggregate) = (HsJSONPB.object [])
        toEncodingPB (QueryManager_MatchGroupAggregate)
          = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB QueryManager_MatchGroupAggregate where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_MatchGroupAggregate"
               (\ obj -> (Hs.pure QueryManager_MatchGroupAggregate)))
 
instance HsJSONPB.ToJSON QueryManager_MatchGroupAggregate where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_MatchGroupAggregate where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_MatchGroupAggregate where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_MatchGroupAggregate",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype QueryManager_MatchGroupAggregate_Req = QueryManager_MatchGroupAggregate_Req{queryManager_MatchGroupAggregate_ReqQuery
                                                                                    :: Hs.Text}
                                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                         Hs.NFData)
 
instance HsProtobuf.Named QueryManager_MatchGroupAggregate_Req
         where
        nameOf _ = (Hs.fromString "QueryManager_MatchGroupAggregate_Req")
 
instance HsProtobuf.HasDefault QueryManager_MatchGroupAggregate_Req
 
instance HsProtobuf.Message QueryManager_MatchGroupAggregate_Req
         where
        encodeMessage _
          QueryManager_MatchGroupAggregate_Req{queryManager_MatchGroupAggregate_ReqQuery
                                                 = queryManager_MatchGroupAggregate_ReqQuery}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryManager_MatchGroupAggregate_ReqQuery)])
        decodeMessage _
          = (Hs.pure QueryManager_MatchGroupAggregate_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "query")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_MatchGroupAggregate_Req
         where
        toJSONPB (QueryManager_MatchGroupAggregate_Req f1)
          = (HsJSONPB.object ["query" .= f1])
        toEncodingPB (QueryManager_MatchGroupAggregate_Req f1)
          = (HsJSONPB.pairs ["query" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_MatchGroupAggregate_Req
         where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_MatchGroupAggregate_Req"
               (\ obj ->
                  (Hs.pure QueryManager_MatchGroupAggregate_Req) <*> obj .: "query"))
 
instance HsJSONPB.ToJSON QueryManager_MatchGroupAggregate_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_MatchGroupAggregate_Req
         where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_MatchGroupAggregate_Req
         where
        declareNamedSchema _
          = do let declare_query = HsJSONPB.declareSchemaRef
               queryManager_MatchGroupAggregate_ReqQuery <- declare_query
                                                              Proxy.Proxy
               let _ = Hs.pure QueryManager_MatchGroupAggregate_Req <*>
                         HsJSONPB.asProxy declare_query
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_MatchGroupAggregate_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("query",
                                                         queryManager_MatchGroupAggregate_ReqQuery)]}})
 
newtype QueryManager_MatchGroupAggregate_ResPart = QueryManager_MatchGroupAggregate_ResPart{queryManager_MatchGroupAggregate_ResPartAnswers
                                                                                            ::
                                                                                            Hs.Vector
                                                                                              Answer.NumericGroup}
                                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                             Hs.NFData)
 
instance HsProtobuf.Named QueryManager_MatchGroupAggregate_ResPart
         where
        nameOf _
          = (Hs.fromString "QueryManager_MatchGroupAggregate_ResPart")
 
instance HsProtobuf.HasDefault
         QueryManager_MatchGroupAggregate_ResPart
 
instance HsProtobuf.Message
         QueryManager_MatchGroupAggregate_ResPart where
        encodeMessage _
          QueryManager_MatchGroupAggregate_ResPart{queryManager_MatchGroupAggregate_ResPartAnswers
                                                     =
                                                     queryManager_MatchGroupAggregate_ResPartAnswers}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Answer.NumericGroup)
                      @(HsProtobuf.NestedVec Answer.NumericGroup)
                      queryManager_MatchGroupAggregate_ResPartAnswers))])
        decodeMessage _
          = (Hs.pure QueryManager_MatchGroupAggregate_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Answer.NumericGroup))
                 @(_ (Hs.Vector Answer.NumericGroup))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "NumericGroup")))
                (HsProtobuf.Single "answers")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_MatchGroupAggregate_ResPart
         where
        toJSONPB (QueryManager_MatchGroupAggregate_ResPart f1)
          = (HsJSONPB.object ["answers" .= f1])
        toEncodingPB (QueryManager_MatchGroupAggregate_ResPart f1)
          = (HsJSONPB.pairs ["answers" .= f1])
 
instance HsJSONPB.FromJSONPB
         QueryManager_MatchGroupAggregate_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_MatchGroupAggregate_ResPart"
               (\ obj ->
                  (Hs.pure QueryManager_MatchGroupAggregate_ResPart) <*>
                    obj .: "answers"))
 
instance HsJSONPB.ToJSON QueryManager_MatchGroupAggregate_ResPart
         where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_MatchGroupAggregate_ResPart
         where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_MatchGroupAggregate_ResPart
         where
        declareNamedSchema _
          = do let declare_answers = HsJSONPB.declareSchemaRef
               queryManager_MatchGroupAggregate_ResPartAnswers <- declare_answers
                                                                    Proxy.Proxy
               let _ = Hs.pure QueryManager_MatchGroupAggregate_ResPart <*>
                         HsJSONPB.asProxy declare_answers
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_MatchGroupAggregate_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("answers",
                                                         queryManager_MatchGroupAggregate_ResPartAnswers)]}})
 
data QueryManager_Explain = QueryManager_Explain{}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Explain where
        nameOf _ = (Hs.fromString "QueryManager_Explain")
 
instance HsProtobuf.HasDefault QueryManager_Explain
 
instance HsProtobuf.Message QueryManager_Explain where
        encodeMessage _ QueryManager_Explain{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure QueryManager_Explain)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_Explain where
        toJSONPB (QueryManager_Explain) = (HsJSONPB.object [])
        toEncodingPB (QueryManager_Explain) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB QueryManager_Explain where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Explain"
               (\ obj -> (Hs.pure QueryManager_Explain)))
 
instance HsJSONPB.ToJSON QueryManager_Explain where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Explain where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Explain where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Explain",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype QueryManager_Explain_Req = QueryManager_Explain_Req{queryManager_Explain_ReqExplainableId
                                                            :: Hs.Int64}
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Explain_Req where
        nameOf _ = (Hs.fromString "QueryManager_Explain_Req")
 
instance HsProtobuf.HasDefault QueryManager_Explain_Req
 
instance HsProtobuf.Message QueryManager_Explain_Req where
        encodeMessage _
          QueryManager_Explain_Req{queryManager_Explain_ReqExplainableId =
                                     queryManager_Explain_ReqExplainableId}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryManager_Explain_ReqExplainableId)])
        decodeMessage _
          = (Hs.pure QueryManager_Explain_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "explainable_id")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_Explain_Req where
        toJSONPB (QueryManager_Explain_Req f1)
          = (HsJSONPB.object ["explainable_id" .= f1])
        toEncodingPB (QueryManager_Explain_Req f1)
          = (HsJSONPB.pairs ["explainable_id" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_Explain_Req where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Explain_Req"
               (\ obj ->
                  (Hs.pure QueryManager_Explain_Req) <*> obj .: "explainable_id"))
 
instance HsJSONPB.ToJSON QueryManager_Explain_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Explain_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Explain_Req where
        declareNamedSchema _
          = do let declare_explainable_id = HsJSONPB.declareSchemaRef
               queryManager_Explain_ReqExplainableId <- declare_explainable_id
                                                          Proxy.Proxy
               let _ = Hs.pure QueryManager_Explain_Req <*>
                         HsJSONPB.asProxy declare_explainable_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Explain_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("explainable_id",
                                                         queryManager_Explain_ReqExplainableId)]}})
 
newtype QueryManager_Explain_ResPart = QueryManager_Explain_ResPart{queryManager_Explain_ResPartExplanations
                                                                    :: Hs.Vector Logic.Explanation}
                                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Explain_ResPart where
        nameOf _ = (Hs.fromString "QueryManager_Explain_ResPart")
 
instance HsProtobuf.HasDefault QueryManager_Explain_ResPart
 
instance HsProtobuf.Message QueryManager_Explain_ResPart where
        encodeMessage _
          QueryManager_Explain_ResPart{queryManager_Explain_ResPartExplanations
                                         = queryManager_Explain_ResPartExplanations}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Logic.Explanation)
                      @(HsProtobuf.NestedVec Logic.Explanation)
                      queryManager_Explain_ResPartExplanations))])
        decodeMessage _
          = (Hs.pure QueryManager_Explain_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Logic.Explanation))
                 @(_ (Hs.Vector Logic.Explanation))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "Explanation")))
                (HsProtobuf.Single "explanations")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_Explain_ResPart where
        toJSONPB (QueryManager_Explain_ResPart f1)
          = (HsJSONPB.object ["explanations" .= f1])
        toEncodingPB (QueryManager_Explain_ResPart f1)
          = (HsJSONPB.pairs ["explanations" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_Explain_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Explain_ResPart"
               (\ obj ->
                  (Hs.pure QueryManager_Explain_ResPart) <*> obj .: "explanations"))
 
instance HsJSONPB.ToJSON QueryManager_Explain_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Explain_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Explain_ResPart where
        declareNamedSchema _
          = do let declare_explanations = HsJSONPB.declareSchemaRef
               queryManager_Explain_ResPartExplanations <- declare_explanations
                                                             Proxy.Proxy
               let _ = Hs.pure QueryManager_Explain_ResPart <*>
                         HsJSONPB.asProxy declare_explanations
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Explain_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("explanations",
                                                         queryManager_Explain_ResPartExplanations)]}})
 
data QueryManager_Insert = QueryManager_Insert{}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Insert where
        nameOf _ = (Hs.fromString "QueryManager_Insert")
 
instance HsProtobuf.HasDefault QueryManager_Insert
 
instance HsProtobuf.Message QueryManager_Insert where
        encodeMessage _ QueryManager_Insert{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure QueryManager_Insert)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_Insert where
        toJSONPB (QueryManager_Insert) = (HsJSONPB.object [])
        toEncodingPB (QueryManager_Insert) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB QueryManager_Insert where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Insert"
               (\ obj -> (Hs.pure QueryManager_Insert)))
 
instance HsJSONPB.ToJSON QueryManager_Insert where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Insert where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Insert where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Insert",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype QueryManager_Insert_Req = QueryManager_Insert_Req{queryManager_Insert_ReqQuery
                                                          :: Hs.Text}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Insert_Req where
        nameOf _ = (Hs.fromString "QueryManager_Insert_Req")
 
instance HsProtobuf.HasDefault QueryManager_Insert_Req
 
instance HsProtobuf.Message QueryManager_Insert_Req where
        encodeMessage _
          QueryManager_Insert_Req{queryManager_Insert_ReqQuery =
                                    queryManager_Insert_ReqQuery}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryManager_Insert_ReqQuery)])
        decodeMessage _
          = (Hs.pure QueryManager_Insert_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "query")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_Insert_Req where
        toJSONPB (QueryManager_Insert_Req f1)
          = (HsJSONPB.object ["query" .= f1])
        toEncodingPB (QueryManager_Insert_Req f1)
          = (HsJSONPB.pairs ["query" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_Insert_Req where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Insert_Req"
               (\ obj -> (Hs.pure QueryManager_Insert_Req) <*> obj .: "query"))
 
instance HsJSONPB.ToJSON QueryManager_Insert_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Insert_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Insert_Req where
        declareNamedSchema _
          = do let declare_query = HsJSONPB.declareSchemaRef
               queryManager_Insert_ReqQuery <- declare_query Proxy.Proxy
               let _ = Hs.pure QueryManager_Insert_Req <*>
                         HsJSONPB.asProxy declare_query
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Insert_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("query", queryManager_Insert_ReqQuery)]}})
 
newtype QueryManager_Insert_ResPart = QueryManager_Insert_ResPart{queryManager_Insert_ResPartAnswers
                                                                  :: Hs.Vector Answer.ConceptMap}
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Insert_ResPart where
        nameOf _ = (Hs.fromString "QueryManager_Insert_ResPart")
 
instance HsProtobuf.HasDefault QueryManager_Insert_ResPart
 
instance HsProtobuf.Message QueryManager_Insert_ResPart where
        encodeMessage _
          QueryManager_Insert_ResPart{queryManager_Insert_ResPartAnswers =
                                        queryManager_Insert_ResPartAnswers}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Answer.ConceptMap)
                      @(HsProtobuf.NestedVec Answer.ConceptMap)
                      queryManager_Insert_ResPartAnswers))])
        decodeMessage _
          = (Hs.pure QueryManager_Insert_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Answer.ConceptMap))
                 @(_ (Hs.Vector Answer.ConceptMap))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "ConceptMap")))
                (HsProtobuf.Single "answers")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_Insert_ResPart where
        toJSONPB (QueryManager_Insert_ResPart f1)
          = (HsJSONPB.object ["answers" .= f1])
        toEncodingPB (QueryManager_Insert_ResPart f1)
          = (HsJSONPB.pairs ["answers" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_Insert_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Insert_ResPart"
               (\ obj ->
                  (Hs.pure QueryManager_Insert_ResPart) <*> obj .: "answers"))
 
instance HsJSONPB.ToJSON QueryManager_Insert_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Insert_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Insert_ResPart where
        declareNamedSchema _
          = do let declare_answers = HsJSONPB.declareSchemaRef
               queryManager_Insert_ResPartAnswers <- declare_answers Proxy.Proxy
               let _ = Hs.pure QueryManager_Insert_ResPart <*>
                         HsJSONPB.asProxy declare_answers
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Insert_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("answers",
                                                         queryManager_Insert_ResPartAnswers)]}})
 
data QueryManager_Delete = QueryManager_Delete{}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Delete where
        nameOf _ = (Hs.fromString "QueryManager_Delete")
 
instance HsProtobuf.HasDefault QueryManager_Delete
 
instance HsProtobuf.Message QueryManager_Delete where
        encodeMessage _ QueryManager_Delete{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure QueryManager_Delete)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_Delete where
        toJSONPB (QueryManager_Delete) = (HsJSONPB.object [])
        toEncodingPB (QueryManager_Delete) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB QueryManager_Delete where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Delete"
               (\ obj -> (Hs.pure QueryManager_Delete)))
 
instance HsJSONPB.ToJSON QueryManager_Delete where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Delete where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Delete where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Delete",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype QueryManager_Delete_Req = QueryManager_Delete_Req{queryManager_Delete_ReqQuery
                                                          :: Hs.Text}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Delete_Req where
        nameOf _ = (Hs.fromString "QueryManager_Delete_Req")
 
instance HsProtobuf.HasDefault QueryManager_Delete_Req
 
instance HsProtobuf.Message QueryManager_Delete_Req where
        encodeMessage _
          QueryManager_Delete_Req{queryManager_Delete_ReqQuery =
                                    queryManager_Delete_ReqQuery}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryManager_Delete_ReqQuery)])
        decodeMessage _
          = (Hs.pure QueryManager_Delete_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "query")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_Delete_Req where
        toJSONPB (QueryManager_Delete_Req f1)
          = (HsJSONPB.object ["query" .= f1])
        toEncodingPB (QueryManager_Delete_Req f1)
          = (HsJSONPB.pairs ["query" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_Delete_Req where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Delete_Req"
               (\ obj -> (Hs.pure QueryManager_Delete_Req) <*> obj .: "query"))
 
instance HsJSONPB.ToJSON QueryManager_Delete_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Delete_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Delete_Req where
        declareNamedSchema _
          = do let declare_query = HsJSONPB.declareSchemaRef
               queryManager_Delete_ReqQuery <- declare_query Proxy.Proxy
               let _ = Hs.pure QueryManager_Delete_Req <*>
                         HsJSONPB.asProxy declare_query
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Delete_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("query", queryManager_Delete_ReqQuery)]}})
 
data QueryManager_Delete_Res = QueryManager_Delete_Res{}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Delete_Res where
        nameOf _ = (Hs.fromString "QueryManager_Delete_Res")
 
instance HsProtobuf.HasDefault QueryManager_Delete_Res
 
instance HsProtobuf.Message QueryManager_Delete_Res where
        encodeMessage _ QueryManager_Delete_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure QueryManager_Delete_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_Delete_Res where
        toJSONPB (QueryManager_Delete_Res) = (HsJSONPB.object [])
        toEncodingPB (QueryManager_Delete_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB QueryManager_Delete_Res where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Delete_Res"
               (\ obj -> (Hs.pure QueryManager_Delete_Res)))
 
instance HsJSONPB.ToJSON QueryManager_Delete_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Delete_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Delete_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Delete_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data QueryManager_Update = QueryManager_Update{}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Update where
        nameOf _ = (Hs.fromString "QueryManager_Update")
 
instance HsProtobuf.HasDefault QueryManager_Update
 
instance HsProtobuf.Message QueryManager_Update where
        encodeMessage _ QueryManager_Update{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure QueryManager_Update)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_Update where
        toJSONPB (QueryManager_Update) = (HsJSONPB.object [])
        toEncodingPB (QueryManager_Update) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB QueryManager_Update where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Update"
               (\ obj -> (Hs.pure QueryManager_Update)))
 
instance HsJSONPB.ToJSON QueryManager_Update where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Update where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Update where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Update",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype QueryManager_Update_Req = QueryManager_Update_Req{queryManager_Update_ReqQuery
                                                          :: Hs.Text}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Update_Req where
        nameOf _ = (Hs.fromString "QueryManager_Update_Req")
 
instance HsProtobuf.HasDefault QueryManager_Update_Req
 
instance HsProtobuf.Message QueryManager_Update_Req where
        encodeMessage _
          QueryManager_Update_Req{queryManager_Update_ReqQuery =
                                    queryManager_Update_ReqQuery}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryManager_Update_ReqQuery)])
        decodeMessage _
          = (Hs.pure QueryManager_Update_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "query")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_Update_Req where
        toJSONPB (QueryManager_Update_Req f1)
          = (HsJSONPB.object ["query" .= f1])
        toEncodingPB (QueryManager_Update_Req f1)
          = (HsJSONPB.pairs ["query" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_Update_Req where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Update_Req"
               (\ obj -> (Hs.pure QueryManager_Update_Req) <*> obj .: "query"))
 
instance HsJSONPB.ToJSON QueryManager_Update_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Update_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Update_Req where
        declareNamedSchema _
          = do let declare_query = HsJSONPB.declareSchemaRef
               queryManager_Update_ReqQuery <- declare_query Proxy.Proxy
               let _ = Hs.pure QueryManager_Update_Req <*>
                         HsJSONPB.asProxy declare_query
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Update_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("query", queryManager_Update_ReqQuery)]}})
 
newtype QueryManager_Update_ResPart = QueryManager_Update_ResPart{queryManager_Update_ResPartAnswers
                                                                  :: Hs.Vector Answer.ConceptMap}
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Update_ResPart where
        nameOf _ = (Hs.fromString "QueryManager_Update_ResPart")
 
instance HsProtobuf.HasDefault QueryManager_Update_ResPart
 
instance HsProtobuf.Message QueryManager_Update_ResPart where
        encodeMessage _
          QueryManager_Update_ResPart{queryManager_Update_ResPartAnswers =
                                        queryManager_Update_ResPartAnswers}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Answer.ConceptMap)
                      @(HsProtobuf.NestedVec Answer.ConceptMap)
                      queryManager_Update_ResPartAnswers))])
        decodeMessage _
          = (Hs.pure QueryManager_Update_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Answer.ConceptMap))
                 @(_ (Hs.Vector Answer.ConceptMap))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "ConceptMap")))
                (HsProtobuf.Single "answers")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_Update_ResPart where
        toJSONPB (QueryManager_Update_ResPart f1)
          = (HsJSONPB.object ["answers" .= f1])
        toEncodingPB (QueryManager_Update_ResPart f1)
          = (HsJSONPB.pairs ["answers" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_Update_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Update_ResPart"
               (\ obj ->
                  (Hs.pure QueryManager_Update_ResPart) <*> obj .: "answers"))
 
instance HsJSONPB.ToJSON QueryManager_Update_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Update_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Update_ResPart where
        declareNamedSchema _
          = do let declare_answers = HsJSONPB.declareSchemaRef
               queryManager_Update_ResPartAnswers <- declare_answers Proxy.Proxy
               let _ = Hs.pure QueryManager_Update_ResPart <*>
                         HsJSONPB.asProxy declare_answers
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Update_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("answers",
                                                         queryManager_Update_ResPartAnswers)]}})
 
data QueryManager_Define = QueryManager_Define{}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Define where
        nameOf _ = (Hs.fromString "QueryManager_Define")
 
instance HsProtobuf.HasDefault QueryManager_Define
 
instance HsProtobuf.Message QueryManager_Define where
        encodeMessage _ QueryManager_Define{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure QueryManager_Define)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_Define where
        toJSONPB (QueryManager_Define) = (HsJSONPB.object [])
        toEncodingPB (QueryManager_Define) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB QueryManager_Define where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Define"
               (\ obj -> (Hs.pure QueryManager_Define)))
 
instance HsJSONPB.ToJSON QueryManager_Define where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Define where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Define where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Define",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype QueryManager_Define_Req = QueryManager_Define_Req{queryManager_Define_ReqQuery
                                                          :: Hs.Text}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Define_Req where
        nameOf _ = (Hs.fromString "QueryManager_Define_Req")
 
instance HsProtobuf.HasDefault QueryManager_Define_Req
 
instance HsProtobuf.Message QueryManager_Define_Req where
        encodeMessage _
          QueryManager_Define_Req{queryManager_Define_ReqQuery =
                                    queryManager_Define_ReqQuery}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryManager_Define_ReqQuery)])
        decodeMessage _
          = (Hs.pure QueryManager_Define_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "query")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_Define_Req where
        toJSONPB (QueryManager_Define_Req f1)
          = (HsJSONPB.object ["query" .= f1])
        toEncodingPB (QueryManager_Define_Req f1)
          = (HsJSONPB.pairs ["query" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_Define_Req where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Define_Req"
               (\ obj -> (Hs.pure QueryManager_Define_Req) <*> obj .: "query"))
 
instance HsJSONPB.ToJSON QueryManager_Define_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Define_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Define_Req where
        declareNamedSchema _
          = do let declare_query = HsJSONPB.declareSchemaRef
               queryManager_Define_ReqQuery <- declare_query Proxy.Proxy
               let _ = Hs.pure QueryManager_Define_Req <*>
                         HsJSONPB.asProxy declare_query
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Define_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("query", queryManager_Define_ReqQuery)]}})
 
data QueryManager_Define_Res = QueryManager_Define_Res{}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Define_Res where
        nameOf _ = (Hs.fromString "QueryManager_Define_Res")
 
instance HsProtobuf.HasDefault QueryManager_Define_Res
 
instance HsProtobuf.Message QueryManager_Define_Res where
        encodeMessage _ QueryManager_Define_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure QueryManager_Define_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_Define_Res where
        toJSONPB (QueryManager_Define_Res) = (HsJSONPB.object [])
        toEncodingPB (QueryManager_Define_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB QueryManager_Define_Res where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Define_Res"
               (\ obj -> (Hs.pure QueryManager_Define_Res)))
 
instance HsJSONPB.ToJSON QueryManager_Define_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Define_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Define_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Define_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data QueryManager_Undefine = QueryManager_Undefine{}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Undefine where
        nameOf _ = (Hs.fromString "QueryManager_Undefine")
 
instance HsProtobuf.HasDefault QueryManager_Undefine
 
instance HsProtobuf.Message QueryManager_Undefine where
        encodeMessage _ QueryManager_Undefine{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure QueryManager_Undefine)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_Undefine where
        toJSONPB (QueryManager_Undefine) = (HsJSONPB.object [])
        toEncodingPB (QueryManager_Undefine) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB QueryManager_Undefine where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Undefine"
               (\ obj -> (Hs.pure QueryManager_Undefine)))
 
instance HsJSONPB.ToJSON QueryManager_Undefine where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Undefine where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Undefine where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Undefine",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype QueryManager_Undefine_Req = QueryManager_Undefine_Req{queryManager_Undefine_ReqQuery
                                                              :: Hs.Text}
                                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Undefine_Req where
        nameOf _ = (Hs.fromString "QueryManager_Undefine_Req")
 
instance HsProtobuf.HasDefault QueryManager_Undefine_Req
 
instance HsProtobuf.Message QueryManager_Undefine_Req where
        encodeMessage _
          QueryManager_Undefine_Req{queryManager_Undefine_ReqQuery =
                                      queryManager_Undefine_ReqQuery}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryManager_Undefine_ReqQuery)])
        decodeMessage _
          = (Hs.pure QueryManager_Undefine_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "query")
                []
                "")]
 
instance HsJSONPB.ToJSONPB QueryManager_Undefine_Req where
        toJSONPB (QueryManager_Undefine_Req f1)
          = (HsJSONPB.object ["query" .= f1])
        toEncodingPB (QueryManager_Undefine_Req f1)
          = (HsJSONPB.pairs ["query" .= f1])
 
instance HsJSONPB.FromJSONPB QueryManager_Undefine_Req where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Undefine_Req"
               (\ obj -> (Hs.pure QueryManager_Undefine_Req) <*> obj .: "query"))
 
instance HsJSONPB.ToJSON QueryManager_Undefine_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Undefine_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Undefine_Req where
        declareNamedSchema _
          = do let declare_query = HsJSONPB.declareSchemaRef
               queryManager_Undefine_ReqQuery <- declare_query Proxy.Proxy
               let _ = Hs.pure QueryManager_Undefine_Req <*>
                         HsJSONPB.asProxy declare_query
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Undefine_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("query",
                                                         queryManager_Undefine_ReqQuery)]}})
 
data QueryManager_Undefine_Res = QueryManager_Undefine_Res{}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named QueryManager_Undefine_Res where
        nameOf _ = (Hs.fromString "QueryManager_Undefine_Res")
 
instance HsProtobuf.HasDefault QueryManager_Undefine_Res
 
instance HsProtobuf.Message QueryManager_Undefine_Res where
        encodeMessage _ QueryManager_Undefine_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure QueryManager_Undefine_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB QueryManager_Undefine_Res where
        toJSONPB (QueryManager_Undefine_Res) = (HsJSONPB.object [])
        toEncodingPB (QueryManager_Undefine_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB QueryManager_Undefine_Res where
        parseJSONPB
          = (HsJSONPB.withObject "QueryManager_Undefine_Res"
               (\ obj -> (Hs.pure QueryManager_Undefine_Res)))
 
instance HsJSONPB.ToJSON QueryManager_Undefine_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON QueryManager_Undefine_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema QueryManager_Undefine_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryManager_Undefine_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})