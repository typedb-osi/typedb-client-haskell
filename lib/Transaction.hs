{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Transaction where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Concept
import qualified Logic
import qualified Options
import qualified Query
 
data Transaction = Transaction{}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction where
        nameOf _ = (Hs.fromString "Transaction")
 
instance HsProtobuf.HasDefault Transaction
 
instance HsProtobuf.Message Transaction where
        encodeMessage _ Transaction{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Transaction)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Transaction where
        toJSONPB (Transaction) = (HsJSONPB.object [])
        toEncodingPB (Transaction) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Transaction where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction"
               (\ obj -> (Hs.pure Transaction)))
 
instance HsJSONPB.ToJSON Transaction where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Transaction_Client = Transaction_Client{transaction_ClientReqs
                                                :: Hs.Vector Transaction.Transaction_Req}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Client where
        nameOf _ = (Hs.fromString "Transaction_Client")
 
instance HsProtobuf.HasDefault Transaction_Client
 
instance HsProtobuf.Message Transaction_Client where
        encodeMessage _
          Transaction_Client{transaction_ClientReqs = transaction_ClientReqs}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Transaction.Transaction_Req)
                      @(HsProtobuf.NestedVec Transaction.Transaction_Req)
                      transaction_ClientReqs))])
        decodeMessage _
          = (Hs.pure Transaction_Client) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Transaction.Transaction_Req))
                 @(_ (Hs.Vector Transaction.Transaction_Req))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Req")))
                (HsProtobuf.Single "reqs")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Transaction_Client where
        toJSONPB (Transaction_Client f1) = (HsJSONPB.object ["reqs" .= f1])
        toEncodingPB (Transaction_Client f1)
          = (HsJSONPB.pairs ["reqs" .= f1])
 
instance HsJSONPB.FromJSONPB Transaction_Client where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Client"
               (\ obj -> (Hs.pure Transaction_Client) <*> obj .: "reqs"))
 
instance HsJSONPB.ToJSON Transaction_Client where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Client where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Client where
        declareNamedSchema _
          = do let declare_reqs = HsJSONPB.declareSchemaRef
               transaction_ClientReqs <- declare_reqs Proxy.Proxy
               let _ = Hs.pure Transaction_Client <*>
                         HsJSONPB.asProxy declare_reqs
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Client",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("reqs", transaction_ClientReqs)]}})
 
newtype Transaction_Server = Transaction_Server{transaction_ServerServer
                                                :: Hs.Maybe Transaction_ServerServer}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Server where
        nameOf _ = (Hs.fromString "Transaction_Server")
 
instance HsProtobuf.HasDefault Transaction_Server
 
instance HsProtobuf.Message Transaction_Server where
        encodeMessage _
          Transaction_Server{transaction_ServerServer =
                               transaction_ServerServer}
          = (Hs.mconcat
               [case transaction_ServerServer of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Transaction_ServerServerRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Transaction.Transaction_Res)
                                        @(HsProtobuf.Nested Transaction.Transaction_Res)
                                        (Hs.Just y)))
                             Transaction_ServerServerResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Transaction.Transaction_ResPart)
                                        @(HsProtobuf.Nested Transaction.Transaction_ResPart)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Transaction_Server) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap Transaction_ServerServerRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Transaction.Transaction_Res))
                        @(_ (Hs.Maybe Transaction.Transaction_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap Transaction_ServerServerResPart)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Transaction.Transaction_ResPart))
                        @(_ (Hs.Maybe Transaction.Transaction_ResPart))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Transaction_Server where
        toJSONPB (Transaction_Server f2_or_f3)
          = (HsJSONPB.object
               [(let encodeServer
                       = (case f2_or_f3 of
                              Hs.Just (Transaction_ServerServerRes f2)
                                -> (HsJSONPB.pair "res" f2)
                              Hs.Just (Transaction_ServerServerResPart f3)
                                -> (HsJSONPB.pair "res_part" f3)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("server" .= (HsJSONPB.objectOrNull [encodeServer] options))
                         options
                       else encodeServer options)])
        toEncodingPB (Transaction_Server f2_or_f3)
          = (HsJSONPB.pairs
               [(let encodeServer
                       = (case f2_or_f3 of
                              Hs.Just (Transaction_ServerServerRes f2)
                                -> (HsJSONPB.pair "res" f2)
                              Hs.Just (Transaction_ServerServerResPart f3)
                                -> (HsJSONPB.pair "res_part" f3)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("server" .= (HsJSONPB.pairsOrNull [encodeServer] options)) options
                       else encodeServer options)])
 
instance HsJSONPB.FromJSONPB Transaction_Server where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Server"
               (\ obj ->
                  (Hs.pure Transaction_Server) <*>
                    (let parseServer parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Transaction_ServerServerRes <$>
                                  (HsJSONPB.parseField parseObj "res"),
                                Hs.Just Hs.. Transaction_ServerServerResPart <$>
                                  (HsJSONPB.parseField parseObj "res_part"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "server") Hs.>>=
                          (HsJSONPB.withObject "server" parseServer))
                         <|> (parseServer obj))))
 
instance HsJSONPB.ToJSON Transaction_Server where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Server where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Server where
        declareNamedSchema _
          = do let declare_server = HsJSONPB.declareSchemaRef
               transaction_ServerServer <- declare_server Proxy.Proxy
               let _ = Hs.pure Transaction_Server <*>
                         HsJSONPB.asProxy declare_server
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Server",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("server", transaction_ServerServer)]}})
 
data Transaction_ServerServer = Transaction_ServerServerRes Transaction.Transaction_Res
                              | Transaction_ServerServerResPart Transaction.Transaction_ResPart
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_ServerServer where
        nameOf _ = (Hs.fromString "Transaction_ServerServer")
 
instance HsJSONPB.ToSchema Transaction_ServerServer where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               transaction_ServerServerRes <- declare_res Proxy.Proxy
               let _ = Hs.pure Transaction_ServerServerRes <*>
                         HsJSONPB.asProxy declare_res
               let declare_res_part = HsJSONPB.declareSchemaRef
               transaction_ServerServerResPart <- declare_res_part Proxy.Proxy
               let _ = Hs.pure Transaction_ServerServerResPart <*>
                         HsJSONPB.asProxy declare_res_part
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_ServerServer",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res", transaction_ServerServerRes),
                                                        ("res_part",
                                                         transaction_ServerServerResPart)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data Transaction_Req = Transaction_Req{transaction_ReqReqId ::
                                       Hs.ByteString,
                                       transaction_ReqMetadata :: Hs.Map Hs.Text Hs.Text,
                                       transaction_ReqReq :: Hs.Maybe Transaction_ReqReq}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Req where
        nameOf _ = (Hs.fromString "Transaction_Req")
 
instance HsProtobuf.HasDefault Transaction_Req
 
instance HsProtobuf.Message Transaction_Req where
        encodeMessage _
          Transaction_Req{transaction_ReqReqId = transaction_ReqReqId,
                          transaction_ReqMetadata = transaction_ReqMetadata,
                          transaction_ReqReq = transaction_ReqReq}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   transaction_ReqReqId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   transaction_ReqMetadata),
                case transaction_ReqReq of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Transaction_ReqReqOpenReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Transaction.Transaction_Open_Req)
                                        @(HsProtobuf.Nested Transaction.Transaction_Open_Req)
                                        (Hs.Just y)))
                             Transaction_ReqReqStreamReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Transaction.Transaction_Stream_Req)
                                        @(HsProtobuf.Nested Transaction.Transaction_Stream_Req)
                                        (Hs.Just y)))
                             Transaction_ReqReqCommitReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (Hs.coerce @(Hs.Maybe Transaction.Transaction_Commit_Req)
                                        @(HsProtobuf.Nested Transaction.Transaction_Commit_Req)
                                        (Hs.Just y)))
                             Transaction_ReqReqRollbackReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                                     (Hs.coerce @(Hs.Maybe Transaction.Transaction_Rollback_Req)
                                        @(HsProtobuf.Nested Transaction.Transaction_Rollback_Req)
                                        (Hs.Just y)))
                             Transaction_ReqReqQueryManagerReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Req)
                                        @(HsProtobuf.Nested Query.QueryManager_Req)
                                        (Hs.Just y)))
                             Transaction_ReqReqConceptManagerReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                                     (Hs.coerce @(Hs.Maybe Concept.ConceptManager_Req)
                                        @(HsProtobuf.Nested Concept.ConceptManager_Req)
                                        (Hs.Just y)))
                             Transaction_ReqReqLogicManagerReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 9)
                                     (Hs.coerce @(Hs.Maybe Logic.LogicManager_Req)
                                        @(HsProtobuf.Nested Logic.LogicManager_Req)
                                        (Hs.Just y)))
                             Transaction_ReqReqRuleReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 10)
                                     (Hs.coerce @(Hs.Maybe Logic.Rule_Req)
                                        @(HsProtobuf.Nested Logic.Rule_Req)
                                        (Hs.Just y)))
                             Transaction_ReqReqTypeReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 11)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_Req)
                                        @(HsProtobuf.Nested Concept.Type_Req)
                                        (Hs.Just y)))
                             Transaction_ReqReqThingReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 12)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_Req)
                                        @(HsProtobuf.Nested Concept.Thing_Req)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Transaction_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap Transaction_ReqReqOpenReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Transaction.Transaction_Open_Req))
                        @(_ (Hs.Maybe Transaction.Transaction_Open_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap Transaction_ReqReqStreamReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Transaction.Transaction_Stream_Req))
                        @(_ (Hs.Maybe Transaction.Transaction_Stream_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 5),
                   (Hs.pure (Hs.fmap Transaction_ReqReqCommitReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Transaction.Transaction_Commit_Req))
                        @(_ (Hs.Maybe Transaction.Transaction_Commit_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 6),
                   (Hs.pure (Hs.fmap Transaction_ReqReqRollbackReq)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Transaction.Transaction_Rollback_Req))
                        @(_ (Hs.Maybe Transaction.Transaction_Rollback_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 7),
                   (Hs.pure (Hs.fmap Transaction_ReqReqQueryManagerReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Query.QueryManager_Req))
                        @(_ (Hs.Maybe Query.QueryManager_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 8),
                   (Hs.pure (Hs.fmap Transaction_ReqReqConceptManagerReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.ConceptManager_Req))
                        @(_ (Hs.Maybe Concept.ConceptManager_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 9),
                   (Hs.pure (Hs.fmap Transaction_ReqReqLogicManagerReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.LogicManager_Req))
                        @(_ (Hs.Maybe Logic.LogicManager_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 10),
                   (Hs.pure (Hs.fmap Transaction_ReqReqRuleReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.Rule_Req))
                        @(_ (Hs.Maybe Logic.Rule_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 11),
                   (Hs.pure (Hs.fmap Transaction_ReqReqTypeReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_Req))
                        @(_ (Hs.Maybe Concept.Type_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 12),
                   (Hs.pure (Hs.fmap Transaction_ReqReqThingReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_Req))
                        @(_ (Hs.Maybe Concept.Thing_Req))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "req_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Map HsProtobuf.String HsProtobuf.String)
                (HsProtobuf.Single "metadata")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Transaction_Req where
        toJSONPB
          (Transaction_Req f1 f2
             f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10_or_f11_or_f12)
          = (HsJSONPB.object
               ["req_id" .= f1, "metadata" .= f2,
                (let encodeReq
                       = (case f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10_or_f11_or_f12
                            of
                              Hs.Just (Transaction_ReqReqOpenReq f3)
                                -> (HsJSONPB.pair "open_req" f3)
                              Hs.Just (Transaction_ReqReqStreamReq f4)
                                -> (HsJSONPB.pair "stream_req" f4)
                              Hs.Just (Transaction_ReqReqCommitReq f5)
                                -> (HsJSONPB.pair "commit_req" f5)
                              Hs.Just (Transaction_ReqReqRollbackReq f6)
                                -> (HsJSONPB.pair "rollback_req" f6)
                              Hs.Just (Transaction_ReqReqQueryManagerReq f7)
                                -> (HsJSONPB.pair "query_manager_req" f7)
                              Hs.Just (Transaction_ReqReqConceptManagerReq f8)
                                -> (HsJSONPB.pair "concept_manager_req" f8)
                              Hs.Just (Transaction_ReqReqLogicManagerReq f9)
                                -> (HsJSONPB.pair "logic_manager_req" f9)
                              Hs.Just (Transaction_ReqReqRuleReq f10)
                                -> (HsJSONPB.pair "rule_req" f10)
                              Hs.Just (Transaction_ReqReqTypeReq f11)
                                -> (HsJSONPB.pair "type_req" f11)
                              Hs.Just (Transaction_ReqReqThingReq f12)
                                -> (HsJSONPB.pair "thing_req" f12)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.objectOrNull [encodeReq] options)) options else
                       encodeReq options)])
        toEncodingPB
          (Transaction_Req f1 f2
             f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10_or_f11_or_f12)
          = (HsJSONPB.pairs
               ["req_id" .= f1, "metadata" .= f2,
                (let encodeReq
                       = (case f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10_or_f11_or_f12
                            of
                              Hs.Just (Transaction_ReqReqOpenReq f3)
                                -> (HsJSONPB.pair "open_req" f3)
                              Hs.Just (Transaction_ReqReqStreamReq f4)
                                -> (HsJSONPB.pair "stream_req" f4)
                              Hs.Just (Transaction_ReqReqCommitReq f5)
                                -> (HsJSONPB.pair "commit_req" f5)
                              Hs.Just (Transaction_ReqReqRollbackReq f6)
                                -> (HsJSONPB.pair "rollback_req" f6)
                              Hs.Just (Transaction_ReqReqQueryManagerReq f7)
                                -> (HsJSONPB.pair "query_manager_req" f7)
                              Hs.Just (Transaction_ReqReqConceptManagerReq f8)
                                -> (HsJSONPB.pair "concept_manager_req" f8)
                              Hs.Just (Transaction_ReqReqLogicManagerReq f9)
                                -> (HsJSONPB.pair "logic_manager_req" f9)
                              Hs.Just (Transaction_ReqReqRuleReq f10)
                                -> (HsJSONPB.pair "rule_req" f10)
                              Hs.Just (Transaction_ReqReqTypeReq f11)
                                -> (HsJSONPB.pair "type_req" f11)
                              Hs.Just (Transaction_ReqReqThingReq f12)
                                -> (HsJSONPB.pair "thing_req" f12)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.pairsOrNull [encodeReq] options)) options else
                       encodeReq options)])
 
instance HsJSONPB.FromJSONPB Transaction_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Req"
               (\ obj ->
                  (Hs.pure Transaction_Req) <*> obj .: "req_id" <*> obj .: "metadata"
                    <*>
                    (let parseReq parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Transaction_ReqReqOpenReq <$>
                                  (HsJSONPB.parseField parseObj "open_req"),
                                Hs.Just Hs.. Transaction_ReqReqStreamReq <$>
                                  (HsJSONPB.parseField parseObj "stream_req"),
                                Hs.Just Hs.. Transaction_ReqReqCommitReq <$>
                                  (HsJSONPB.parseField parseObj "commit_req"),
                                Hs.Just Hs.. Transaction_ReqReqRollbackReq <$>
                                  (HsJSONPB.parseField parseObj "rollback_req"),
                                Hs.Just Hs.. Transaction_ReqReqQueryManagerReq <$>
                                  (HsJSONPB.parseField parseObj "query_manager_req"),
                                Hs.Just Hs.. Transaction_ReqReqConceptManagerReq <$>
                                  (HsJSONPB.parseField parseObj "concept_manager_req"),
                                Hs.Just Hs.. Transaction_ReqReqLogicManagerReq <$>
                                  (HsJSONPB.parseField parseObj "logic_manager_req"),
                                Hs.Just Hs.. Transaction_ReqReqRuleReq <$>
                                  (HsJSONPB.parseField parseObj "rule_req"),
                                Hs.Just Hs.. Transaction_ReqReqTypeReq <$>
                                  (HsJSONPB.parseField parseObj "type_req"),
                                Hs.Just Hs.. Transaction_ReqReqThingReq <$>
                                  (HsJSONPB.parseField parseObj "thing_req"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "req") Hs.>>= (HsJSONPB.withObject "req" parseReq)) <|>
                         (parseReq obj))))
 
instance HsJSONPB.ToJSON Transaction_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Req where
        declareNamedSchema _
          = do let declare_req_id = HsJSONPB.declareSchemaRef
               transaction_ReqReqId <- declare_req_id Proxy.Proxy
               let declare_metadata = HsJSONPB.declareSchemaRef
               transaction_ReqMetadata <- declare_metadata Proxy.Proxy
               let declare_req = HsJSONPB.declareSchemaRef
               transaction_ReqReq <- declare_req Proxy.Proxy
               let _ = Hs.pure Transaction_Req <*> HsJSONPB.asProxy declare_req_id
                         <*> HsJSONPB.asProxy declare_metadata
                         <*> HsJSONPB.asProxy declare_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("req_id", transaction_ReqReqId),
                                                        ("metadata", transaction_ReqMetadata),
                                                        ("req", transaction_ReqReq)]}})
 
data Transaction_ReqReq = Transaction_ReqReqOpenReq Transaction.Transaction_Open_Req
                        | Transaction_ReqReqStreamReq Transaction.Transaction_Stream_Req
                        | Transaction_ReqReqCommitReq Transaction.Transaction_Commit_Req
                        | Transaction_ReqReqRollbackReq Transaction.Transaction_Rollback_Req
                        | Transaction_ReqReqQueryManagerReq Query.QueryManager_Req
                        | Transaction_ReqReqConceptManagerReq Concept.ConceptManager_Req
                        | Transaction_ReqReqLogicManagerReq Logic.LogicManager_Req
                        | Transaction_ReqReqRuleReq Logic.Rule_Req
                        | Transaction_ReqReqTypeReq Concept.Type_Req
                        | Transaction_ReqReqThingReq Concept.Thing_Req
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_ReqReq where
        nameOf _ = (Hs.fromString "Transaction_ReqReq")
 
instance HsJSONPB.ToSchema Transaction_ReqReq where
        declareNamedSchema _
          = do let declare_open_req = HsJSONPB.declareSchemaRef
               transaction_ReqReqOpenReq <- declare_open_req Proxy.Proxy
               let _ = Hs.pure Transaction_ReqReqOpenReq <*>
                         HsJSONPB.asProxy declare_open_req
               let declare_stream_req = HsJSONPB.declareSchemaRef
               transaction_ReqReqStreamReq <- declare_stream_req Proxy.Proxy
               let _ = Hs.pure Transaction_ReqReqStreamReq <*>
                         HsJSONPB.asProxy declare_stream_req
               let declare_commit_req = HsJSONPB.declareSchemaRef
               transaction_ReqReqCommitReq <- declare_commit_req Proxy.Proxy
               let _ = Hs.pure Transaction_ReqReqCommitReq <*>
                         HsJSONPB.asProxy declare_commit_req
               let declare_rollback_req = HsJSONPB.declareSchemaRef
               transaction_ReqReqRollbackReq <- declare_rollback_req Proxy.Proxy
               let _ = Hs.pure Transaction_ReqReqRollbackReq <*>
                         HsJSONPB.asProxy declare_rollback_req
               let declare_query_manager_req = HsJSONPB.declareSchemaRef
               transaction_ReqReqQueryManagerReq <- declare_query_manager_req
                                                      Proxy.Proxy
               let _ = Hs.pure Transaction_ReqReqQueryManagerReq <*>
                         HsJSONPB.asProxy declare_query_manager_req
               let declare_concept_manager_req = HsJSONPB.declareSchemaRef
               transaction_ReqReqConceptManagerReq <- declare_concept_manager_req
                                                        Proxy.Proxy
               let _ = Hs.pure Transaction_ReqReqConceptManagerReq <*>
                         HsJSONPB.asProxy declare_concept_manager_req
               let declare_logic_manager_req = HsJSONPB.declareSchemaRef
               transaction_ReqReqLogicManagerReq <- declare_logic_manager_req
                                                      Proxy.Proxy
               let _ = Hs.pure Transaction_ReqReqLogicManagerReq <*>
                         HsJSONPB.asProxy declare_logic_manager_req
               let declare_rule_req = HsJSONPB.declareSchemaRef
               transaction_ReqReqRuleReq <- declare_rule_req Proxy.Proxy
               let _ = Hs.pure Transaction_ReqReqRuleReq <*>
                         HsJSONPB.asProxy declare_rule_req
               let declare_type_req = HsJSONPB.declareSchemaRef
               transaction_ReqReqTypeReq <- declare_type_req Proxy.Proxy
               let _ = Hs.pure Transaction_ReqReqTypeReq <*>
                         HsJSONPB.asProxy declare_type_req
               let declare_thing_req = HsJSONPB.declareSchemaRef
               transaction_ReqReqThingReq <- declare_thing_req Proxy.Proxy
               let _ = Hs.pure Transaction_ReqReqThingReq <*>
                         HsJSONPB.asProxy declare_thing_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_ReqReq",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("open_req", transaction_ReqReqOpenReq),
                                                        ("stream_req", transaction_ReqReqStreamReq),
                                                        ("commit_req", transaction_ReqReqCommitReq),
                                                        ("rollback_req",
                                                         transaction_ReqReqRollbackReq),
                                                        ("query_manager_req",
                                                         transaction_ReqReqQueryManagerReq),
                                                        ("concept_manager_req",
                                                         transaction_ReqReqConceptManagerReq),
                                                        ("logic_manager_req",
                                                         transaction_ReqReqLogicManagerReq),
                                                        ("rule_req", transaction_ReqReqRuleReq),
                                                        ("type_req", transaction_ReqReqTypeReq),
                                                        ("thing_req", transaction_ReqReqThingReq)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data Transaction_Res = Transaction_Res{transaction_ResReqId ::
                                       Hs.ByteString,
                                       transaction_ResRes :: Hs.Maybe Transaction_ResRes}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Res where
        nameOf _ = (Hs.fromString "Transaction_Res")
 
instance HsProtobuf.HasDefault Transaction_Res
 
instance HsProtobuf.Message Transaction_Res where
        encodeMessage _
          Transaction_Res{transaction_ResReqId = transaction_ResReqId,
                          transaction_ResRes = transaction_ResRes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   transaction_ResReqId),
                case transaction_ResRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Transaction_ResResOpenRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Transaction.Transaction_Open_Res)
                                        @(HsProtobuf.Nested Transaction.Transaction_Open_Res)
                                        (Hs.Just y)))
                             Transaction_ResResCommitRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Transaction.Transaction_Commit_Res)
                                        @(HsProtobuf.Nested Transaction.Transaction_Commit_Res)
                                        (Hs.Just y)))
                             Transaction_ResResRollbackRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Transaction.Transaction_Rollback_Res)
                                        @(HsProtobuf.Nested Transaction.Transaction_Rollback_Res)
                                        (Hs.Just y)))
                             Transaction_ResResQueryManagerRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_Res)
                                        @(HsProtobuf.Nested Query.QueryManager_Res)
                                        (Hs.Just y)))
                             Transaction_ResResConceptManagerRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                                     (Hs.coerce @(Hs.Maybe Concept.ConceptManager_Res)
                                        @(HsProtobuf.Nested Concept.ConceptManager_Res)
                                        (Hs.Just y)))
                             Transaction_ResResLogicManagerRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                                     (Hs.coerce @(Hs.Maybe Logic.LogicManager_Res)
                                        @(HsProtobuf.Nested Logic.LogicManager_Res)
                                        (Hs.Just y)))
                             Transaction_ResResRuleRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                                     (Hs.coerce @(Hs.Maybe Logic.Rule_Res)
                                        @(HsProtobuf.Nested Logic.Rule_Res)
                                        (Hs.Just y)))
                             Transaction_ResResTypeRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 9)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_Res)
                                        @(HsProtobuf.Nested Concept.Type_Res)
                                        (Hs.Just y)))
                             Transaction_ResResThingRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 10)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_Res)
                                        @(HsProtobuf.Nested Concept.Thing_Res)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Transaction_Res) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap Transaction_ResResOpenRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Transaction.Transaction_Open_Res))
                        @(_ (Hs.Maybe Transaction.Transaction_Open_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap Transaction_ResResCommitRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Transaction.Transaction_Commit_Res))
                        @(_ (Hs.Maybe Transaction.Transaction_Commit_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap Transaction_ResResRollbackRes)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Transaction.Transaction_Rollback_Res))
                        @(_ (Hs.Maybe Transaction.Transaction_Rollback_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 5),
                   (Hs.pure (Hs.fmap Transaction_ResResQueryManagerRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Query.QueryManager_Res))
                        @(_ (Hs.Maybe Query.QueryManager_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 6),
                   (Hs.pure (Hs.fmap Transaction_ResResConceptManagerRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.ConceptManager_Res))
                        @(_ (Hs.Maybe Concept.ConceptManager_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 7),
                   (Hs.pure (Hs.fmap Transaction_ResResLogicManagerRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.LogicManager_Res))
                        @(_ (Hs.Maybe Logic.LogicManager_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 8),
                   (Hs.pure (Hs.fmap Transaction_ResResRuleRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.Rule_Res))
                        @(_ (Hs.Maybe Logic.Rule_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 9),
                   (Hs.pure (Hs.fmap Transaction_ResResTypeRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_Res))
                        @(_ (Hs.Maybe Concept.Type_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 10),
                   (Hs.pure (Hs.fmap Transaction_ResResThingRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_Res))
                        @(_ (Hs.Maybe Concept.Thing_Res))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "req_id")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Transaction_Res where
        toJSONPB
          (Transaction_Res f1
             f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10)
          = (HsJSONPB.object
               ["req_id" .= f1,
                (let encodeRes
                       = (case f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10 of
                              Hs.Just (Transaction_ResResOpenRes f2)
                                -> (HsJSONPB.pair "open_res" f2)
                              Hs.Just (Transaction_ResResCommitRes f3)
                                -> (HsJSONPB.pair "commit_res" f3)
                              Hs.Just (Transaction_ResResRollbackRes f4)
                                -> (HsJSONPB.pair "rollback_res" f4)
                              Hs.Just (Transaction_ResResQueryManagerRes f5)
                                -> (HsJSONPB.pair "query_manager_res" f5)
                              Hs.Just (Transaction_ResResConceptManagerRes f6)
                                -> (HsJSONPB.pair "concept_manager_res" f6)
                              Hs.Just (Transaction_ResResLogicManagerRes f7)
                                -> (HsJSONPB.pair "logic_manager_res" f7)
                              Hs.Just (Transaction_ResResRuleRes f8)
                                -> (HsJSONPB.pair "rule_res" f8)
                              Hs.Just (Transaction_ResResTypeRes f9)
                                -> (HsJSONPB.pair "type_res" f9)
                              Hs.Just (Transaction_ResResThingRes f10)
                                -> (HsJSONPB.pair "thing_res" f10)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB
          (Transaction_Res f1
             f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10)
          = (HsJSONPB.pairs
               ["req_id" .= f1,
                (let encodeRes
                       = (case f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10 of
                              Hs.Just (Transaction_ResResOpenRes f2)
                                -> (HsJSONPB.pair "open_res" f2)
                              Hs.Just (Transaction_ResResCommitRes f3)
                                -> (HsJSONPB.pair "commit_res" f3)
                              Hs.Just (Transaction_ResResRollbackRes f4)
                                -> (HsJSONPB.pair "rollback_res" f4)
                              Hs.Just (Transaction_ResResQueryManagerRes f5)
                                -> (HsJSONPB.pair "query_manager_res" f5)
                              Hs.Just (Transaction_ResResConceptManagerRes f6)
                                -> (HsJSONPB.pair "concept_manager_res" f6)
                              Hs.Just (Transaction_ResResLogicManagerRes f7)
                                -> (HsJSONPB.pair "logic_manager_res" f7)
                              Hs.Just (Transaction_ResResRuleRes f8)
                                -> (HsJSONPB.pair "rule_res" f8)
                              Hs.Just (Transaction_ResResTypeRes f9)
                                -> (HsJSONPB.pair "type_res" f9)
                              Hs.Just (Transaction_ResResThingRes f10)
                                -> (HsJSONPB.pair "thing_res" f10)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB Transaction_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Res"
               (\ obj ->
                  (Hs.pure Transaction_Res) <*> obj .: "req_id" <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Transaction_ResResOpenRes <$>
                                  (HsJSONPB.parseField parseObj "open_res"),
                                Hs.Just Hs.. Transaction_ResResCommitRes <$>
                                  (HsJSONPB.parseField parseObj "commit_res"),
                                Hs.Just Hs.. Transaction_ResResRollbackRes <$>
                                  (HsJSONPB.parseField parseObj "rollback_res"),
                                Hs.Just Hs.. Transaction_ResResQueryManagerRes <$>
                                  (HsJSONPB.parseField parseObj "query_manager_res"),
                                Hs.Just Hs.. Transaction_ResResConceptManagerRes <$>
                                  (HsJSONPB.parseField parseObj "concept_manager_res"),
                                Hs.Just Hs.. Transaction_ResResLogicManagerRes <$>
                                  (HsJSONPB.parseField parseObj "logic_manager_res"),
                                Hs.Just Hs.. Transaction_ResResRuleRes <$>
                                  (HsJSONPB.parseField parseObj "rule_res"),
                                Hs.Just Hs.. Transaction_ResResTypeRes <$>
                                  (HsJSONPB.parseField parseObj "type_res"),
                                Hs.Just Hs.. Transaction_ResResThingRes <$>
                                  (HsJSONPB.parseField parseObj "thing_res"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON Transaction_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Res where
        declareNamedSchema _
          = do let declare_req_id = HsJSONPB.declareSchemaRef
               transaction_ResReqId <- declare_req_id Proxy.Proxy
               let declare_res = HsJSONPB.declareSchemaRef
               transaction_ResRes <- declare_res Proxy.Proxy
               let _ = Hs.pure Transaction_Res <*> HsJSONPB.asProxy declare_req_id
                         <*> HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("req_id", transaction_ResReqId),
                                                        ("res", transaction_ResRes)]}})
 
data Transaction_ResRes = Transaction_ResResOpenRes Transaction.Transaction_Open_Res
                        | Transaction_ResResCommitRes Transaction.Transaction_Commit_Res
                        | Transaction_ResResRollbackRes Transaction.Transaction_Rollback_Res
                        | Transaction_ResResQueryManagerRes Query.QueryManager_Res
                        | Transaction_ResResConceptManagerRes Concept.ConceptManager_Res
                        | Transaction_ResResLogicManagerRes Logic.LogicManager_Res
                        | Transaction_ResResRuleRes Logic.Rule_Res
                        | Transaction_ResResTypeRes Concept.Type_Res
                        | Transaction_ResResThingRes Concept.Thing_Res
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_ResRes where
        nameOf _ = (Hs.fromString "Transaction_ResRes")
 
instance HsJSONPB.ToSchema Transaction_ResRes where
        declareNamedSchema _
          = do let declare_open_res = HsJSONPB.declareSchemaRef
               transaction_ResResOpenRes <- declare_open_res Proxy.Proxy
               let _ = Hs.pure Transaction_ResResOpenRes <*>
                         HsJSONPB.asProxy declare_open_res
               let declare_commit_res = HsJSONPB.declareSchemaRef
               transaction_ResResCommitRes <- declare_commit_res Proxy.Proxy
               let _ = Hs.pure Transaction_ResResCommitRes <*>
                         HsJSONPB.asProxy declare_commit_res
               let declare_rollback_res = HsJSONPB.declareSchemaRef
               transaction_ResResRollbackRes <- declare_rollback_res Proxy.Proxy
               let _ = Hs.pure Transaction_ResResRollbackRes <*>
                         HsJSONPB.asProxy declare_rollback_res
               let declare_query_manager_res = HsJSONPB.declareSchemaRef
               transaction_ResResQueryManagerRes <- declare_query_manager_res
                                                      Proxy.Proxy
               let _ = Hs.pure Transaction_ResResQueryManagerRes <*>
                         HsJSONPB.asProxy declare_query_manager_res
               let declare_concept_manager_res = HsJSONPB.declareSchemaRef
               transaction_ResResConceptManagerRes <- declare_concept_manager_res
                                                        Proxy.Proxy
               let _ = Hs.pure Transaction_ResResConceptManagerRes <*>
                         HsJSONPB.asProxy declare_concept_manager_res
               let declare_logic_manager_res = HsJSONPB.declareSchemaRef
               transaction_ResResLogicManagerRes <- declare_logic_manager_res
                                                      Proxy.Proxy
               let _ = Hs.pure Transaction_ResResLogicManagerRes <*>
                         HsJSONPB.asProxy declare_logic_manager_res
               let declare_rule_res = HsJSONPB.declareSchemaRef
               transaction_ResResRuleRes <- declare_rule_res Proxy.Proxy
               let _ = Hs.pure Transaction_ResResRuleRes <*>
                         HsJSONPB.asProxy declare_rule_res
               let declare_type_res = HsJSONPB.declareSchemaRef
               transaction_ResResTypeRes <- declare_type_res Proxy.Proxy
               let _ = Hs.pure Transaction_ResResTypeRes <*>
                         HsJSONPB.asProxy declare_type_res
               let declare_thing_res = HsJSONPB.declareSchemaRef
               transaction_ResResThingRes <- declare_thing_res Proxy.Proxy
               let _ = Hs.pure Transaction_ResResThingRes <*>
                         HsJSONPB.asProxy declare_thing_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_ResRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("open_res", transaction_ResResOpenRes),
                                                        ("commit_res", transaction_ResResCommitRes),
                                                        ("rollback_res",
                                                         transaction_ResResRollbackRes),
                                                        ("query_manager_res",
                                                         transaction_ResResQueryManagerRes),
                                                        ("concept_manager_res",
                                                         transaction_ResResConceptManagerRes),
                                                        ("logic_manager_res",
                                                         transaction_ResResLogicManagerRes),
                                                        ("rule_res", transaction_ResResRuleRes),
                                                        ("type_res", transaction_ResResTypeRes),
                                                        ("thing_res", transaction_ResResThingRes)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data Transaction_ResPart = Transaction_ResPart{transaction_ResPartReqId
                                               :: Hs.ByteString,
                                               transaction_ResPartRes ::
                                               Hs.Maybe Transaction_ResPartRes}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_ResPart where
        nameOf _ = (Hs.fromString "Transaction_ResPart")
 
instance HsProtobuf.HasDefault Transaction_ResPart
 
instance HsProtobuf.Message Transaction_ResPart where
        encodeMessage _
          Transaction_ResPart{transaction_ResPartReqId =
                                transaction_ResPartReqId,
                              transaction_ResPartRes = transaction_ResPartRes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   transaction_ResPartReqId),
                case transaction_ResPartRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Transaction_ResPartResStreamResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Transaction.Transaction_Stream_ResPart)
                                        @(HsProtobuf.Nested Transaction.Transaction_Stream_ResPart)
                                        (Hs.Just y)))
                             Transaction_ResPartResQueryManagerResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Query.QueryManager_ResPart)
                                        @(HsProtobuf.Nested Query.QueryManager_ResPart)
                                        (Hs.Just y)))
                             Transaction_ResPartResLogicManagerResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Logic.LogicManager_ResPart)
                                        @(HsProtobuf.Nested Logic.LogicManager_ResPart)
                                        (Hs.Just y)))
                             Transaction_ResPartResTypeResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (Hs.coerce @(Hs.Maybe Concept.Type_ResPart)
                                        @(HsProtobuf.Nested Concept.Type_ResPart)
                                        (Hs.Just y)))
                             Transaction_ResPartResThingResPart y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                                     (Hs.coerce @(Hs.Maybe Concept.Thing_ResPart)
                                        @(HsProtobuf.Nested Concept.Thing_ResPart)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Transaction_ResPart) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap Transaction_ResPartResStreamResPart)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Transaction.Transaction_Stream_ResPart))
                        @(_ (Hs.Maybe Transaction.Transaction_Stream_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap Transaction_ResPartResQueryManagerResPart)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Query.QueryManager_ResPart))
                        @(_ (Hs.Maybe Query.QueryManager_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap Transaction_ResPartResLogicManagerResPart)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.LogicManager_ResPart))
                        @(_ (Hs.Maybe Logic.LogicManager_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 5),
                   (Hs.pure (Hs.fmap Transaction_ResPartResTypeResPart)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Type_ResPart))
                        @(_ (Hs.Maybe Concept.Type_ResPart))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 6),
                   (Hs.pure (Hs.fmap Transaction_ResPartResThingResPart)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Concept.Thing_ResPart))
                        @(_ (Hs.Maybe Concept.Thing_ResPart))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "req_id")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Transaction_ResPart where
        toJSONPB (Transaction_ResPart f1 f2_or_f3_or_f4_or_f5_or_f6)
          = (HsJSONPB.object
               ["req_id" .= f1,
                (let encodeRes
                       = (case f2_or_f3_or_f4_or_f5_or_f6 of
                              Hs.Just (Transaction_ResPartResStreamResPart f2)
                                -> (HsJSONPB.pair "stream_res_part" f2)
                              Hs.Just (Transaction_ResPartResQueryManagerResPart f3)
                                -> (HsJSONPB.pair "query_manager_res_part" f3)
                              Hs.Just (Transaction_ResPartResLogicManagerResPart f4)
                                -> (HsJSONPB.pair "logic_manager_res_part" f4)
                              Hs.Just (Transaction_ResPartResTypeResPart f5)
                                -> (HsJSONPB.pair "type_res_part" f5)
                              Hs.Just (Transaction_ResPartResThingResPart f6)
                                -> (HsJSONPB.pair "thing_res_part" f6)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB (Transaction_ResPart f1 f2_or_f3_or_f4_or_f5_or_f6)
          = (HsJSONPB.pairs
               ["req_id" .= f1,
                (let encodeRes
                       = (case f2_or_f3_or_f4_or_f5_or_f6 of
                              Hs.Just (Transaction_ResPartResStreamResPart f2)
                                -> (HsJSONPB.pair "stream_res_part" f2)
                              Hs.Just (Transaction_ResPartResQueryManagerResPart f3)
                                -> (HsJSONPB.pair "query_manager_res_part" f3)
                              Hs.Just (Transaction_ResPartResLogicManagerResPart f4)
                                -> (HsJSONPB.pair "logic_manager_res_part" f4)
                              Hs.Just (Transaction_ResPartResTypeResPart f5)
                                -> (HsJSONPB.pair "type_res_part" f5)
                              Hs.Just (Transaction_ResPartResThingResPart f6)
                                -> (HsJSONPB.pair "thing_res_part" f6)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB Transaction_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_ResPart"
               (\ obj ->
                  (Hs.pure Transaction_ResPart) <*> obj .: "req_id" <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Transaction_ResPartResStreamResPart <$>
                                  (HsJSONPB.parseField parseObj "stream_res_part"),
                                Hs.Just Hs.. Transaction_ResPartResQueryManagerResPart <$>
                                  (HsJSONPB.parseField parseObj "query_manager_res_part"),
                                Hs.Just Hs.. Transaction_ResPartResLogicManagerResPart <$>
                                  (HsJSONPB.parseField parseObj "logic_manager_res_part"),
                                Hs.Just Hs.. Transaction_ResPartResTypeResPart <$>
                                  (HsJSONPB.parseField parseObj "type_res_part"),
                                Hs.Just Hs.. Transaction_ResPartResThingResPart <$>
                                  (HsJSONPB.parseField parseObj "thing_res_part"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON Transaction_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_ResPart where
        declareNamedSchema _
          = do let declare_req_id = HsJSONPB.declareSchemaRef
               transaction_ResPartReqId <- declare_req_id Proxy.Proxy
               let declare_res = HsJSONPB.declareSchemaRef
               transaction_ResPartRes <- declare_res Proxy.Proxy
               let _ = Hs.pure Transaction_ResPart <*>
                         HsJSONPB.asProxy declare_req_id
                         <*> HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("req_id", transaction_ResPartReqId),
                                                        ("res", transaction_ResPartRes)]}})
 
data Transaction_ResPartRes = Transaction_ResPartResStreamResPart Transaction.Transaction_Stream_ResPart
                            | Transaction_ResPartResQueryManagerResPart Query.QueryManager_ResPart
                            | Transaction_ResPartResLogicManagerResPart Logic.LogicManager_ResPart
                            | Transaction_ResPartResTypeResPart Concept.Type_ResPart
                            | Transaction_ResPartResThingResPart Concept.Thing_ResPart
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_ResPartRes where
        nameOf _ = (Hs.fromString "Transaction_ResPartRes")
 
instance HsJSONPB.ToSchema Transaction_ResPartRes where
        declareNamedSchema _
          = do let declare_stream_res_part = HsJSONPB.declareSchemaRef
               transaction_ResPartResStreamResPart <- declare_stream_res_part
                                                        Proxy.Proxy
               let _ = Hs.pure Transaction_ResPartResStreamResPart <*>
                         HsJSONPB.asProxy declare_stream_res_part
               let declare_query_manager_res_part = HsJSONPB.declareSchemaRef
               transaction_ResPartResQueryManagerResPart <- declare_query_manager_res_part
                                                              Proxy.Proxy
               let _ = Hs.pure Transaction_ResPartResQueryManagerResPart <*>
                         HsJSONPB.asProxy declare_query_manager_res_part
               let declare_logic_manager_res_part = HsJSONPB.declareSchemaRef
               transaction_ResPartResLogicManagerResPart <- declare_logic_manager_res_part
                                                              Proxy.Proxy
               let _ = Hs.pure Transaction_ResPartResLogicManagerResPart <*>
                         HsJSONPB.asProxy declare_logic_manager_res_part
               let declare_type_res_part = HsJSONPB.declareSchemaRef
               transaction_ResPartResTypeResPart <- declare_type_res_part
                                                      Proxy.Proxy
               let _ = Hs.pure Transaction_ResPartResTypeResPart <*>
                         HsJSONPB.asProxy declare_type_res_part
               let declare_thing_res_part = HsJSONPB.declareSchemaRef
               transaction_ResPartResThingResPart <- declare_thing_res_part
                                                       Proxy.Proxy
               let _ = Hs.pure Transaction_ResPartResThingResPart <*>
                         HsJSONPB.asProxy declare_thing_res_part
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_ResPartRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("stream_res_part",
                                                         transaction_ResPartResStreamResPart),
                                                        ("query_manager_res_part",
                                                         transaction_ResPartResQueryManagerResPart),
                                                        ("logic_manager_res_part",
                                                         transaction_ResPartResLogicManagerResPart),
                                                        ("type_res_part",
                                                         transaction_ResPartResTypeResPart),
                                                        ("thing_res_part",
                                                         transaction_ResPartResThingResPart)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data Transaction_Type = Transaction_TypeREAD
                      | Transaction_TypeWRITE
                      deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Type where
        nameOf _ = (Hs.fromString "Transaction_Type")
 
instance HsProtobuf.HasDefault Transaction_Type
 
instance Hs.Bounded Transaction_Type where
        minBound = Transaction_TypeREAD
        maxBound = Transaction_TypeWRITE
 
instance Hs.Ord Transaction_Type where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum Transaction_Type where
        toProtoEnumMay 0 = Hs.Just Transaction_TypeREAD
        toProtoEnumMay 1 = Hs.Just Transaction_TypeWRITE
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (Transaction_TypeREAD) = 0
        fromProtoEnum (Transaction_TypeWRITE) = 1
 
instance HsJSONPB.ToJSONPB Transaction_Type where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB Transaction_Type where
        parseJSONPB (HsJSONPB.String "READ") = Hs.pure Transaction_TypeREAD
        parseJSONPB (HsJSONPB.String "WRITE")
          = Hs.pure Transaction_TypeWRITE
        parseJSONPB v = (HsJSONPB.typeMismatch "Transaction_Type" v)
 
instance HsJSONPB.ToJSON Transaction_Type where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Type where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite Transaction_Type
 
data Transaction_Open = Transaction_Open{}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Open where
        nameOf _ = (Hs.fromString "Transaction_Open")
 
instance HsProtobuf.HasDefault Transaction_Open
 
instance HsProtobuf.Message Transaction_Open where
        encodeMessage _ Transaction_Open{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Transaction_Open)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Transaction_Open where
        toJSONPB (Transaction_Open) = (HsJSONPB.object [])
        toEncodingPB (Transaction_Open) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Transaction_Open where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Open"
               (\ obj -> (Hs.pure Transaction_Open)))
 
instance HsJSONPB.ToJSON Transaction_Open where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Open where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Open where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Open",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Transaction_Open_Req = Transaction_Open_Req{transaction_Open_ReqSessionId
                                                 :: Hs.ByteString,
                                                 transaction_Open_ReqType ::
                                                 HsProtobuf.Enumerated Transaction.Transaction_Type,
                                                 transaction_Open_ReqOptions ::
                                                 Hs.Maybe Options.Options,
                                                 transaction_Open_ReqNetworkLatencyMillis ::
                                                 Hs.Int32}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Open_Req where
        nameOf _ = (Hs.fromString "Transaction_Open_Req")
 
instance HsProtobuf.HasDefault Transaction_Open_Req
 
instance HsProtobuf.Message Transaction_Open_Req where
        encodeMessage _
          Transaction_Open_Req{transaction_Open_ReqSessionId =
                                 transaction_Open_ReqSessionId,
                               transaction_Open_ReqType = transaction_Open_ReqType,
                               transaction_Open_ReqOptions = transaction_Open_ReqOptions,
                               transaction_Open_ReqNetworkLatencyMillis =
                                 transaction_Open_ReqNetworkLatencyMillis}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   transaction_Open_ReqSessionId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   transaction_Open_ReqType),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Maybe Options.Options)
                      @(HsProtobuf.Nested Options.Options)
                      transaction_Open_ReqOptions)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   transaction_Open_ReqNetworkLatencyMillis)])
        decodeMessage _
          = (Hs.pure Transaction_Open_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Options.Options))
                 @(_ (Hs.Maybe Options.Options))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "session_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Options")))
                (HsProtobuf.Single "options")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "network_latency_millis")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Transaction_Open_Req where
        toJSONPB (Transaction_Open_Req f1 f2 f3 f4)
          = (HsJSONPB.object
               ["session_id" .= f1, "type" .= f2, "options" .= f3,
                "network_latency_millis" .= f4])
        toEncodingPB (Transaction_Open_Req f1 f2 f3 f4)
          = (HsJSONPB.pairs
               ["session_id" .= f1, "type" .= f2, "options" .= f3,
                "network_latency_millis" .= f4])
 
instance HsJSONPB.FromJSONPB Transaction_Open_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Open_Req"
               (\ obj ->
                  (Hs.pure Transaction_Open_Req) <*> obj .: "session_id" <*>
                    obj .: "type"
                    <*> obj .: "options"
                    <*> obj .: "network_latency_millis"))
 
instance HsJSONPB.ToJSON Transaction_Open_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Open_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Open_Req where
        declareNamedSchema _
          = do let declare_session_id = HsJSONPB.declareSchemaRef
               transaction_Open_ReqSessionId <- declare_session_id Proxy.Proxy
               let declare_type = HsJSONPB.declareSchemaRef
               transaction_Open_ReqType <- declare_type Proxy.Proxy
               let declare_options = HsJSONPB.declareSchemaRef
               transaction_Open_ReqOptions <- declare_options Proxy.Proxy
               let declare_network_latency_millis = HsJSONPB.declareSchemaRef
               transaction_Open_ReqNetworkLatencyMillis <- declare_network_latency_millis
                                                             Proxy.Proxy
               let _ = Hs.pure Transaction_Open_Req <*>
                         HsJSONPB.asProxy declare_session_id
                         <*> HsJSONPB.asProxy declare_type
                         <*> HsJSONPB.asProxy declare_options
                         <*> HsJSONPB.asProxy declare_network_latency_millis
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Open_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("session_id",
                                                         transaction_Open_ReqSessionId),
                                                        ("type", transaction_Open_ReqType),
                                                        ("options", transaction_Open_ReqOptions),
                                                        ("network_latency_millis",
                                                         transaction_Open_ReqNetworkLatencyMillis)]}})
 
data Transaction_Open_Res = Transaction_Open_Res{}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Open_Res where
        nameOf _ = (Hs.fromString "Transaction_Open_Res")
 
instance HsProtobuf.HasDefault Transaction_Open_Res
 
instance HsProtobuf.Message Transaction_Open_Res where
        encodeMessage _ Transaction_Open_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Transaction_Open_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Transaction_Open_Res where
        toJSONPB (Transaction_Open_Res) = (HsJSONPB.object [])
        toEncodingPB (Transaction_Open_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Transaction_Open_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Open_Res"
               (\ obj -> (Hs.pure Transaction_Open_Res)))
 
instance HsJSONPB.ToJSON Transaction_Open_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Open_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Open_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Open_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Transaction_Stream = Transaction_Stream{}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Stream where
        nameOf _ = (Hs.fromString "Transaction_Stream")
 
instance HsProtobuf.HasDefault Transaction_Stream
 
instance HsProtobuf.Message Transaction_Stream where
        encodeMessage _ Transaction_Stream{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Transaction_Stream)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Transaction_Stream where
        toJSONPB (Transaction_Stream) = (HsJSONPB.object [])
        toEncodingPB (Transaction_Stream) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Transaction_Stream where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Stream"
               (\ obj -> (Hs.pure Transaction_Stream)))
 
instance HsJSONPB.ToJSON Transaction_Stream where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Stream where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Stream where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Stream",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Transaction_Stream_State = Transaction_Stream_StateCONTINUE
                              | Transaction_Stream_StateDONE
                              deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Stream_State where
        nameOf _ = (Hs.fromString "Transaction_Stream_State")
 
instance HsProtobuf.HasDefault Transaction_Stream_State
 
instance Hs.Bounded Transaction_Stream_State where
        minBound = Transaction_Stream_StateCONTINUE
        maxBound = Transaction_Stream_StateDONE
 
instance Hs.Ord Transaction_Stream_State where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum Transaction_Stream_State where
        toProtoEnumMay 0 = Hs.Just Transaction_Stream_StateCONTINUE
        toProtoEnumMay 1 = Hs.Just Transaction_Stream_StateDONE
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (Transaction_Stream_StateCONTINUE) = 0
        fromProtoEnum (Transaction_Stream_StateDONE) = 1
 
instance HsJSONPB.ToJSONPB Transaction_Stream_State where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB Transaction_Stream_State where
        parseJSONPB (HsJSONPB.String "CONTINUE")
          = Hs.pure Transaction_Stream_StateCONTINUE
        parseJSONPB (HsJSONPB.String "DONE")
          = Hs.pure Transaction_Stream_StateDONE
        parseJSONPB v
          = (HsJSONPB.typeMismatch "Transaction_Stream_State" v)
 
instance HsJSONPB.ToJSON Transaction_Stream_State where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Stream_State where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite Transaction_Stream_State
 
data Transaction_Stream_Req = Transaction_Stream_Req{}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Stream_Req where
        nameOf _ = (Hs.fromString "Transaction_Stream_Req")
 
instance HsProtobuf.HasDefault Transaction_Stream_Req
 
instance HsProtobuf.Message Transaction_Stream_Req where
        encodeMessage _ Transaction_Stream_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Transaction_Stream_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Transaction_Stream_Req where
        toJSONPB (Transaction_Stream_Req) = (HsJSONPB.object [])
        toEncodingPB (Transaction_Stream_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Transaction_Stream_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Stream_Req"
               (\ obj -> (Hs.pure Transaction_Stream_Req)))
 
instance HsJSONPB.ToJSON Transaction_Stream_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Stream_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Stream_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Stream_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Transaction_Stream_ResPart = Transaction_Stream_ResPart{transaction_Stream_ResPartState
                                                                ::
                                                                HsProtobuf.Enumerated
                                                                  Transaction.Transaction_Stream_State}
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Stream_ResPart where
        nameOf _ = (Hs.fromString "Transaction_Stream_ResPart")
 
instance HsProtobuf.HasDefault Transaction_Stream_ResPart
 
instance HsProtobuf.Message Transaction_Stream_ResPart where
        encodeMessage _
          Transaction_Stream_ResPart{transaction_Stream_ResPartState =
                                       transaction_Stream_ResPartState}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   transaction_Stream_ResPartState)])
        decodeMessage _
          = (Hs.pure Transaction_Stream_ResPart) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "State")))
                (HsProtobuf.Single "state")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Transaction_Stream_ResPart where
        toJSONPB (Transaction_Stream_ResPart f1)
          = (HsJSONPB.object ["state" .= f1])
        toEncodingPB (Transaction_Stream_ResPart f1)
          = (HsJSONPB.pairs ["state" .= f1])
 
instance HsJSONPB.FromJSONPB Transaction_Stream_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Stream_ResPart"
               (\ obj -> (Hs.pure Transaction_Stream_ResPart) <*> obj .: "state"))
 
instance HsJSONPB.ToJSON Transaction_Stream_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Stream_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Stream_ResPart where
        declareNamedSchema _
          = do let declare_state = HsJSONPB.declareSchemaRef
               transaction_Stream_ResPartState <- declare_state Proxy.Proxy
               let _ = Hs.pure Transaction_Stream_ResPart <*>
                         HsJSONPB.asProxy declare_state
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Stream_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("state",
                                                         transaction_Stream_ResPartState)]}})
 
data Transaction_Commit = Transaction_Commit{}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Commit where
        nameOf _ = (Hs.fromString "Transaction_Commit")
 
instance HsProtobuf.HasDefault Transaction_Commit
 
instance HsProtobuf.Message Transaction_Commit where
        encodeMessage _ Transaction_Commit{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Transaction_Commit)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Transaction_Commit where
        toJSONPB (Transaction_Commit) = (HsJSONPB.object [])
        toEncodingPB (Transaction_Commit) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Transaction_Commit where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Commit"
               (\ obj -> (Hs.pure Transaction_Commit)))
 
instance HsJSONPB.ToJSON Transaction_Commit where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Commit where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Commit where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Commit",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Transaction_Commit_Req = Transaction_Commit_Req{}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Commit_Req where
        nameOf _ = (Hs.fromString "Transaction_Commit_Req")
 
instance HsProtobuf.HasDefault Transaction_Commit_Req
 
instance HsProtobuf.Message Transaction_Commit_Req where
        encodeMessage _ Transaction_Commit_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Transaction_Commit_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Transaction_Commit_Req where
        toJSONPB (Transaction_Commit_Req) = (HsJSONPB.object [])
        toEncodingPB (Transaction_Commit_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Transaction_Commit_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Commit_Req"
               (\ obj -> (Hs.pure Transaction_Commit_Req)))
 
instance HsJSONPB.ToJSON Transaction_Commit_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Commit_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Commit_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Commit_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Transaction_Commit_Res = Transaction_Commit_Res{}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Commit_Res where
        nameOf _ = (Hs.fromString "Transaction_Commit_Res")
 
instance HsProtobuf.HasDefault Transaction_Commit_Res
 
instance HsProtobuf.Message Transaction_Commit_Res where
        encodeMessage _ Transaction_Commit_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Transaction_Commit_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Transaction_Commit_Res where
        toJSONPB (Transaction_Commit_Res) = (HsJSONPB.object [])
        toEncodingPB (Transaction_Commit_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Transaction_Commit_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Commit_Res"
               (\ obj -> (Hs.pure Transaction_Commit_Res)))
 
instance HsJSONPB.ToJSON Transaction_Commit_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Commit_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Commit_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Commit_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Transaction_Rollback = Transaction_Rollback{}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Rollback where
        nameOf _ = (Hs.fromString "Transaction_Rollback")
 
instance HsProtobuf.HasDefault Transaction_Rollback
 
instance HsProtobuf.Message Transaction_Rollback where
        encodeMessage _ Transaction_Rollback{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Transaction_Rollback)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Transaction_Rollback where
        toJSONPB (Transaction_Rollback) = (HsJSONPB.object [])
        toEncodingPB (Transaction_Rollback) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Transaction_Rollback where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Rollback"
               (\ obj -> (Hs.pure Transaction_Rollback)))
 
instance HsJSONPB.ToJSON Transaction_Rollback where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Rollback where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Rollback where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Rollback",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Transaction_Rollback_Req = Transaction_Rollback_Req{}
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Rollback_Req where
        nameOf _ = (Hs.fromString "Transaction_Rollback_Req")
 
instance HsProtobuf.HasDefault Transaction_Rollback_Req
 
instance HsProtobuf.Message Transaction_Rollback_Req where
        encodeMessage _ Transaction_Rollback_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Transaction_Rollback_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Transaction_Rollback_Req where
        toJSONPB (Transaction_Rollback_Req) = (HsJSONPB.object [])
        toEncodingPB (Transaction_Rollback_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Transaction_Rollback_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Rollback_Req"
               (\ obj -> (Hs.pure Transaction_Rollback_Req)))
 
instance HsJSONPB.ToJSON Transaction_Rollback_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Rollback_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Rollback_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Rollback_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Transaction_Rollback_Res = Transaction_Rollback_Res{}
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Transaction_Rollback_Res where
        nameOf _ = (Hs.fromString "Transaction_Rollback_Res")
 
instance HsProtobuf.HasDefault Transaction_Rollback_Res
 
instance HsProtobuf.Message Transaction_Rollback_Res where
        encodeMessage _ Transaction_Rollback_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Transaction_Rollback_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Transaction_Rollback_Res where
        toJSONPB (Transaction_Rollback_Res) = (HsJSONPB.object [])
        toEncodingPB (Transaction_Rollback_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Transaction_Rollback_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Transaction_Rollback_Res"
               (\ obj -> (Hs.pure Transaction_Rollback_Res)))
 
instance HsJSONPB.ToJSON Transaction_Rollback_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Transaction_Rollback_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Transaction_Rollback_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Transaction_Rollback_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
