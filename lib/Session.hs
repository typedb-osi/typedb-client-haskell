{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Session where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Options
 
data Session = Session{}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Session where
        nameOf _ = (Hs.fromString "Session")
 
instance HsProtobuf.HasDefault Session
 
instance HsProtobuf.Message Session where
        encodeMessage _ Session{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Session)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Session where
        toJSONPB (Session) = (HsJSONPB.object [])
        toEncodingPB (Session) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Session where
        parseJSONPB
          = (HsJSONPB.withObject "Session" (\ obj -> (Hs.pure Session)))
 
instance HsJSONPB.ToJSON Session where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Session where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Session where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Session",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Session_Type = Session_TypeDATA
                  | Session_TypeSCHEMA
                  deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Session_Type where
        nameOf _ = (Hs.fromString "Session_Type")
 
instance HsProtobuf.HasDefault Session_Type
 
instance Hs.Bounded Session_Type where
        minBound = Session_TypeDATA
        maxBound = Session_TypeSCHEMA
 
instance Hs.Ord Session_Type where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum Session_Type where
        toProtoEnumMay 0 = Hs.Just Session_TypeDATA
        toProtoEnumMay 1 = Hs.Just Session_TypeSCHEMA
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (Session_TypeDATA) = 0
        fromProtoEnum (Session_TypeSCHEMA) = 1
 
instance HsJSONPB.ToJSONPB Session_Type where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB Session_Type where
        parseJSONPB (HsJSONPB.String "DATA") = Hs.pure Session_TypeDATA
        parseJSONPB (HsJSONPB.String "SCHEMA") = Hs.pure Session_TypeSCHEMA
        parseJSONPB v = (HsJSONPB.typeMismatch "Session_Type" v)
 
instance HsJSONPB.ToJSON Session_Type where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Session_Type where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite Session_Type
 
data Session_Open = Session_Open{}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Session_Open where
        nameOf _ = (Hs.fromString "Session_Open")
 
instance HsProtobuf.HasDefault Session_Open
 
instance HsProtobuf.Message Session_Open where
        encodeMessage _ Session_Open{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Session_Open)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Session_Open where
        toJSONPB (Session_Open) = (HsJSONPB.object [])
        toEncodingPB (Session_Open) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Session_Open where
        parseJSONPB
          = (HsJSONPB.withObject "Session_Open"
               (\ obj -> (Hs.pure Session_Open)))
 
instance HsJSONPB.ToJSON Session_Open where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Session_Open where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Session_Open where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Session_Open",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Session_Open_Req = Session_Open_Req{session_Open_ReqDatabase
                                         :: Hs.Text,
                                         session_Open_ReqType ::
                                         HsProtobuf.Enumerated Session.Session_Type,
                                         session_Open_ReqOptions :: Hs.Maybe Options.Options}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Session_Open_Req where
        nameOf _ = (Hs.fromString "Session_Open_Req")
 
instance HsProtobuf.HasDefault Session_Open_Req
 
instance HsProtobuf.Message Session_Open_Req where
        encodeMessage _
          Session_Open_Req{session_Open_ReqDatabase =
                             session_Open_ReqDatabase,
                           session_Open_ReqType = session_Open_ReqType,
                           session_Open_ReqOptions = session_Open_ReqOptions}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   session_Open_ReqDatabase),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   session_Open_ReqType),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Maybe Options.Options)
                      @(HsProtobuf.Nested Options.Options)
                      session_Open_ReqOptions))])
        decodeMessage _
          = (Hs.pure Session_Open_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Options.Options))
                 @(_ (Hs.Maybe Options.Options))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "database")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Options")))
                (HsProtobuf.Single "options")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Session_Open_Req where
        toJSONPB (Session_Open_Req f1 f2 f3)
          = (HsJSONPB.object
               ["database" .= f1, "type" .= f2, "options" .= f3])
        toEncodingPB (Session_Open_Req f1 f2 f3)
          = (HsJSONPB.pairs
               ["database" .= f1, "type" .= f2, "options" .= f3])
 
instance HsJSONPB.FromJSONPB Session_Open_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Session_Open_Req"
               (\ obj ->
                  (Hs.pure Session_Open_Req) <*> obj .: "database" <*> obj .: "type"
                    <*> obj .: "options"))
 
instance HsJSONPB.ToJSON Session_Open_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Session_Open_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Session_Open_Req where
        declareNamedSchema _
          = do let declare_database = HsJSONPB.declareSchemaRef
               session_Open_ReqDatabase <- declare_database Proxy.Proxy
               let declare_type = HsJSONPB.declareSchemaRef
               session_Open_ReqType <- declare_type Proxy.Proxy
               let declare_options = HsJSONPB.declareSchemaRef
               session_Open_ReqOptions <- declare_options Proxy.Proxy
               let _ = Hs.pure Session_Open_Req <*>
                         HsJSONPB.asProxy declare_database
                         <*> HsJSONPB.asProxy declare_type
                         <*> HsJSONPB.asProxy declare_options
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Session_Open_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("database", session_Open_ReqDatabase),
                                                        ("type", session_Open_ReqType),
                                                        ("options", session_Open_ReqOptions)]}})
 
data Session_Open_Res = Session_Open_Res{session_Open_ResSessionId
                                         :: Hs.ByteString,
                                         session_Open_ResServerDurationMillis :: Hs.Int32}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Session_Open_Res where
        nameOf _ = (Hs.fromString "Session_Open_Res")
 
instance HsProtobuf.HasDefault Session_Open_Res
 
instance HsProtobuf.Message Session_Open_Res where
        encodeMessage _
          Session_Open_Res{session_Open_ResSessionId =
                             session_Open_ResSessionId,
                           session_Open_ResServerDurationMillis =
                             session_Open_ResServerDurationMillis}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   session_Open_ResSessionId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   session_Open_ResServerDurationMillis)])
        decodeMessage _
          = (Hs.pure Session_Open_Res) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "session_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "server_duration_millis")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Session_Open_Res where
        toJSONPB (Session_Open_Res f1 f2)
          = (HsJSONPB.object
               ["session_id" .= f1, "server_duration_millis" .= f2])
        toEncodingPB (Session_Open_Res f1 f2)
          = (HsJSONPB.pairs
               ["session_id" .= f1, "server_duration_millis" .= f2])
 
instance HsJSONPB.FromJSONPB Session_Open_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Session_Open_Res"
               (\ obj ->
                  (Hs.pure Session_Open_Res) <*> obj .: "session_id" <*>
                    obj .: "server_duration_millis"))
 
instance HsJSONPB.ToJSON Session_Open_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Session_Open_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Session_Open_Res where
        declareNamedSchema _
          = do let declare_session_id = HsJSONPB.declareSchemaRef
               session_Open_ResSessionId <- declare_session_id Proxy.Proxy
               let declare_server_duration_millis = HsJSONPB.declareSchemaRef
               session_Open_ResServerDurationMillis <- declare_server_duration_millis
                                                         Proxy.Proxy
               let _ = Hs.pure Session_Open_Res <*>
                         HsJSONPB.asProxy declare_session_id
                         <*> HsJSONPB.asProxy declare_server_duration_millis
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Session_Open_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("session_id", session_Open_ResSessionId),
                                                        ("server_duration_millis",
                                                         session_Open_ResServerDurationMillis)]}})
 
data Session_Close = Session_Close{}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Session_Close where
        nameOf _ = (Hs.fromString "Session_Close")
 
instance HsProtobuf.HasDefault Session_Close
 
instance HsProtobuf.Message Session_Close where
        encodeMessage _ Session_Close{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Session_Close)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Session_Close where
        toJSONPB (Session_Close) = (HsJSONPB.object [])
        toEncodingPB (Session_Close) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Session_Close where
        parseJSONPB
          = (HsJSONPB.withObject "Session_Close"
               (\ obj -> (Hs.pure Session_Close)))
 
instance HsJSONPB.ToJSON Session_Close where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Session_Close where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Session_Close where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Session_Close",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Session_Close_Req = Session_Close_Req{session_Close_ReqSessionId
                                              :: Hs.ByteString}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Session_Close_Req where
        nameOf _ = (Hs.fromString "Session_Close_Req")
 
instance HsProtobuf.HasDefault Session_Close_Req
 
instance HsProtobuf.Message Session_Close_Req where
        encodeMessage _
          Session_Close_Req{session_Close_ReqSessionId =
                              session_Close_ReqSessionId}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   session_Close_ReqSessionId)])
        decodeMessage _
          = (Hs.pure Session_Close_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "session_id")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Session_Close_Req where
        toJSONPB (Session_Close_Req f1)
          = (HsJSONPB.object ["session_id" .= f1])
        toEncodingPB (Session_Close_Req f1)
          = (HsJSONPB.pairs ["session_id" .= f1])
 
instance HsJSONPB.FromJSONPB Session_Close_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Session_Close_Req"
               (\ obj -> (Hs.pure Session_Close_Req) <*> obj .: "session_id"))
 
instance HsJSONPB.ToJSON Session_Close_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Session_Close_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Session_Close_Req where
        declareNamedSchema _
          = do let declare_session_id = HsJSONPB.declareSchemaRef
               session_Close_ReqSessionId <- declare_session_id Proxy.Proxy
               let _ = Hs.pure Session_Close_Req <*>
                         HsJSONPB.asProxy declare_session_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Session_Close_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("session_id",
                                                         session_Close_ReqSessionId)]}})
 
data Session_Close_Res = Session_Close_Res{}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Session_Close_Res where
        nameOf _ = (Hs.fromString "Session_Close_Res")
 
instance HsProtobuf.HasDefault Session_Close_Res
 
instance HsProtobuf.Message Session_Close_Res where
        encodeMessage _ Session_Close_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Session_Close_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Session_Close_Res where
        toJSONPB (Session_Close_Res) = (HsJSONPB.object [])
        toEncodingPB (Session_Close_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Session_Close_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Session_Close_Res"
               (\ obj -> (Hs.pure Session_Close_Res)))
 
instance HsJSONPB.ToJSON Session_Close_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Session_Close_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Session_Close_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Session_Close_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Session_Pulse = Session_Pulse{}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Session_Pulse where
        nameOf _ = (Hs.fromString "Session_Pulse")
 
instance HsProtobuf.HasDefault Session_Pulse
 
instance HsProtobuf.Message Session_Pulse where
        encodeMessage _ Session_Pulse{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Session_Pulse)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Session_Pulse where
        toJSONPB (Session_Pulse) = (HsJSONPB.object [])
        toEncodingPB (Session_Pulse) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Session_Pulse where
        parseJSONPB
          = (HsJSONPB.withObject "Session_Pulse"
               (\ obj -> (Hs.pure Session_Pulse)))
 
instance HsJSONPB.ToJSON Session_Pulse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Session_Pulse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Session_Pulse where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Session_Pulse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Session_Pulse_Req = Session_Pulse_Req{session_Pulse_ReqSessionId
                                              :: Hs.ByteString}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Session_Pulse_Req where
        nameOf _ = (Hs.fromString "Session_Pulse_Req")
 
instance HsProtobuf.HasDefault Session_Pulse_Req
 
instance HsProtobuf.Message Session_Pulse_Req where
        encodeMessage _
          Session_Pulse_Req{session_Pulse_ReqSessionId =
                              session_Pulse_ReqSessionId}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   session_Pulse_ReqSessionId)])
        decodeMessage _
          = (Hs.pure Session_Pulse_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "session_id")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Session_Pulse_Req where
        toJSONPB (Session_Pulse_Req f1)
          = (HsJSONPB.object ["session_id" .= f1])
        toEncodingPB (Session_Pulse_Req f1)
          = (HsJSONPB.pairs ["session_id" .= f1])
 
instance HsJSONPB.FromJSONPB Session_Pulse_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Session_Pulse_Req"
               (\ obj -> (Hs.pure Session_Pulse_Req) <*> obj .: "session_id"))
 
instance HsJSONPB.ToJSON Session_Pulse_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Session_Pulse_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Session_Pulse_Req where
        declareNamedSchema _
          = do let declare_session_id = HsJSONPB.declareSchemaRef
               session_Pulse_ReqSessionId <- declare_session_id Proxy.Proxy
               let _ = Hs.pure Session_Pulse_Req <*>
                         HsJSONPB.asProxy declare_session_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Session_Pulse_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("session_id",
                                                         session_Pulse_ReqSessionId)]}})
 
newtype Session_Pulse_Res = Session_Pulse_Res{session_Pulse_ResAlive
                                              :: Hs.Bool}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Session_Pulse_Res where
        nameOf _ = (Hs.fromString "Session_Pulse_Res")
 
instance HsProtobuf.HasDefault Session_Pulse_Res
 
instance HsProtobuf.Message Session_Pulse_Res where
        encodeMessage _
          Session_Pulse_Res{session_Pulse_ResAlive = session_Pulse_ResAlive}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   session_Pulse_ResAlive)])
        decodeMessage _
          = (Hs.pure Session_Pulse_Res) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "alive")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Session_Pulse_Res where
        toJSONPB (Session_Pulse_Res f1) = (HsJSONPB.object ["alive" .= f1])
        toEncodingPB (Session_Pulse_Res f1)
          = (HsJSONPB.pairs ["alive" .= f1])
 
instance HsJSONPB.FromJSONPB Session_Pulse_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Session_Pulse_Res"
               (\ obj -> (Hs.pure Session_Pulse_Res) <*> obj .: "alive"))
 
instance HsJSONPB.ToJSON Session_Pulse_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Session_Pulse_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Session_Pulse_Res where
        declareNamedSchema _
          = do let declare_alive = HsJSONPB.declareSchemaRef
               session_Pulse_ResAlive <- declare_alive Proxy.Proxy
               let _ = Hs.pure Session_Pulse_Res <*>
                         HsJSONPB.asProxy declare_alive
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Session_Pulse_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("alive", session_Pulse_ResAlive)]}})