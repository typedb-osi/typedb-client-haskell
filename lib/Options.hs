{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Options where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data Options = Options{optionsInferOpt :: Hs.Maybe OptionsInferOpt,
                       optionsTraceInferenceOpt :: Hs.Maybe OptionsTraceInferenceOpt,
                       optionsExplainOpt :: Hs.Maybe OptionsExplainOpt,
                       optionsParallelOpt :: Hs.Maybe OptionsParallelOpt,
                       optionsPrefetchSizeOpt :: Hs.Maybe OptionsPrefetchSizeOpt,
                       optionsPrefetchOpt :: Hs.Maybe OptionsPrefetchOpt,
                       optionsSessionIdleTimeoutOpt ::
                       Hs.Maybe OptionsSessionIdleTimeoutOpt,
                       optionsSchemaLockAcquireTimeoutOpt ::
                       Hs.Maybe OptionsSchemaLockAcquireTimeoutOpt,
                       optionsReadAnyReplicaOpt :: Hs.Maybe OptionsReadAnyReplicaOpt}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Options where
        nameOf _ = (Hs.fromString "Options")
 
instance HsProtobuf.HasDefault Options
 
instance HsProtobuf.Message Options where
        encodeMessage _
          Options{optionsInferOpt = optionsInferOpt,
                  optionsTraceInferenceOpt = optionsTraceInferenceOpt,
                  optionsExplainOpt = optionsExplainOpt,
                  optionsParallelOpt = optionsParallelOpt,
                  optionsPrefetchSizeOpt = optionsPrefetchSizeOpt,
                  optionsPrefetchOpt = optionsPrefetchOpt,
                  optionsSessionIdleTimeoutOpt = optionsSessionIdleTimeoutOpt,
                  optionsSchemaLockAcquireTimeoutOpt =
                    optionsSchemaLockAcquireTimeoutOpt,
                  optionsReadAnyReplicaOpt = optionsReadAnyReplicaOpt}
          = (Hs.mconcat
               [case optionsInferOpt of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             OptionsInferOptInfer y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (HsProtobuf.ForceEmit y)),
                case optionsTraceInferenceOpt of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             OptionsTraceInferenceOptTraceInference y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (HsProtobuf.ForceEmit y)),
                case optionsExplainOpt of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             OptionsExplainOptExplain y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (HsProtobuf.ForceEmit y)),
                case optionsParallelOpt of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             OptionsParallelOptParallel y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (HsProtobuf.ForceEmit y)),
                case optionsPrefetchSizeOpt of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             OptionsPrefetchSizeOptPrefetchSize y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (HsProtobuf.ForceEmit y)),
                case optionsPrefetchOpt of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             OptionsPrefetchOptPrefetch y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                                     (HsProtobuf.ForceEmit y)),
                case optionsSessionIdleTimeoutOpt of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             OptionsSessionIdleTimeoutOptSessionIdleTimeoutMillis y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                                     (HsProtobuf.ForceEmit y)),
                case optionsSchemaLockAcquireTimeoutOpt of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             OptionsSchemaLockAcquireTimeoutOptSchemaLockAcquireTimeoutMillis y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                                     (HsProtobuf.ForceEmit y)),
                case optionsReadAnyReplicaOpt of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             OptionsReadAnyReplicaOptReadAnyReplica y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 9)
                                     (HsProtobuf.ForceEmit y))])
        decodeMessage _
          = (Hs.pure Options) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.Just Hs.. OptionsInferOptInfer)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.Just Hs.. OptionsTraceInferenceOptTraceInference)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.Just Hs.. OptionsExplainOptExplain)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.Just Hs.. OptionsParallelOptParallel)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 5),
                   (Hs.pure (Hs.Just Hs.. OptionsPrefetchSizeOptPrefetchSize)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 6),
                   (Hs.pure (Hs.Just Hs.. OptionsPrefetchOptPrefetch)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 7),
                   (Hs.pure
                      (Hs.Just Hs..
                         OptionsSessionIdleTimeoutOptSessionIdleTimeoutMillis))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 8),
                   (Hs.pure
                      (Hs.Just Hs..
                         OptionsSchemaLockAcquireTimeoutOptSchemaLockAcquireTimeoutMillis))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 9),
                   (Hs.pure (Hs.Just Hs.. OptionsReadAnyReplicaOptReadAnyReplica)) <*>
                     HsProtobuf.decodeMessageField)])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Options where
        toJSONPB (Options f1 f2 f3 f4 f5 f6 f7 f8 f9)
          = (HsJSONPB.object
               [(let encodeInfer_opt
                       = (case f1 of
                              Hs.Just (OptionsInferOptInfer f1) -> (HsJSONPB.pair "infer" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("infer_opt" .= (HsJSONPB.objectOrNull [encodeInfer_opt] options))
                         options
                       else encodeInfer_opt options),
                (let encodeTrace_inference_opt
                       = (case f2 of
                              Hs.Just (OptionsTraceInferenceOptTraceInference f2)
                                -> (HsJSONPB.pair "trace_inference" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("trace_inference_opt" .=
                          (HsJSONPB.objectOrNull [encodeTrace_inference_opt] options))
                         options
                       else encodeTrace_inference_opt options),
                (let encodeExplain_opt
                       = (case f3 of
                              Hs.Just (OptionsExplainOptExplain f3)
                                -> (HsJSONPB.pair "explain" f3)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("explain_opt" .=
                          (HsJSONPB.objectOrNull [encodeExplain_opt] options))
                         options
                       else encodeExplain_opt options),
                (let encodeParallel_opt
                       = (case f4 of
                              Hs.Just (OptionsParallelOptParallel f4)
                                -> (HsJSONPB.pair "parallel" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("parallel_opt" .=
                          (HsJSONPB.objectOrNull [encodeParallel_opt] options))
                         options
                       else encodeParallel_opt options),
                (let encodePrefetch_size_opt
                       = (case f5 of
                              Hs.Just (OptionsPrefetchSizeOptPrefetchSize f5)
                                -> (HsJSONPB.pair "prefetch_size" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("prefetch_size_opt" .=
                          (HsJSONPB.objectOrNull [encodePrefetch_size_opt] options))
                         options
                       else encodePrefetch_size_opt options),
                (let encodePrefetch_opt
                       = (case f6 of
                              Hs.Just (OptionsPrefetchOptPrefetch f6)
                                -> (HsJSONPB.pair "prefetch" f6)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("prefetch_opt" .=
                          (HsJSONPB.objectOrNull [encodePrefetch_opt] options))
                         options
                       else encodePrefetch_opt options),
                (let encodeSession_idle_timeout_opt
                       = (case f7 of
                              Hs.Just (OptionsSessionIdleTimeoutOptSessionIdleTimeoutMillis f7)
                                -> (HsJSONPB.pair "session_idle_timeout_millis" f7)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("session_idle_timeout_opt" .=
                          (HsJSONPB.objectOrNull [encodeSession_idle_timeout_opt] options))
                         options
                       else encodeSession_idle_timeout_opt options),
                (let encodeSchema_lock_acquire_timeout_opt
                       = (case f8 of
                              Hs.Just
                                (OptionsSchemaLockAcquireTimeoutOptSchemaLockAcquireTimeoutMillis
                                   f8)
                                -> (HsJSONPB.pair "schema_lock_acquire_timeout_millis" f8)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("schema_lock_acquire_timeout_opt" .=
                          (HsJSONPB.objectOrNull [encodeSchema_lock_acquire_timeout_opt]
                             options))
                         options
                       else encodeSchema_lock_acquire_timeout_opt options),
                (let encodeRead_any_replica_opt
                       = (case f9 of
                              Hs.Just (OptionsReadAnyReplicaOptReadAnyReplica f9)
                                -> (HsJSONPB.pair "read_any_replica" f9)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("read_any_replica_opt" .=
                          (HsJSONPB.objectOrNull [encodeRead_any_replica_opt] options))
                         options
                       else encodeRead_any_replica_opt options)])
        toEncodingPB (Options f1 f2 f3 f4 f5 f6 f7 f8 f9)
          = (HsJSONPB.pairs
               [(let encodeInfer_opt
                       = (case f1 of
                              Hs.Just (OptionsInferOptInfer f1) -> (HsJSONPB.pair "infer" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("infer_opt" .= (HsJSONPB.pairsOrNull [encodeInfer_opt] options))
                         options
                       else encodeInfer_opt options),
                (let encodeTrace_inference_opt
                       = (case f2 of
                              Hs.Just (OptionsTraceInferenceOptTraceInference f2)
                                -> (HsJSONPB.pair "trace_inference" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("trace_inference_opt" .=
                          (HsJSONPB.pairsOrNull [encodeTrace_inference_opt] options))
                         options
                       else encodeTrace_inference_opt options),
                (let encodeExplain_opt
                       = (case f3 of
                              Hs.Just (OptionsExplainOptExplain f3)
                                -> (HsJSONPB.pair "explain" f3)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("explain_opt" .=
                          (HsJSONPB.pairsOrNull [encodeExplain_opt] options))
                         options
                       else encodeExplain_opt options),
                (let encodeParallel_opt
                       = (case f4 of
                              Hs.Just (OptionsParallelOptParallel f4)
                                -> (HsJSONPB.pair "parallel" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("parallel_opt" .=
                          (HsJSONPB.pairsOrNull [encodeParallel_opt] options))
                         options
                       else encodeParallel_opt options),
                (let encodePrefetch_size_opt
                       = (case f5 of
                              Hs.Just (OptionsPrefetchSizeOptPrefetchSize f5)
                                -> (HsJSONPB.pair "prefetch_size" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("prefetch_size_opt" .=
                          (HsJSONPB.pairsOrNull [encodePrefetch_size_opt] options))
                         options
                       else encodePrefetch_size_opt options),
                (let encodePrefetch_opt
                       = (case f6 of
                              Hs.Just (OptionsPrefetchOptPrefetch f6)
                                -> (HsJSONPB.pair "prefetch" f6)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("prefetch_opt" .=
                          (HsJSONPB.pairsOrNull [encodePrefetch_opt] options))
                         options
                       else encodePrefetch_opt options),
                (let encodeSession_idle_timeout_opt
                       = (case f7 of
                              Hs.Just (OptionsSessionIdleTimeoutOptSessionIdleTimeoutMillis f7)
                                -> (HsJSONPB.pair "session_idle_timeout_millis" f7)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("session_idle_timeout_opt" .=
                          (HsJSONPB.pairsOrNull [encodeSession_idle_timeout_opt] options))
                         options
                       else encodeSession_idle_timeout_opt options),
                (let encodeSchema_lock_acquire_timeout_opt
                       = (case f8 of
                              Hs.Just
                                (OptionsSchemaLockAcquireTimeoutOptSchemaLockAcquireTimeoutMillis
                                   f8)
                                -> (HsJSONPB.pair "schema_lock_acquire_timeout_millis" f8)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("schema_lock_acquire_timeout_opt" .=
                          (HsJSONPB.pairsOrNull [encodeSchema_lock_acquire_timeout_opt]
                             options))
                         options
                       else encodeSchema_lock_acquire_timeout_opt options),
                (let encodeRead_any_replica_opt
                       = (case f9 of
                              Hs.Just (OptionsReadAnyReplicaOptReadAnyReplica f9)
                                -> (HsJSONPB.pair "read_any_replica" f9)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("read_any_replica_opt" .=
                          (HsJSONPB.pairsOrNull [encodeRead_any_replica_opt] options))
                         options
                       else encodeRead_any_replica_opt options)])
 
instance HsJSONPB.FromJSONPB Options where
        parseJSONPB
          = (HsJSONPB.withObject "Options"
               (\ obj ->
                  (Hs.pure Options) <*>
                    (let parseInfer_opt parseObj
                           = Hs.msum
                               [Hs.Just Hs.. OptionsInferOptInfer <$>
                                  (HsJSONPB.parseField parseObj "infer"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "infer_opt") Hs.>>=
                          (HsJSONPB.withObject "infer_opt" parseInfer_opt))
                         <|> (parseInfer_opt obj))
                    <*>
                    (let parseTrace_inference_opt parseObj
                           = Hs.msum
                               [Hs.Just Hs.. OptionsTraceInferenceOptTraceInference <$>
                                  (HsJSONPB.parseField parseObj "trace_inference"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "trace_inference_opt") Hs.>>=
                          (HsJSONPB.withObject "trace_inference_opt"
                             parseTrace_inference_opt))
                         <|> (parseTrace_inference_opt obj))
                    <*>
                    (let parseExplain_opt parseObj
                           = Hs.msum
                               [Hs.Just Hs.. OptionsExplainOptExplain <$>
                                  (HsJSONPB.parseField parseObj "explain"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "explain_opt") Hs.>>=
                          (HsJSONPB.withObject "explain_opt" parseExplain_opt))
                         <|> (parseExplain_opt obj))
                    <*>
                    (let parseParallel_opt parseObj
                           = Hs.msum
                               [Hs.Just Hs.. OptionsParallelOptParallel <$>
                                  (HsJSONPB.parseField parseObj "parallel"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "parallel_opt") Hs.>>=
                          (HsJSONPB.withObject "parallel_opt" parseParallel_opt))
                         <|> (parseParallel_opt obj))
                    <*>
                    (let parsePrefetch_size_opt parseObj
                           = Hs.msum
                               [Hs.Just Hs.. OptionsPrefetchSizeOptPrefetchSize <$>
                                  (HsJSONPB.parseField parseObj "prefetch_size"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "prefetch_size_opt") Hs.>>=
                          (HsJSONPB.withObject "prefetch_size_opt" parsePrefetch_size_opt))
                         <|> (parsePrefetch_size_opt obj))
                    <*>
                    (let parsePrefetch_opt parseObj
                           = Hs.msum
                               [Hs.Just Hs.. OptionsPrefetchOptPrefetch <$>
                                  (HsJSONPB.parseField parseObj "prefetch"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "prefetch_opt") Hs.>>=
                          (HsJSONPB.withObject "prefetch_opt" parsePrefetch_opt))
                         <|> (parsePrefetch_opt obj))
                    <*>
                    (let parseSession_idle_timeout_opt parseObj
                           = Hs.msum
                               [Hs.Just Hs.. OptionsSessionIdleTimeoutOptSessionIdleTimeoutMillis
                                  <$> (HsJSONPB.parseField parseObj "session_idle_timeout_millis"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "session_idle_timeout_opt") Hs.>>=
                          (HsJSONPB.withObject "session_idle_timeout_opt"
                             parseSession_idle_timeout_opt))
                         <|> (parseSession_idle_timeout_opt obj))
                    <*>
                    (let parseSchema_lock_acquire_timeout_opt parseObj
                           = Hs.msum
                               [Hs.Just Hs..
                                  OptionsSchemaLockAcquireTimeoutOptSchemaLockAcquireTimeoutMillis
                                  <$>
                                  (HsJSONPB.parseField parseObj
                                     "schema_lock_acquire_timeout_millis"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "schema_lock_acquire_timeout_opt") Hs.>>=
                          (HsJSONPB.withObject "schema_lock_acquire_timeout_opt"
                             parseSchema_lock_acquire_timeout_opt))
                         <|> (parseSchema_lock_acquire_timeout_opt obj))
                    <*>
                    (let parseRead_any_replica_opt parseObj
                           = Hs.msum
                               [Hs.Just Hs.. OptionsReadAnyReplicaOptReadAnyReplica <$>
                                  (HsJSONPB.parseField parseObj "read_any_replica"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "read_any_replica_opt") Hs.>>=
                          (HsJSONPB.withObject "read_any_replica_opt"
                             parseRead_any_replica_opt))
                         <|> (parseRead_any_replica_opt obj))))
 
instance HsJSONPB.ToJSON Options where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Options where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Options where
        declareNamedSchema _
          = do let declare_infer_opt = HsJSONPB.declareSchemaRef
               optionsInferOpt <- declare_infer_opt Proxy.Proxy
               let declare_trace_inference_opt = HsJSONPB.declareSchemaRef
               optionsTraceInferenceOpt <- declare_trace_inference_opt Proxy.Proxy
               let declare_explain_opt = HsJSONPB.declareSchemaRef
               optionsExplainOpt <- declare_explain_opt Proxy.Proxy
               let declare_parallel_opt = HsJSONPB.declareSchemaRef
               optionsParallelOpt <- declare_parallel_opt Proxy.Proxy
               let declare_prefetch_size_opt = HsJSONPB.declareSchemaRef
               optionsPrefetchSizeOpt <- declare_prefetch_size_opt Proxy.Proxy
               let declare_prefetch_opt = HsJSONPB.declareSchemaRef
               optionsPrefetchOpt <- declare_prefetch_opt Proxy.Proxy
               let declare_session_idle_timeout_opt = HsJSONPB.declareSchemaRef
               optionsSessionIdleTimeoutOpt <- declare_session_idle_timeout_opt
                                                 Proxy.Proxy
               let declare_schema_lock_acquire_timeout_opt
                     = HsJSONPB.declareSchemaRef
               optionsSchemaLockAcquireTimeoutOpt <- declare_schema_lock_acquire_timeout_opt
                                                       Proxy.Proxy
               let declare_read_any_replica_opt = HsJSONPB.declareSchemaRef
               optionsReadAnyReplicaOpt <- declare_read_any_replica_opt
                                             Proxy.Proxy
               let _ = Hs.pure Options <*> HsJSONPB.asProxy declare_infer_opt <*>
                         HsJSONPB.asProxy declare_trace_inference_opt
                         <*> HsJSONPB.asProxy declare_explain_opt
                         <*> HsJSONPB.asProxy declare_parallel_opt
                         <*> HsJSONPB.asProxy declare_prefetch_size_opt
                         <*> HsJSONPB.asProxy declare_prefetch_opt
                         <*> HsJSONPB.asProxy declare_session_idle_timeout_opt
                         <*> HsJSONPB.asProxy declare_schema_lock_acquire_timeout_opt
                         <*> HsJSONPB.asProxy declare_read_any_replica_opt
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Options",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("infer_opt", optionsInferOpt),
                                                        ("trace_inference_opt",
                                                         optionsTraceInferenceOpt),
                                                        ("explain_opt", optionsExplainOpt),
                                                        ("parallel_opt", optionsParallelOpt),
                                                        ("prefetch_size_opt",
                                                         optionsPrefetchSizeOpt),
                                                        ("prefetch_opt", optionsPrefetchOpt),
                                                        ("session_idle_timeout_opt",
                                                         optionsSessionIdleTimeoutOpt),
                                                        ("schema_lock_acquire_timeout_opt",
                                                         optionsSchemaLockAcquireTimeoutOpt),
                                                        ("read_any_replica_opt",
                                                         optionsReadAnyReplicaOpt)]}})
 
data OptionsInferOpt = OptionsInferOptInfer Hs.Bool
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named OptionsInferOpt where
        nameOf _ = (Hs.fromString "OptionsInferOpt")
 
instance HsJSONPB.ToSchema OptionsInferOpt where
        declareNamedSchema _
          = do let declare_infer = HsJSONPB.declareSchemaRef
               optionsInferOptInfer <- declare_infer Proxy.Proxy
               let _ = Hs.pure OptionsInferOptInfer <*>
                         HsJSONPB.asProxy declare_infer
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "OptionsInferOpt",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("infer", optionsInferOptInfer)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data OptionsTraceInferenceOpt = OptionsTraceInferenceOptTraceInference Hs.Bool
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named OptionsTraceInferenceOpt where
        nameOf _ = (Hs.fromString "OptionsTraceInferenceOpt")
 
instance HsJSONPB.ToSchema OptionsTraceInferenceOpt where
        declareNamedSchema _
          = do let declare_trace_inference = HsJSONPB.declareSchemaRef
               optionsTraceInferenceOptTraceInference <- declare_trace_inference
                                                           Proxy.Proxy
               let _ = Hs.pure OptionsTraceInferenceOptTraceInference <*>
                         HsJSONPB.asProxy declare_trace_inference
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "OptionsTraceInferenceOpt",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("trace_inference",
                                                         optionsTraceInferenceOptTraceInference)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data OptionsExplainOpt = OptionsExplainOptExplain Hs.Bool
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named OptionsExplainOpt where
        nameOf _ = (Hs.fromString "OptionsExplainOpt")
 
instance HsJSONPB.ToSchema OptionsExplainOpt where
        declareNamedSchema _
          = do let declare_explain = HsJSONPB.declareSchemaRef
               optionsExplainOptExplain <- declare_explain Proxy.Proxy
               let _ = Hs.pure OptionsExplainOptExplain <*>
                         HsJSONPB.asProxy declare_explain
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "OptionsExplainOpt",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("explain", optionsExplainOptExplain)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data OptionsParallelOpt = OptionsParallelOptParallel Hs.Bool
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named OptionsParallelOpt where
        nameOf _ = (Hs.fromString "OptionsParallelOpt")
 
instance HsJSONPB.ToSchema OptionsParallelOpt where
        declareNamedSchema _
          = do let declare_parallel = HsJSONPB.declareSchemaRef
               optionsParallelOptParallel <- declare_parallel Proxy.Proxy
               let _ = Hs.pure OptionsParallelOptParallel <*>
                         HsJSONPB.asProxy declare_parallel
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "OptionsParallelOpt",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("parallel", optionsParallelOptParallel)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data OptionsPrefetchSizeOpt = OptionsPrefetchSizeOptPrefetchSize Hs.Int32
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named OptionsPrefetchSizeOpt where
        nameOf _ = (Hs.fromString "OptionsPrefetchSizeOpt")
 
instance HsJSONPB.ToSchema OptionsPrefetchSizeOpt where
        declareNamedSchema _
          = do let declare_prefetch_size = HsJSONPB.declareSchemaRef
               optionsPrefetchSizeOptPrefetchSize <- declare_prefetch_size
                                                       Proxy.Proxy
               let _ = Hs.pure OptionsPrefetchSizeOptPrefetchSize <*>
                         HsJSONPB.asProxy declare_prefetch_size
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "OptionsPrefetchSizeOpt",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("prefetch_size",
                                                         optionsPrefetchSizeOptPrefetchSize)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data OptionsPrefetchOpt = OptionsPrefetchOptPrefetch Hs.Bool
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named OptionsPrefetchOpt where
        nameOf _ = (Hs.fromString "OptionsPrefetchOpt")
 
instance HsJSONPB.ToSchema OptionsPrefetchOpt where
        declareNamedSchema _
          = do let declare_prefetch = HsJSONPB.declareSchemaRef
               optionsPrefetchOptPrefetch <- declare_prefetch Proxy.Proxy
               let _ = Hs.pure OptionsPrefetchOptPrefetch <*>
                         HsJSONPB.asProxy declare_prefetch
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "OptionsPrefetchOpt",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("prefetch", optionsPrefetchOptPrefetch)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data OptionsSessionIdleTimeoutOpt = OptionsSessionIdleTimeoutOptSessionIdleTimeoutMillis Hs.Int32
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named OptionsSessionIdleTimeoutOpt where
        nameOf _ = (Hs.fromString "OptionsSessionIdleTimeoutOpt")
 
instance HsJSONPB.ToSchema OptionsSessionIdleTimeoutOpt where
        declareNamedSchema _
          = do let declare_session_idle_timeout_millis
                     = HsJSONPB.declareSchemaRef
               optionsSessionIdleTimeoutOptSessionIdleTimeoutMillis <- declare_session_idle_timeout_millis
                                                                         Proxy.Proxy
               let _ = Hs.pure
                         OptionsSessionIdleTimeoutOptSessionIdleTimeoutMillis
                         <*> HsJSONPB.asProxy declare_session_idle_timeout_millis
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "OptionsSessionIdleTimeoutOpt",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("session_idle_timeout_millis",
                                                         optionsSessionIdleTimeoutOptSessionIdleTimeoutMillis)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data OptionsSchemaLockAcquireTimeoutOpt = OptionsSchemaLockAcquireTimeoutOptSchemaLockAcquireTimeoutMillis Hs.Int32
                                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named OptionsSchemaLockAcquireTimeoutOpt where
        nameOf _ = (Hs.fromString "OptionsSchemaLockAcquireTimeoutOpt")
 
instance HsJSONPB.ToSchema OptionsSchemaLockAcquireTimeoutOpt where
        declareNamedSchema _
          = do let declare_schema_lock_acquire_timeout_millis
                     = HsJSONPB.declareSchemaRef
               optionsSchemaLockAcquireTimeoutOptSchemaLockAcquireTimeoutMillis <- declare_schema_lock_acquire_timeout_millis
                                                                                     Proxy.Proxy
               let _ = Hs.pure
                         OptionsSchemaLockAcquireTimeoutOptSchemaLockAcquireTimeoutMillis
                         <*> HsJSONPB.asProxy declare_schema_lock_acquire_timeout_millis
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "OptionsSchemaLockAcquireTimeoutOpt",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("schema_lock_acquire_timeout_millis",
                                                         optionsSchemaLockAcquireTimeoutOptSchemaLockAcquireTimeoutMillis)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data OptionsReadAnyReplicaOpt = OptionsReadAnyReplicaOptReadAnyReplica Hs.Bool
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named OptionsReadAnyReplicaOpt where
        nameOf _ = (Hs.fromString "OptionsReadAnyReplicaOpt")
 
instance HsJSONPB.ToSchema OptionsReadAnyReplicaOpt where
        declareNamedSchema _
          = do let declare_read_any_replica = HsJSONPB.declareSchemaRef
               optionsReadAnyReplicaOptReadAnyReplica <- declare_read_any_replica
                                                           Proxy.Proxy
               let _ = Hs.pure OptionsReadAnyReplicaOptReadAnyReplica <*>
                         HsJSONPB.asProxy declare_read_any_replica
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "OptionsReadAnyReplicaOpt",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("read_any_replica",
                                                         optionsReadAnyReplicaOptReadAnyReplica)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})