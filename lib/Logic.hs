{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Logic where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Answer
 
data LogicManager = LogicManager{}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager where
        nameOf _ = (Hs.fromString "LogicManager")
 
instance HsProtobuf.HasDefault LogicManager
 
instance HsProtobuf.Message LogicManager where
        encodeMessage _ LogicManager{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure LogicManager)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB LogicManager where
        toJSONPB (LogicManager) = (HsJSONPB.object [])
        toEncodingPB (LogicManager) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB LogicManager where
        parseJSONPB
          = (HsJSONPB.withObject "LogicManager"
               (\ obj -> (Hs.pure LogicManager)))
 
instance HsJSONPB.ToJSON LogicManager where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogicManager where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LogicManager where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype LogicManager_Req = LogicManager_Req{logicManager_ReqReq ::
                                            Hs.Maybe LogicManager_ReqReq}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_Req where
        nameOf _ = (Hs.fromString "LogicManager_Req")
 
instance HsProtobuf.HasDefault LogicManager_Req
 
instance HsProtobuf.Message LogicManager_Req where
        encodeMessage _
          LogicManager_Req{logicManager_ReqReq = logicManager_ReqReq}
          = (Hs.mconcat
               [case logicManager_ReqReq of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             LogicManager_ReqReqGetRuleReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Logic.LogicManager_GetRule_Req)
                                        @(HsProtobuf.Nested Logic.LogicManager_GetRule_Req)
                                        (Hs.Just y)))
                             LogicManager_ReqReqPutRuleReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Logic.LogicManager_PutRule_Req)
                                        @(HsProtobuf.Nested Logic.LogicManager_PutRule_Req)
                                        (Hs.Just y)))
                             LogicManager_ReqReqGetRulesReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Logic.LogicManager_GetRules_Req)
                                        @(HsProtobuf.Nested Logic.LogicManager_GetRules_Req)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure LogicManager_Req) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap LogicManager_ReqReqGetRuleReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.LogicManager_GetRule_Req))
                        @(_ (Hs.Maybe Logic.LogicManager_GetRule_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap LogicManager_ReqReqPutRuleReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.LogicManager_PutRule_Req))
                        @(_ (Hs.Maybe Logic.LogicManager_PutRule_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap LogicManager_ReqReqGetRulesReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.LogicManager_GetRules_Req))
                        @(_ (Hs.Maybe Logic.LogicManager_GetRules_Req))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB LogicManager_Req where
        toJSONPB (LogicManager_Req f1_or_f2_or_f3)
          = (HsJSONPB.object
               [(let encodeReq
                       = (case f1_or_f2_or_f3 of
                              Hs.Just (LogicManager_ReqReqGetRuleReq f1)
                                -> (HsJSONPB.pair "get_rule_req" f1)
                              Hs.Just (LogicManager_ReqReqPutRuleReq f2)
                                -> (HsJSONPB.pair "put_rule_req" f2)
                              Hs.Just (LogicManager_ReqReqGetRulesReq f3)
                                -> (HsJSONPB.pair "get_rules_req" f3)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.objectOrNull [encodeReq] options)) options else
                       encodeReq options)])
        toEncodingPB (LogicManager_Req f1_or_f2_or_f3)
          = (HsJSONPB.pairs
               [(let encodeReq
                       = (case f1_or_f2_or_f3 of
                              Hs.Just (LogicManager_ReqReqGetRuleReq f1)
                                -> (HsJSONPB.pair "get_rule_req" f1)
                              Hs.Just (LogicManager_ReqReqPutRuleReq f2)
                                -> (HsJSONPB.pair "put_rule_req" f2)
                              Hs.Just (LogicManager_ReqReqGetRulesReq f3)
                                -> (HsJSONPB.pair "get_rules_req" f3)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.pairsOrNull [encodeReq] options)) options else
                       encodeReq options)])
 
instance HsJSONPB.FromJSONPB LogicManager_Req where
        parseJSONPB
          = (HsJSONPB.withObject "LogicManager_Req"
               (\ obj ->
                  (Hs.pure LogicManager_Req) <*>
                    (let parseReq parseObj
                           = Hs.msum
                               [Hs.Just Hs.. LogicManager_ReqReqGetRuleReq <$>
                                  (HsJSONPB.parseField parseObj "get_rule_req"),
                                Hs.Just Hs.. LogicManager_ReqReqPutRuleReq <$>
                                  (HsJSONPB.parseField parseObj "put_rule_req"),
                                Hs.Just Hs.. LogicManager_ReqReqGetRulesReq <$>
                                  (HsJSONPB.parseField parseObj "get_rules_req"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "req") Hs.>>= (HsJSONPB.withObject "req" parseReq)) <|>
                         (parseReq obj))))
 
instance HsJSONPB.ToJSON LogicManager_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogicManager_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LogicManager_Req where
        declareNamedSchema _
          = do let declare_req = HsJSONPB.declareSchemaRef
               logicManager_ReqReq <- declare_req Proxy.Proxy
               let _ = Hs.pure LogicManager_Req <*> HsJSONPB.asProxy declare_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("req", logicManager_ReqReq)]}})
 
data LogicManager_ReqReq = LogicManager_ReqReqGetRuleReq Logic.LogicManager_GetRule_Req
                         | LogicManager_ReqReqPutRuleReq Logic.LogicManager_PutRule_Req
                         | LogicManager_ReqReqGetRulesReq Logic.LogicManager_GetRules_Req
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_ReqReq where
        nameOf _ = (Hs.fromString "LogicManager_ReqReq")
 
instance HsJSONPB.ToSchema LogicManager_ReqReq where
        declareNamedSchema _
          = do let declare_get_rule_req = HsJSONPB.declareSchemaRef
               logicManager_ReqReqGetRuleReq <- declare_get_rule_req Proxy.Proxy
               let _ = Hs.pure LogicManager_ReqReqGetRuleReq <*>
                         HsJSONPB.asProxy declare_get_rule_req
               let declare_put_rule_req = HsJSONPB.declareSchemaRef
               logicManager_ReqReqPutRuleReq <- declare_put_rule_req Proxy.Proxy
               let _ = Hs.pure LogicManager_ReqReqPutRuleReq <*>
                         HsJSONPB.asProxy declare_put_rule_req
               let declare_get_rules_req = HsJSONPB.declareSchemaRef
               logicManager_ReqReqGetRulesReq <- declare_get_rules_req Proxy.Proxy
               let _ = Hs.pure LogicManager_ReqReqGetRulesReq <*>
                         HsJSONPB.asProxy declare_get_rules_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_ReqReq",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("get_rule_req",
                                                         logicManager_ReqReqGetRuleReq),
                                                        ("put_rule_req",
                                                         logicManager_ReqReqPutRuleReq),
                                                        ("get_rules_req",
                                                         logicManager_ReqReqGetRulesReq)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype LogicManager_Res = LogicManager_Res{logicManager_ResRes ::
                                            Hs.Maybe LogicManager_ResRes}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_Res where
        nameOf _ = (Hs.fromString "LogicManager_Res")
 
instance HsProtobuf.HasDefault LogicManager_Res
 
instance HsProtobuf.Message LogicManager_Res where
        encodeMessage _
          LogicManager_Res{logicManager_ResRes = logicManager_ResRes}
          = (Hs.mconcat
               [case logicManager_ResRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             LogicManager_ResResGetRuleRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Logic.LogicManager_GetRule_Res)
                                        @(HsProtobuf.Nested Logic.LogicManager_GetRule_Res)
                                        (Hs.Just y)))
                             LogicManager_ResResPutRuleRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Logic.LogicManager_PutRule_Res)
                                        @(HsProtobuf.Nested Logic.LogicManager_PutRule_Res)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure LogicManager_Res) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap LogicManager_ResResGetRuleRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.LogicManager_GetRule_Res))
                        @(_ (Hs.Maybe Logic.LogicManager_GetRule_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap LogicManager_ResResPutRuleRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.LogicManager_PutRule_Res))
                        @(_ (Hs.Maybe Logic.LogicManager_PutRule_Res))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB LogicManager_Res where
        toJSONPB (LogicManager_Res f1_or_f2)
          = (HsJSONPB.object
               [(let encodeRes
                       = (case f1_or_f2 of
                              Hs.Just (LogicManager_ResResGetRuleRes f1)
                                -> (HsJSONPB.pair "get_rule_res" f1)
                              Hs.Just (LogicManager_ResResPutRuleRes f2)
                                -> (HsJSONPB.pair "put_rule_res" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB (LogicManager_Res f1_or_f2)
          = (HsJSONPB.pairs
               [(let encodeRes
                       = (case f1_or_f2 of
                              Hs.Just (LogicManager_ResResGetRuleRes f1)
                                -> (HsJSONPB.pair "get_rule_res" f1)
                              Hs.Just (LogicManager_ResResPutRuleRes f2)
                                -> (HsJSONPB.pair "put_rule_res" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB LogicManager_Res where
        parseJSONPB
          = (HsJSONPB.withObject "LogicManager_Res"
               (\ obj ->
                  (Hs.pure LogicManager_Res) <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. LogicManager_ResResGetRuleRes <$>
                                  (HsJSONPB.parseField parseObj "get_rule_res"),
                                Hs.Just Hs.. LogicManager_ResResPutRuleRes <$>
                                  (HsJSONPB.parseField parseObj "put_rule_res"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON LogicManager_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogicManager_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LogicManager_Res where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               logicManager_ResRes <- declare_res Proxy.Proxy
               let _ = Hs.pure LogicManager_Res <*> HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res", logicManager_ResRes)]}})
 
data LogicManager_ResRes = LogicManager_ResResGetRuleRes Logic.LogicManager_GetRule_Res
                         | LogicManager_ResResPutRuleRes Logic.LogicManager_PutRule_Res
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_ResRes where
        nameOf _ = (Hs.fromString "LogicManager_ResRes")
 
instance HsJSONPB.ToSchema LogicManager_ResRes where
        declareNamedSchema _
          = do let declare_get_rule_res = HsJSONPB.declareSchemaRef
               logicManager_ResResGetRuleRes <- declare_get_rule_res Proxy.Proxy
               let _ = Hs.pure LogicManager_ResResGetRuleRes <*>
                         HsJSONPB.asProxy declare_get_rule_res
               let declare_put_rule_res = HsJSONPB.declareSchemaRef
               logicManager_ResResPutRuleRes <- declare_put_rule_res Proxy.Proxy
               let _ = Hs.pure LogicManager_ResResPutRuleRes <*>
                         HsJSONPB.asProxy declare_put_rule_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_ResRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("get_rule_res",
                                                         logicManager_ResResGetRuleRes),
                                                        ("put_rule_res",
                                                         logicManager_ResResPutRuleRes)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype LogicManager_ResPart = LogicManager_ResPart{logicManager_ResPartGetRulesResPart
                                                    :: Hs.Maybe Logic.LogicManager_GetRules_ResPart}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_ResPart where
        nameOf _ = (Hs.fromString "LogicManager_ResPart")
 
instance HsProtobuf.HasDefault LogicManager_ResPart
 
instance HsProtobuf.Message LogicManager_ResPart where
        encodeMessage _
          LogicManager_ResPart{logicManager_ResPartGetRulesResPart =
                                 logicManager_ResPartGetRulesResPart}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Logic.LogicManager_GetRules_ResPart)
                      @(HsProtobuf.Nested Logic.LogicManager_GetRules_ResPart)
                      logicManager_ResPartGetRulesResPart))])
        decodeMessage _
          = (Hs.pure LogicManager_ResPart) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Logic.LogicManager_GetRules_ResPart))
                 @(_ (Hs.Maybe Logic.LogicManager_GetRules_ResPart))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path ("GetRules" Hs.:| ["ResPart"])))))
                (HsProtobuf.Single "get_rules_res_part")
                []
                "")]
 
instance HsJSONPB.ToJSONPB LogicManager_ResPart where
        toJSONPB (LogicManager_ResPart f1)
          = (HsJSONPB.object ["get_rules_res_part" .= f1])
        toEncodingPB (LogicManager_ResPart f1)
          = (HsJSONPB.pairs ["get_rules_res_part" .= f1])
 
instance HsJSONPB.FromJSONPB LogicManager_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "LogicManager_ResPart"
               (\ obj ->
                  (Hs.pure LogicManager_ResPart) <*> obj .: "get_rules_res_part"))
 
instance HsJSONPB.ToJSON LogicManager_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogicManager_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LogicManager_ResPart where
        declareNamedSchema _
          = do let declare_get_rules_res_part = HsJSONPB.declareSchemaRef
               logicManager_ResPartGetRulesResPart <- declare_get_rules_res_part
                                                        Proxy.Proxy
               let _ = Hs.pure LogicManager_ResPart <*>
                         HsJSONPB.asProxy declare_get_rules_res_part
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("get_rules_res_part",
                                                         logicManager_ResPartGetRulesResPart)]}})
 
data LogicManager_GetRule = LogicManager_GetRule{}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_GetRule where
        nameOf _ = (Hs.fromString "LogicManager_GetRule")
 
instance HsProtobuf.HasDefault LogicManager_GetRule
 
instance HsProtobuf.Message LogicManager_GetRule where
        encodeMessage _ LogicManager_GetRule{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure LogicManager_GetRule)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB LogicManager_GetRule where
        toJSONPB (LogicManager_GetRule) = (HsJSONPB.object [])
        toEncodingPB (LogicManager_GetRule) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB LogicManager_GetRule where
        parseJSONPB
          = (HsJSONPB.withObject "LogicManager_GetRule"
               (\ obj -> (Hs.pure LogicManager_GetRule)))
 
instance HsJSONPB.ToJSON LogicManager_GetRule where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogicManager_GetRule where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LogicManager_GetRule where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_GetRule",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype LogicManager_GetRule_Req = LogicManager_GetRule_Req{logicManager_GetRule_ReqLabel
                                                            :: Hs.Text}
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_GetRule_Req where
        nameOf _ = (Hs.fromString "LogicManager_GetRule_Req")
 
instance HsProtobuf.HasDefault LogicManager_GetRule_Req
 
instance HsProtobuf.Message LogicManager_GetRule_Req where
        encodeMessage _
          LogicManager_GetRule_Req{logicManager_GetRule_ReqLabel =
                                     logicManager_GetRule_ReqLabel}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   logicManager_GetRule_ReqLabel)])
        decodeMessage _
          = (Hs.pure LogicManager_GetRule_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                "")]
 
instance HsJSONPB.ToJSONPB LogicManager_GetRule_Req where
        toJSONPB (LogicManager_GetRule_Req f1)
          = (HsJSONPB.object ["label" .= f1])
        toEncodingPB (LogicManager_GetRule_Req f1)
          = (HsJSONPB.pairs ["label" .= f1])
 
instance HsJSONPB.FromJSONPB LogicManager_GetRule_Req where
        parseJSONPB
          = (HsJSONPB.withObject "LogicManager_GetRule_Req"
               (\ obj -> (Hs.pure LogicManager_GetRule_Req) <*> obj .: "label"))
 
instance HsJSONPB.ToJSON LogicManager_GetRule_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogicManager_GetRule_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LogicManager_GetRule_Req where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               logicManager_GetRule_ReqLabel <- declare_label Proxy.Proxy
               let _ = Hs.pure LogicManager_GetRule_Req <*>
                         HsJSONPB.asProxy declare_label
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_GetRule_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label", logicManager_GetRule_ReqLabel)]}})
 
newtype LogicManager_GetRule_Res = LogicManager_GetRule_Res{logicManager_GetRule_ResRes
                                                            :: Hs.Maybe LogicManager_GetRule_ResRes}
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_GetRule_Res where
        nameOf _ = (Hs.fromString "LogicManager_GetRule_Res")
 
instance HsProtobuf.HasDefault LogicManager_GetRule_Res
 
instance HsProtobuf.Message LogicManager_GetRule_Res where
        encodeMessage _
          LogicManager_GetRule_Res{logicManager_GetRule_ResRes =
                                     logicManager_GetRule_ResRes}
          = (Hs.mconcat
               [case logicManager_GetRule_ResRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             LogicManager_GetRule_ResResRule y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Logic.Rule)
                                        @(HsProtobuf.Nested Logic.Rule)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure LogicManager_GetRule_Res) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap LogicManager_GetRule_ResResRule)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.Rule))
                        @(_ (Hs.Maybe Logic.Rule))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB LogicManager_GetRule_Res where
        toJSONPB (LogicManager_GetRule_Res f1)
          = (HsJSONPB.object
               [(let encodeRes
                       = (case f1 of
                              Hs.Just (LogicManager_GetRule_ResResRule f1)
                                -> (HsJSONPB.pair "rule" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB (LogicManager_GetRule_Res f1)
          = (HsJSONPB.pairs
               [(let encodeRes
                       = (case f1 of
                              Hs.Just (LogicManager_GetRule_ResResRule f1)
                                -> (HsJSONPB.pair "rule" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB LogicManager_GetRule_Res where
        parseJSONPB
          = (HsJSONPB.withObject "LogicManager_GetRule_Res"
               (\ obj ->
                  (Hs.pure LogicManager_GetRule_Res) <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. LogicManager_GetRule_ResResRule <$>
                                  (HsJSONPB.parseField parseObj "rule"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON LogicManager_GetRule_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogicManager_GetRule_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LogicManager_GetRule_Res where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               logicManager_GetRule_ResRes <- declare_res Proxy.Proxy
               let _ = Hs.pure LogicManager_GetRule_Res <*>
                         HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_GetRule_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res", logicManager_GetRule_ResRes)]}})
 
data LogicManager_GetRule_ResRes = LogicManager_GetRule_ResResRule Logic.Rule
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_GetRule_ResRes where
        nameOf _ = (Hs.fromString "LogicManager_GetRule_ResRes")
 
instance HsJSONPB.ToSchema LogicManager_GetRule_ResRes where
        declareNamedSchema _
          = do let declare_rule = HsJSONPB.declareSchemaRef
               logicManager_GetRule_ResResRule <- declare_rule Proxy.Proxy
               let _ = Hs.pure LogicManager_GetRule_ResResRule <*>
                         HsJSONPB.asProxy declare_rule
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_GetRule_ResRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("rule", logicManager_GetRule_ResResRule)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data LogicManager_PutRule = LogicManager_PutRule{}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_PutRule where
        nameOf _ = (Hs.fromString "LogicManager_PutRule")
 
instance HsProtobuf.HasDefault LogicManager_PutRule
 
instance HsProtobuf.Message LogicManager_PutRule where
        encodeMessage _ LogicManager_PutRule{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure LogicManager_PutRule)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB LogicManager_PutRule where
        toJSONPB (LogicManager_PutRule) = (HsJSONPB.object [])
        toEncodingPB (LogicManager_PutRule) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB LogicManager_PutRule where
        parseJSONPB
          = (HsJSONPB.withObject "LogicManager_PutRule"
               (\ obj -> (Hs.pure LogicManager_PutRule)))
 
instance HsJSONPB.ToJSON LogicManager_PutRule where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogicManager_PutRule where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LogicManager_PutRule where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_PutRule",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data LogicManager_PutRule_Req = LogicManager_PutRule_Req{logicManager_PutRule_ReqLabel
                                                         :: Hs.Text,
                                                         logicManager_PutRule_ReqWhen :: Hs.Text,
                                                         logicManager_PutRule_ReqThen :: Hs.Text}
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_PutRule_Req where
        nameOf _ = (Hs.fromString "LogicManager_PutRule_Req")
 
instance HsProtobuf.HasDefault LogicManager_PutRule_Req
 
instance HsProtobuf.Message LogicManager_PutRule_Req where
        encodeMessage _
          LogicManager_PutRule_Req{logicManager_PutRule_ReqLabel =
                                     logicManager_PutRule_ReqLabel,
                                   logicManager_PutRule_ReqWhen = logicManager_PutRule_ReqWhen,
                                   logicManager_PutRule_ReqThen = logicManager_PutRule_ReqThen}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   logicManager_PutRule_ReqLabel),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   logicManager_PutRule_ReqWhen),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   logicManager_PutRule_ReqThen)])
        decodeMessage _
          = (Hs.pure LogicManager_PutRule_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "when")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "then")
                []
                "")]
 
instance HsJSONPB.ToJSONPB LogicManager_PutRule_Req where
        toJSONPB (LogicManager_PutRule_Req f1 f2 f3)
          = (HsJSONPB.object ["label" .= f1, "when" .= f2, "then" .= f3])
        toEncodingPB (LogicManager_PutRule_Req f1 f2 f3)
          = (HsJSONPB.pairs ["label" .= f1, "when" .= f2, "then" .= f3])
 
instance HsJSONPB.FromJSONPB LogicManager_PutRule_Req where
        parseJSONPB
          = (HsJSONPB.withObject "LogicManager_PutRule_Req"
               (\ obj ->
                  (Hs.pure LogicManager_PutRule_Req) <*> obj .: "label" <*>
                    obj .: "when"
                    <*> obj .: "then"))
 
instance HsJSONPB.ToJSON LogicManager_PutRule_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogicManager_PutRule_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LogicManager_PutRule_Req where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               logicManager_PutRule_ReqLabel <- declare_label Proxy.Proxy
               let declare_when = HsJSONPB.declareSchemaRef
               logicManager_PutRule_ReqWhen <- declare_when Proxy.Proxy
               let declare_then = HsJSONPB.declareSchemaRef
               logicManager_PutRule_ReqThen <- declare_then Proxy.Proxy
               let _ = Hs.pure LogicManager_PutRule_Req <*>
                         HsJSONPB.asProxy declare_label
                         <*> HsJSONPB.asProxy declare_when
                         <*> HsJSONPB.asProxy declare_then
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_PutRule_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label", logicManager_PutRule_ReqLabel),
                                                        ("when", logicManager_PutRule_ReqWhen),
                                                        ("then", logicManager_PutRule_ReqThen)]}})
 
newtype LogicManager_PutRule_Res = LogicManager_PutRule_Res{logicManager_PutRule_ResRule
                                                            :: Hs.Maybe Logic.Rule}
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_PutRule_Res where
        nameOf _ = (Hs.fromString "LogicManager_PutRule_Res")
 
instance HsProtobuf.HasDefault LogicManager_PutRule_Res
 
instance HsProtobuf.Message LogicManager_PutRule_Res where
        encodeMessage _
          LogicManager_PutRule_Res{logicManager_PutRule_ResRule =
                                     logicManager_PutRule_ResRule}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Logic.Rule) @(HsProtobuf.Nested Logic.Rule)
                      logicManager_PutRule_ResRule))])
        decodeMessage _
          = (Hs.pure LogicManager_PutRule_Res) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Logic.Rule))
                 @(_ (Hs.Maybe Logic.Rule))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Rule")))
                (HsProtobuf.Single "rule")
                []
                "")]
 
instance HsJSONPB.ToJSONPB LogicManager_PutRule_Res where
        toJSONPB (LogicManager_PutRule_Res f1)
          = (HsJSONPB.object ["rule" .= f1])
        toEncodingPB (LogicManager_PutRule_Res f1)
          = (HsJSONPB.pairs ["rule" .= f1])
 
instance HsJSONPB.FromJSONPB LogicManager_PutRule_Res where
        parseJSONPB
          = (HsJSONPB.withObject "LogicManager_PutRule_Res"
               (\ obj -> (Hs.pure LogicManager_PutRule_Res) <*> obj .: "rule"))
 
instance HsJSONPB.ToJSON LogicManager_PutRule_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogicManager_PutRule_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LogicManager_PutRule_Res where
        declareNamedSchema _
          = do let declare_rule = HsJSONPB.declareSchemaRef
               logicManager_PutRule_ResRule <- declare_rule Proxy.Proxy
               let _ = Hs.pure LogicManager_PutRule_Res <*>
                         HsJSONPB.asProxy declare_rule
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_PutRule_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("rule", logicManager_PutRule_ResRule)]}})
 
data LogicManager_GetRules = LogicManager_GetRules{}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_GetRules where
        nameOf _ = (Hs.fromString "LogicManager_GetRules")
 
instance HsProtobuf.HasDefault LogicManager_GetRules
 
instance HsProtobuf.Message LogicManager_GetRules where
        encodeMessage _ LogicManager_GetRules{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure LogicManager_GetRules)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB LogicManager_GetRules where
        toJSONPB (LogicManager_GetRules) = (HsJSONPB.object [])
        toEncodingPB (LogicManager_GetRules) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB LogicManager_GetRules where
        parseJSONPB
          = (HsJSONPB.withObject "LogicManager_GetRules"
               (\ obj -> (Hs.pure LogicManager_GetRules)))
 
instance HsJSONPB.ToJSON LogicManager_GetRules where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogicManager_GetRules where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LogicManager_GetRules where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_GetRules",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data LogicManager_GetRules_Req = LogicManager_GetRules_Req{}
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_GetRules_Req where
        nameOf _ = (Hs.fromString "LogicManager_GetRules_Req")
 
instance HsProtobuf.HasDefault LogicManager_GetRules_Req
 
instance HsProtobuf.Message LogicManager_GetRules_Req where
        encodeMessage _ LogicManager_GetRules_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure LogicManager_GetRules_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB LogicManager_GetRules_Req where
        toJSONPB (LogicManager_GetRules_Req) = (HsJSONPB.object [])
        toEncodingPB (LogicManager_GetRules_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB LogicManager_GetRules_Req where
        parseJSONPB
          = (HsJSONPB.withObject "LogicManager_GetRules_Req"
               (\ obj -> (Hs.pure LogicManager_GetRules_Req)))
 
instance HsJSONPB.ToJSON LogicManager_GetRules_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogicManager_GetRules_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LogicManager_GetRules_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_GetRules_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype LogicManager_GetRules_ResPart = LogicManager_GetRules_ResPart{logicManager_GetRules_ResPartRules
                                                                      :: Hs.Vector Logic.Rule}
                                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LogicManager_GetRules_ResPart where
        nameOf _ = (Hs.fromString "LogicManager_GetRules_ResPart")
 
instance HsProtobuf.HasDefault LogicManager_GetRules_ResPart
 
instance HsProtobuf.Message LogicManager_GetRules_ResPart where
        encodeMessage _
          LogicManager_GetRules_ResPart{logicManager_GetRules_ResPartRules =
                                          logicManager_GetRules_ResPartRules}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Logic.Rule)
                      @(HsProtobuf.NestedVec Logic.Rule)
                      logicManager_GetRules_ResPartRules))])
        decodeMessage _
          = (Hs.pure LogicManager_GetRules_ResPart) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Logic.Rule))
                 @(_ (Hs.Vector Logic.Rule))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated (HsProtobuf.Named (HsProtobuf.Single "Rule")))
                (HsProtobuf.Single "rules")
                []
                "")]
 
instance HsJSONPB.ToJSONPB LogicManager_GetRules_ResPart where
        toJSONPB (LogicManager_GetRules_ResPart f1)
          = (HsJSONPB.object ["rules" .= f1])
        toEncodingPB (LogicManager_GetRules_ResPart f1)
          = (HsJSONPB.pairs ["rules" .= f1])
 
instance HsJSONPB.FromJSONPB LogicManager_GetRules_ResPart where
        parseJSONPB
          = (HsJSONPB.withObject "LogicManager_GetRules_ResPart"
               (\ obj ->
                  (Hs.pure LogicManager_GetRules_ResPart) <*> obj .: "rules"))
 
instance HsJSONPB.ToJSON LogicManager_GetRules_ResPart where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LogicManager_GetRules_ResPart where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LogicManager_GetRules_ResPart where
        declareNamedSchema _
          = do let declare_rules = HsJSONPB.declareSchemaRef
               logicManager_GetRules_ResPartRules <- declare_rules Proxy.Proxy
               let _ = Hs.pure LogicManager_GetRules_ResPart <*>
                         HsJSONPB.asProxy declare_rules
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LogicManager_GetRules_ResPart",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("rules",
                                                         logicManager_GetRules_ResPartRules)]}})
 
data Rule = Rule{ruleLabel :: Hs.Text, ruleWhen :: Hs.Text,
                 ruleThen :: Hs.Text}
          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Rule where
        nameOf _ = (Hs.fromString "Rule")
 
instance HsProtobuf.HasDefault Rule
 
instance HsProtobuf.Message Rule where
        encodeMessage _
          Rule{ruleLabel = ruleLabel, ruleWhen = ruleWhen,
               ruleThen = ruleThen}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   ruleLabel),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   ruleWhen),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   ruleThen)])
        decodeMessage _
          = (Hs.pure Rule) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "when")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "then")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Rule where
        toJSONPB (Rule f1 f2 f3)
          = (HsJSONPB.object ["label" .= f1, "when" .= f2, "then" .= f3])
        toEncodingPB (Rule f1 f2 f3)
          = (HsJSONPB.pairs ["label" .= f1, "when" .= f2, "then" .= f3])
 
instance HsJSONPB.FromJSONPB Rule where
        parseJSONPB
          = (HsJSONPB.withObject "Rule"
               (\ obj ->
                  (Hs.pure Rule) <*> obj .: "label" <*> obj .: "when" <*>
                    obj .: "then"))
 
instance HsJSONPB.ToJSON Rule where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Rule where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Rule where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               ruleLabel <- declare_label Proxy.Proxy
               let declare_when = HsJSONPB.declareSchemaRef
               ruleWhen <- declare_when Proxy.Proxy
               let declare_then = HsJSONPB.declareSchemaRef
               ruleThen <- declare_then Proxy.Proxy
               let _ = Hs.pure Rule <*> HsJSONPB.asProxy declare_label <*>
                         HsJSONPB.asProxy declare_when
                         <*> HsJSONPB.asProxy declare_then
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Rule",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label", ruleLabel), ("when", ruleWhen),
                                                        ("then", ruleThen)]}})
 
data Rule_Req = Rule_Req{rule_ReqLabel :: Hs.Text,
                         rule_ReqReq :: Hs.Maybe Rule_ReqReq}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Rule_Req where
        nameOf _ = (Hs.fromString "Rule_Req")
 
instance HsProtobuf.HasDefault Rule_Req
 
instance HsProtobuf.Message Rule_Req where
        encodeMessage _
          Rule_Req{rule_ReqLabel = rule_ReqLabel, rule_ReqReq = rule_ReqReq}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   rule_ReqLabel),
                case rule_ReqReq of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Rule_ReqReqRuleDeleteReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 100)
                                     (Hs.coerce @(Hs.Maybe Logic.Rule_Delete_Req)
                                        @(HsProtobuf.Nested Logic.Rule_Delete_Req)
                                        (Hs.Just y)))
                             Rule_ReqReqRuleSetLabelReq y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 101)
                                     (Hs.coerce @(Hs.Maybe Logic.Rule_SetLabel_Req)
                                        @(HsProtobuf.Nested Logic.Rule_SetLabel_Req)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Rule_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 100),
                   (Hs.pure (Hs.fmap Rule_ReqReqRuleDeleteReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.Rule_Delete_Req))
                        @(_ (Hs.Maybe Logic.Rule_Delete_Req))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 101),
                   (Hs.pure (Hs.fmap Rule_ReqReqRuleSetLabelReq)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.Rule_SetLabel_Req))
                        @(_ (Hs.Maybe Logic.Rule_SetLabel_Req))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Rule_Req where
        toJSONPB (Rule_Req f1 f100_or_f101)
          = (HsJSONPB.object
               ["label" .= f1,
                (let encodeReq
                       = (case f100_or_f101 of
                              Hs.Just (Rule_ReqReqRuleDeleteReq f100)
                                -> (HsJSONPB.pair "rule_delete_req" f100)
                              Hs.Just (Rule_ReqReqRuleSetLabelReq f101)
                                -> (HsJSONPB.pair "rule_set_label_req" f101)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.objectOrNull [encodeReq] options)) options else
                       encodeReq options)])
        toEncodingPB (Rule_Req f1 f100_or_f101)
          = (HsJSONPB.pairs
               ["label" .= f1,
                (let encodeReq
                       = (case f100_or_f101 of
                              Hs.Just (Rule_ReqReqRuleDeleteReq f100)
                                -> (HsJSONPB.pair "rule_delete_req" f100)
                              Hs.Just (Rule_ReqReqRuleSetLabelReq f101)
                                -> (HsJSONPB.pair "rule_set_label_req" f101)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("req" .= (HsJSONPB.pairsOrNull [encodeReq] options)) options else
                       encodeReq options)])
 
instance HsJSONPB.FromJSONPB Rule_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Rule_Req"
               (\ obj ->
                  (Hs.pure Rule_Req) <*> obj .: "label" <*>
                    (let parseReq parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Rule_ReqReqRuleDeleteReq <$>
                                  (HsJSONPB.parseField parseObj "rule_delete_req"),
                                Hs.Just Hs.. Rule_ReqReqRuleSetLabelReq <$>
                                  (HsJSONPB.parseField parseObj "rule_set_label_req"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "req") Hs.>>= (HsJSONPB.withObject "req" parseReq)) <|>
                         (parseReq obj))))
 
instance HsJSONPB.ToJSON Rule_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Rule_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Rule_Req where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               rule_ReqLabel <- declare_label Proxy.Proxy
               let declare_req = HsJSONPB.declareSchemaRef
               rule_ReqReq <- declare_req Proxy.Proxy
               let _ = Hs.pure Rule_Req <*> HsJSONPB.asProxy declare_label <*>
                         HsJSONPB.asProxy declare_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Rule_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label", rule_ReqLabel),
                                                        ("req", rule_ReqReq)]}})
 
data Rule_ReqReq = Rule_ReqReqRuleDeleteReq Logic.Rule_Delete_Req
                 | Rule_ReqReqRuleSetLabelReq Logic.Rule_SetLabel_Req
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Rule_ReqReq where
        nameOf _ = (Hs.fromString "Rule_ReqReq")
 
instance HsJSONPB.ToSchema Rule_ReqReq where
        declareNamedSchema _
          = do let declare_rule_delete_req = HsJSONPB.declareSchemaRef
               rule_ReqReqRuleDeleteReq <- declare_rule_delete_req Proxy.Proxy
               let _ = Hs.pure Rule_ReqReqRuleDeleteReq <*>
                         HsJSONPB.asProxy declare_rule_delete_req
               let declare_rule_set_label_req = HsJSONPB.declareSchemaRef
               rule_ReqReqRuleSetLabelReq <- declare_rule_set_label_req
                                               Proxy.Proxy
               let _ = Hs.pure Rule_ReqReqRuleSetLabelReq <*>
                         HsJSONPB.asProxy declare_rule_set_label_req
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Rule_ReqReq",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("rule_delete_req",
                                                         rule_ReqReqRuleDeleteReq),
                                                        ("rule_set_label_req",
                                                         rule_ReqReqRuleSetLabelReq)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype Rule_Res = Rule_Res{rule_ResRes :: Hs.Maybe Rule_ResRes}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Rule_Res where
        nameOf _ = (Hs.fromString "Rule_Res")
 
instance HsProtobuf.HasDefault Rule_Res
 
instance HsProtobuf.Message Rule_Res where
        encodeMessage _ Rule_Res{rule_ResRes = rule_ResRes}
          = (Hs.mconcat
               [case rule_ResRes of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             Rule_ResResRuleDeleteRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 100)
                                     (Hs.coerce @(Hs.Maybe Logic.Rule_Delete_Res)
                                        @(HsProtobuf.Nested Logic.Rule_Delete_Res)
                                        (Hs.Just y)))
                             Rule_ResResRuleSetLabelRes y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 101)
                                     (Hs.coerce @(Hs.Maybe Logic.Rule_SetLabel_Res)
                                        @(HsProtobuf.Nested Logic.Rule_SetLabel_Res)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Rule_Res) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 100),
                   (Hs.pure (Hs.fmap Rule_ResResRuleDeleteRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.Rule_Delete_Res))
                        @(_ (Hs.Maybe Logic.Rule_Delete_Res))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 101),
                   (Hs.pure (Hs.fmap Rule_ResResRuleSetLabelRes)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Logic.Rule_SetLabel_Res))
                        @(_ (Hs.Maybe Logic.Rule_SetLabel_Res))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Rule_Res where
        toJSONPB (Rule_Res f100_or_f101)
          = (HsJSONPB.object
               [(let encodeRes
                       = (case f100_or_f101 of
                              Hs.Just (Rule_ResResRuleDeleteRes f100)
                                -> (HsJSONPB.pair "rule_delete_res" f100)
                              Hs.Just (Rule_ResResRuleSetLabelRes f101)
                                -> (HsJSONPB.pair "rule_set_label_res" f101)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.objectOrNull [encodeRes] options)) options else
                       encodeRes options)])
        toEncodingPB (Rule_Res f100_or_f101)
          = (HsJSONPB.pairs
               [(let encodeRes
                       = (case f100_or_f101 of
                              Hs.Just (Rule_ResResRuleDeleteRes f100)
                                -> (HsJSONPB.pair "rule_delete_res" f100)
                              Hs.Just (Rule_ResResRuleSetLabelRes f101)
                                -> (HsJSONPB.pair "rule_set_label_res" f101)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("res" .= (HsJSONPB.pairsOrNull [encodeRes] options)) options else
                       encodeRes options)])
 
instance HsJSONPB.FromJSONPB Rule_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Rule_Res"
               (\ obj ->
                  (Hs.pure Rule_Res) <*>
                    (let parseRes parseObj
                           = Hs.msum
                               [Hs.Just Hs.. Rule_ResResRuleDeleteRes <$>
                                  (HsJSONPB.parseField parseObj "rule_delete_res"),
                                Hs.Just Hs.. Rule_ResResRuleSetLabelRes <$>
                                  (HsJSONPB.parseField parseObj "rule_set_label_res"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "res") Hs.>>= (HsJSONPB.withObject "res" parseRes)) <|>
                         (parseRes obj))))
 
instance HsJSONPB.ToJSON Rule_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Rule_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Rule_Res where
        declareNamedSchema _
          = do let declare_res = HsJSONPB.declareSchemaRef
               rule_ResRes <- declare_res Proxy.Proxy
               let _ = Hs.pure Rule_Res <*> HsJSONPB.asProxy declare_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Rule_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("res", rule_ResRes)]}})
 
data Rule_ResRes = Rule_ResResRuleDeleteRes Logic.Rule_Delete_Res
                 | Rule_ResResRuleSetLabelRes Logic.Rule_SetLabel_Res
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Rule_ResRes where
        nameOf _ = (Hs.fromString "Rule_ResRes")
 
instance HsJSONPB.ToSchema Rule_ResRes where
        declareNamedSchema _
          = do let declare_rule_delete_res = HsJSONPB.declareSchemaRef
               rule_ResResRuleDeleteRes <- declare_rule_delete_res Proxy.Proxy
               let _ = Hs.pure Rule_ResResRuleDeleteRes <*>
                         HsJSONPB.asProxy declare_rule_delete_res
               let declare_rule_set_label_res = HsJSONPB.declareSchemaRef
               rule_ResResRuleSetLabelRes <- declare_rule_set_label_res
                                               Proxy.Proxy
               let _ = Hs.pure Rule_ResResRuleSetLabelRes <*>
                         HsJSONPB.asProxy declare_rule_set_label_res
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Rule_ResRes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("rule_delete_res",
                                                         rule_ResResRuleDeleteRes),
                                                        ("rule_set_label_res",
                                                         rule_ResResRuleSetLabelRes)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data Rule_Delete = Rule_Delete{}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Rule_Delete where
        nameOf _ = (Hs.fromString "Rule_Delete")
 
instance HsProtobuf.HasDefault Rule_Delete
 
instance HsProtobuf.Message Rule_Delete where
        encodeMessage _ Rule_Delete{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Rule_Delete)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Rule_Delete where
        toJSONPB (Rule_Delete) = (HsJSONPB.object [])
        toEncodingPB (Rule_Delete) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Rule_Delete where
        parseJSONPB
          = (HsJSONPB.withObject "Rule_Delete"
               (\ obj -> (Hs.pure Rule_Delete)))
 
instance HsJSONPB.ToJSON Rule_Delete where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Rule_Delete where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Rule_Delete where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Rule_Delete",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Rule_Delete_Req = Rule_Delete_Req{}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Rule_Delete_Req where
        nameOf _ = (Hs.fromString "Rule_Delete_Req")
 
instance HsProtobuf.HasDefault Rule_Delete_Req
 
instance HsProtobuf.Message Rule_Delete_Req where
        encodeMessage _ Rule_Delete_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Rule_Delete_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Rule_Delete_Req where
        toJSONPB (Rule_Delete_Req) = (HsJSONPB.object [])
        toEncodingPB (Rule_Delete_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Rule_Delete_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Rule_Delete_Req"
               (\ obj -> (Hs.pure Rule_Delete_Req)))
 
instance HsJSONPB.ToJSON Rule_Delete_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Rule_Delete_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Rule_Delete_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Rule_Delete_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Rule_Delete_Res = Rule_Delete_Res{}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Rule_Delete_Res where
        nameOf _ = (Hs.fromString "Rule_Delete_Res")
 
instance HsProtobuf.HasDefault Rule_Delete_Res
 
instance HsProtobuf.Message Rule_Delete_Res where
        encodeMessage _ Rule_Delete_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Rule_Delete_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Rule_Delete_Res where
        toJSONPB (Rule_Delete_Res) = (HsJSONPB.object [])
        toEncodingPB (Rule_Delete_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Rule_Delete_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Rule_Delete_Res"
               (\ obj -> (Hs.pure Rule_Delete_Res)))
 
instance HsJSONPB.ToJSON Rule_Delete_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Rule_Delete_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Rule_Delete_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Rule_Delete_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Rule_SetLabel = Rule_SetLabel{}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Rule_SetLabel where
        nameOf _ = (Hs.fromString "Rule_SetLabel")
 
instance HsProtobuf.HasDefault Rule_SetLabel
 
instance HsProtobuf.Message Rule_SetLabel where
        encodeMessage _ Rule_SetLabel{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Rule_SetLabel)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Rule_SetLabel where
        toJSONPB (Rule_SetLabel) = (HsJSONPB.object [])
        toEncodingPB (Rule_SetLabel) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Rule_SetLabel where
        parseJSONPB
          = (HsJSONPB.withObject "Rule_SetLabel"
               (\ obj -> (Hs.pure Rule_SetLabel)))
 
instance HsJSONPB.ToJSON Rule_SetLabel where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Rule_SetLabel where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Rule_SetLabel where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Rule_SetLabel",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype Rule_SetLabel_Req = Rule_SetLabel_Req{rule_SetLabel_ReqLabel
                                              :: Hs.Text}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Rule_SetLabel_Req where
        nameOf _ = (Hs.fromString "Rule_SetLabel_Req")
 
instance HsProtobuf.HasDefault Rule_SetLabel_Req
 
instance HsProtobuf.Message Rule_SetLabel_Req where
        encodeMessage _
          Rule_SetLabel_Req{rule_SetLabel_ReqLabel = rule_SetLabel_ReqLabel}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   rule_SetLabel_ReqLabel)])
        decodeMessage _
          = (Hs.pure Rule_SetLabel_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "label")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Rule_SetLabel_Req where
        toJSONPB (Rule_SetLabel_Req f1) = (HsJSONPB.object ["label" .= f1])
        toEncodingPB (Rule_SetLabel_Req f1)
          = (HsJSONPB.pairs ["label" .= f1])
 
instance HsJSONPB.FromJSONPB Rule_SetLabel_Req where
        parseJSONPB
          = (HsJSONPB.withObject "Rule_SetLabel_Req"
               (\ obj -> (Hs.pure Rule_SetLabel_Req) <*> obj .: "label"))
 
instance HsJSONPB.ToJSON Rule_SetLabel_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Rule_SetLabel_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Rule_SetLabel_Req where
        declareNamedSchema _
          = do let declare_label = HsJSONPB.declareSchemaRef
               rule_SetLabel_ReqLabel <- declare_label Proxy.Proxy
               let _ = Hs.pure Rule_SetLabel_Req <*>
                         HsJSONPB.asProxy declare_label
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Rule_SetLabel_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("label", rule_SetLabel_ReqLabel)]}})
 
data Rule_SetLabel_Res = Rule_SetLabel_Res{}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Rule_SetLabel_Res where
        nameOf _ = (Hs.fromString "Rule_SetLabel_Res")
 
instance HsProtobuf.HasDefault Rule_SetLabel_Res
 
instance HsProtobuf.Message Rule_SetLabel_Res where
        encodeMessage _ Rule_SetLabel_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure Rule_SetLabel_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Rule_SetLabel_Res where
        toJSONPB (Rule_SetLabel_Res) = (HsJSONPB.object [])
        toEncodingPB (Rule_SetLabel_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB Rule_SetLabel_Res where
        parseJSONPB
          = (HsJSONPB.withObject "Rule_SetLabel_Res"
               (\ obj -> (Hs.pure Rule_SetLabel_Res)))
 
instance HsJSONPB.ToJSON Rule_SetLabel_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Rule_SetLabel_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Rule_SetLabel_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Rule_SetLabel_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data Explanation = Explanation{explanationRule ::
                               Hs.Maybe Logic.Rule,
                               explanationVarMapping ::
                               Hs.Map Hs.Text (Hs.Maybe Logic.Explanation_VarList),
                               explanationCondition :: Hs.Maybe Answer.ConceptMap,
                               explanationConclusion :: Hs.Maybe Answer.ConceptMap}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Explanation where
        nameOf _ = (Hs.fromString "Explanation")
 
instance HsProtobuf.HasDefault Explanation
 
instance HsProtobuf.Message Explanation where
        encodeMessage _
          Explanation{explanationRule = explanationRule,
                      explanationVarMapping = explanationVarMapping,
                      explanationCondition = explanationCondition,
                      explanationConclusion = explanationConclusion}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Logic.Rule) @(HsProtobuf.Nested Logic.Rule)
                      explanationRule)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.unsafeCoerce
                      @(Hs.Map Hs.Text (Hs.Maybe Logic.Explanation_VarList))
                      @(Hs.Map Hs.Text (HsProtobuf.Nested Logic.Explanation_VarList))
                      explanationVarMapping)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Maybe Answer.ConceptMap)
                      @(HsProtobuf.Nested Answer.ConceptMap)
                      explanationCondition)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (Hs.coerce @(Hs.Maybe Answer.ConceptMap)
                      @(HsProtobuf.Nested Answer.ConceptMap)
                      explanationConclusion))])
        decodeMessage _
          = (Hs.pure Explanation) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Logic.Rule))
                 @(_ (Hs.Maybe Logic.Rule))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.unsafeCoerce
                 @(_ (Hs.Map Hs.Text (HsProtobuf.Nested Logic.Explanation_VarList)))
                 @(_ (Hs.Map Hs.Text (Hs.Maybe Logic.Explanation_VarList)))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Answer.ConceptMap))
                 @(_ (Hs.Maybe Answer.ConceptMap))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Answer.ConceptMap))
                 @(_ (Hs.Maybe Answer.ConceptMap))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Rule")))
                (HsProtobuf.Single "rule")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Map HsProtobuf.String
                   (HsProtobuf.Named (HsProtobuf.Single "VarList")))
                (HsProtobuf.Single "var_mapping")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ConceptMap")))
                (HsProtobuf.Single "condition")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ConceptMap")))
                (HsProtobuf.Single "conclusion")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Explanation where
        toJSONPB (Explanation f1 f2 f3 f4)
          = (HsJSONPB.object
               ["rule" .= f1, "var_mapping" .= f2, "condition" .= f3,
                "conclusion" .= f4])
        toEncodingPB (Explanation f1 f2 f3 f4)
          = (HsJSONPB.pairs
               ["rule" .= f1, "var_mapping" .= f2, "condition" .= f3,
                "conclusion" .= f4])
 
instance HsJSONPB.FromJSONPB Explanation where
        parseJSONPB
          = (HsJSONPB.withObject "Explanation"
               (\ obj ->
                  (Hs.pure Explanation) <*> obj .: "rule" <*> obj .: "var_mapping"
                    <*> obj .: "condition"
                    <*> obj .: "conclusion"))
 
instance HsJSONPB.ToJSON Explanation where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Explanation where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Explanation where
        declareNamedSchema _
          = do let declare_rule = HsJSONPB.declareSchemaRef
               explanationRule <- declare_rule Proxy.Proxy
               let declare_var_mapping = HsJSONPB.declareSchemaRef
               explanationVarMapping <- declare_var_mapping Proxy.Proxy
               let declare_condition = HsJSONPB.declareSchemaRef
               explanationCondition <- declare_condition Proxy.Proxy
               let declare_conclusion = HsJSONPB.declareSchemaRef
               explanationConclusion <- declare_conclusion Proxy.Proxy
               let _ = Hs.pure Explanation <*> HsJSONPB.asProxy declare_rule <*>
                         HsJSONPB.asProxy declare_var_mapping
                         <*> HsJSONPB.asProxy declare_condition
                         <*> HsJSONPB.asProxy declare_conclusion
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Explanation",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("rule", explanationRule),
                                                        ("var_mapping", explanationVarMapping),
                                                        ("condition", explanationCondition),
                                                        ("conclusion", explanationConclusion)]}})
 
newtype Explanation_VarList = Explanation_VarList{explanation_VarListVars
                                                  :: Hs.Vector Hs.Text}
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Explanation_VarList where
        nameOf _ = (Hs.fromString "Explanation_VarList")
 
instance HsProtobuf.HasDefault Explanation_VarList
 
instance HsProtobuf.Message Explanation_VarList where
        encodeMessage _
          Explanation_VarList{explanation_VarListVars =
                                explanation_VarListVars}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                      explanation_VarListVars))])
        decodeMessage _
          = (Hs.pure Explanation_VarList) <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
                 @(_ (Hs.Vector Hs.Text))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated HsProtobuf.String)
                (HsProtobuf.Single "vars")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Explanation_VarList where
        toJSONPB (Explanation_VarList f1)
          = (HsJSONPB.object ["vars" .= f1])
        toEncodingPB (Explanation_VarList f1)
          = (HsJSONPB.pairs ["vars" .= f1])
 
instance HsJSONPB.FromJSONPB Explanation_VarList where
        parseJSONPB
          = (HsJSONPB.withObject "Explanation_VarList"
               (\ obj -> (Hs.pure Explanation_VarList) <*> obj .: "vars"))
 
instance HsJSONPB.ToJSON Explanation_VarList where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Explanation_VarList where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Explanation_VarList where
        declareNamedSchema _
          = do let declare_vars = HsJSONPB.declareSchemaRef
               explanation_VarListVars <- declare_vars Proxy.Proxy
               let _ = Hs.pure Explanation_VarList <*>
                         HsJSONPB.asProxy declare_vars
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Explanation_VarList",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("vars", explanation_VarListVars)]}})