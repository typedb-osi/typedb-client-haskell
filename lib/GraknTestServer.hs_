{-# LANGUAGE DataKinds #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedLists #-}
{-# LANGUAGE OverloadedStrings #-}
module GraknTestServer where
import Network.GRPC.HighLevel.Generated
import Options
import Session
import Grakn
import Data.Text.Lazy as LT

runServer :: IO ()
runServer = graknServer handlers options

options :: ServiceOptions
options = defaultServiceOptions

handlers :: Grakn ServerRequest ServerResponse
handlers = Grakn { graknSessionOpen = openSession
                 , graknSessionClose = closeSession }

openSession :: ServerRequest 'Normal Session_Open_Req Session_Open_Res 
            -> IO (ServerResponse 'Normal Session_Open_Res)
openSession (ServerNormalRequest meta (Session_Open_Req db type' opts)) = do 
    print $ "opened " <> (LT.pack $ show type') 
            <> " session for " <> (LT.pack $ show db)
            <> " with " <> (LT.pack $  show opts)
    let answer = Session_Open_Res "SESSION_ID"
    return (ServerNormalResponse answer [] StatusOk "")

closeSession :: ServerRequest 'Normal Session_Close_Req Session_Close_Res 
            -> IO (ServerResponse 'Normal Session_Close_Res)
closeSession (ServerNormalRequest meta (Session_Close_Req session)) = do 
    print $ "closed " <> session 
    let answer = Session_Close_Res {} 
    return (ServerNormalResponse answer [] StatusOk "")
