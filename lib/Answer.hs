{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Answer where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Concept
 
data ConceptMap = ConceptMap{conceptMapMap ::
                             Hs.Map Hs.Text (Hs.Maybe Concept.Concept),
                             conceptMapExplainables :: Hs.Maybe Answer.Explainables}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptMap where
        nameOf _ = (Hs.fromString "ConceptMap")
 
instance HsProtobuf.HasDefault ConceptMap
 
instance HsProtobuf.Message ConceptMap where
        encodeMessage _
          ConceptMap{conceptMapMap = conceptMapMap,
                     conceptMapExplainables = conceptMapExplainables}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.unsafeCoerce @(Hs.Map Hs.Text (Hs.Maybe Concept.Concept))
                      @(Hs.Map Hs.Text (HsProtobuf.Nested Concept.Concept))
                      conceptMapMap)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Answer.Explainables)
                      @(HsProtobuf.Nested Answer.Explainables)
                      conceptMapExplainables))])
        decodeMessage _
          = (Hs.pure ConceptMap) <*>
              (Hs.unsafeCoerce
                 @(_ (Hs.Map Hs.Text (HsProtobuf.Nested Concept.Concept)))
                 @(_ (Hs.Map Hs.Text (Hs.Maybe Concept.Concept)))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Answer.Explainables))
                 @(_ (Hs.Maybe Answer.Explainables))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Map HsProtobuf.String
                   (HsProtobuf.Named (HsProtobuf.Single "Concept")))
                (HsProtobuf.Single "map")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "Explainables")))
                (HsProtobuf.Single "explainables")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ConceptMap where
        toJSONPB (ConceptMap f1 f2)
          = (HsJSONPB.object ["map" .= f1, "explainables" .= f2])
        toEncodingPB (ConceptMap f1 f2)
          = (HsJSONPB.pairs ["map" .= f1, "explainables" .= f2])
 
instance HsJSONPB.FromJSONPB ConceptMap where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptMap"
               (\ obj ->
                  (Hs.pure ConceptMap) <*> obj .: "map" <*> obj .: "explainables"))
 
instance HsJSONPB.ToJSON ConceptMap where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptMap where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptMap where
        declareNamedSchema _
          = do let declare_map = HsJSONPB.declareSchemaRef
               conceptMapMap <- declare_map Proxy.Proxy
               let declare_explainables = HsJSONPB.declareSchemaRef
               conceptMapExplainables <- declare_explainables Proxy.Proxy
               let _ = Hs.pure ConceptMap <*> HsJSONPB.asProxy declare_map <*>
                         HsJSONPB.asProxy declare_explainables
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptMap",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("map", conceptMapMap),
                                                        ("explainables", conceptMapExplainables)]}})
 
data Explainables = Explainables{explainablesRelations ::
                                 Hs.Map Hs.Text (Hs.Maybe Answer.Explainable),
                                 explainablesAttributes ::
                                 Hs.Map Hs.Text (Hs.Maybe Answer.Explainable),
                                 explainablesOwnerships ::
                                 Hs.Map Hs.Text (Hs.Maybe Answer.Explainables_Owned)}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Explainables where
        nameOf _ = (Hs.fromString "Explainables")
 
instance HsProtobuf.HasDefault Explainables
 
instance HsProtobuf.Message Explainables where
        encodeMessage _
          Explainables{explainablesRelations = explainablesRelations,
                       explainablesAttributes = explainablesAttributes,
                       explainablesOwnerships = explainablesOwnerships}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.unsafeCoerce @(Hs.Map Hs.Text (Hs.Maybe Answer.Explainable))
                      @(Hs.Map Hs.Text (HsProtobuf.Nested Answer.Explainable))
                      explainablesRelations)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.unsafeCoerce @(Hs.Map Hs.Text (Hs.Maybe Answer.Explainable))
                      @(Hs.Map Hs.Text (HsProtobuf.Nested Answer.Explainable))
                      explainablesAttributes)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.unsafeCoerce
                      @(Hs.Map Hs.Text (Hs.Maybe Answer.Explainables_Owned))
                      @(Hs.Map Hs.Text (HsProtobuf.Nested Answer.Explainables_Owned))
                      explainablesOwnerships))])
        decodeMessage _
          = (Hs.pure Explainables) <*>
              (Hs.unsafeCoerce
                 @(_ (Hs.Map Hs.Text (HsProtobuf.Nested Answer.Explainable)))
                 @(_ (Hs.Map Hs.Text (Hs.Maybe Answer.Explainable)))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.unsafeCoerce
                 @(_ (Hs.Map Hs.Text (HsProtobuf.Nested Answer.Explainable)))
                 @(_ (Hs.Map Hs.Text (Hs.Maybe Answer.Explainable)))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (Hs.unsafeCoerce
                 @(_ (Hs.Map Hs.Text (HsProtobuf.Nested Answer.Explainables_Owned)))
                 @(_ (Hs.Map Hs.Text (Hs.Maybe Answer.Explainables_Owned)))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Map HsProtobuf.String
                   (HsProtobuf.Named (HsProtobuf.Single "Explainable")))
                (HsProtobuf.Single "relations")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Map HsProtobuf.String
                   (HsProtobuf.Named (HsProtobuf.Single "Explainable")))
                (HsProtobuf.Single "attributes")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Map HsProtobuf.String
                   (HsProtobuf.Named (HsProtobuf.Single "Owned")))
                (HsProtobuf.Single "ownerships")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Explainables where
        toJSONPB (Explainables f1 f2 f3)
          = (HsJSONPB.object
               ["relations" .= f1, "attributes" .= f2, "ownerships" .= f3])
        toEncodingPB (Explainables f1 f2 f3)
          = (HsJSONPB.pairs
               ["relations" .= f1, "attributes" .= f2, "ownerships" .= f3])
 
instance HsJSONPB.FromJSONPB Explainables where
        parseJSONPB
          = (HsJSONPB.withObject "Explainables"
               (\ obj ->
                  (Hs.pure Explainables) <*> obj .: "relations" <*>
                    obj .: "attributes"
                    <*> obj .: "ownerships"))
 
instance HsJSONPB.ToJSON Explainables where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Explainables where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Explainables where
        declareNamedSchema _
          = do let declare_relations = HsJSONPB.declareSchemaRef
               explainablesRelations <- declare_relations Proxy.Proxy
               let declare_attributes = HsJSONPB.declareSchemaRef
               explainablesAttributes <- declare_attributes Proxy.Proxy
               let declare_ownerships = HsJSONPB.declareSchemaRef
               explainablesOwnerships <- declare_ownerships Proxy.Proxy
               let _ = Hs.pure Explainables <*> HsJSONPB.asProxy declare_relations
                         <*> HsJSONPB.asProxy declare_attributes
                         <*> HsJSONPB.asProxy declare_ownerships
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Explainables",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("relations", explainablesRelations),
                                                        ("attributes", explainablesAttributes),
                                                        ("ownerships", explainablesOwnerships)]}})
 
newtype Explainables_Owned = Explainables_Owned{explainables_OwnedOwned
                                                :: Hs.Map Hs.Text (Hs.Maybe Answer.Explainable)}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Explainables_Owned where
        nameOf _ = (Hs.fromString "Explainables_Owned")
 
instance HsProtobuf.HasDefault Explainables_Owned
 
instance HsProtobuf.Message Explainables_Owned where
        encodeMessage _
          Explainables_Owned{explainables_OwnedOwned =
                               explainables_OwnedOwned}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.unsafeCoerce @(Hs.Map Hs.Text (Hs.Maybe Answer.Explainable))
                      @(Hs.Map Hs.Text (HsProtobuf.Nested Answer.Explainable))
                      explainables_OwnedOwned))])
        decodeMessage _
          = (Hs.pure Explainables_Owned) <*>
              (Hs.unsafeCoerce
                 @(_ (Hs.Map Hs.Text (HsProtobuf.Nested Answer.Explainable)))
                 @(_ (Hs.Map Hs.Text (Hs.Maybe Answer.Explainable)))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Map HsProtobuf.String
                   (HsProtobuf.Named (HsProtobuf.Single "Explainable")))
                (HsProtobuf.Single "owned")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Explainables_Owned where
        toJSONPB (Explainables_Owned f1)
          = (HsJSONPB.object ["owned" .= f1])
        toEncodingPB (Explainables_Owned f1)
          = (HsJSONPB.pairs ["owned" .= f1])
 
instance HsJSONPB.FromJSONPB Explainables_Owned where
        parseJSONPB
          = (HsJSONPB.withObject "Explainables_Owned"
               (\ obj -> (Hs.pure Explainables_Owned) <*> obj .: "owned"))
 
instance HsJSONPB.ToJSON Explainables_Owned where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Explainables_Owned where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Explainables_Owned where
        declareNamedSchema _
          = do let declare_owned = HsJSONPB.declareSchemaRef
               explainables_OwnedOwned <- declare_owned Proxy.Proxy
               let _ = Hs.pure Explainables_Owned <*>
                         HsJSONPB.asProxy declare_owned
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Explainables_Owned",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("owned", explainables_OwnedOwned)]}})
 
data Explainable = Explainable{explainableConjunction :: Hs.Text,
                               explainableId :: Hs.Int64}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Explainable where
        nameOf _ = (Hs.fromString "Explainable")
 
instance HsProtobuf.HasDefault Explainable
 
instance HsProtobuf.Message Explainable where
        encodeMessage _
          Explainable{explainableConjunction = explainableConjunction,
                      explainableId = explainableId}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   explainableConjunction),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   explainableId)])
        decodeMessage _
          = (Hs.pure Explainable) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "conjunction")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "id")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Explainable where
        toJSONPB (Explainable f1 f2)
          = (HsJSONPB.object ["conjunction" .= f1, "id" .= f2])
        toEncodingPB (Explainable f1 f2)
          = (HsJSONPB.pairs ["conjunction" .= f1, "id" .= f2])
 
instance HsJSONPB.FromJSONPB Explainable where
        parseJSONPB
          = (HsJSONPB.withObject "Explainable"
               (\ obj ->
                  (Hs.pure Explainable) <*> obj .: "conjunction" <*> obj .: "id"))
 
instance HsJSONPB.ToJSON Explainable where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Explainable where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Explainable where
        declareNamedSchema _
          = do let declare_conjunction = HsJSONPB.declareSchemaRef
               explainableConjunction <- declare_conjunction Proxy.Proxy
               let declare_id = HsJSONPB.declareSchemaRef
               explainableId <- declare_id Proxy.Proxy
               let _ = Hs.pure Explainable <*>
                         HsJSONPB.asProxy declare_conjunction
                         <*> HsJSONPB.asProxy declare_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Explainable",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("conjunction", explainableConjunction),
                                                        ("id", explainableId)]}})
 
data ConceptMapGroup = ConceptMapGroup{conceptMapGroupOwner ::
                                       Hs.Maybe Concept.Concept,
                                       conceptMapGroupConceptMaps :: Hs.Vector Answer.ConceptMap}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConceptMapGroup where
        nameOf _ = (Hs.fromString "ConceptMapGroup")
 
instance HsProtobuf.HasDefault ConceptMapGroup
 
instance HsProtobuf.Message ConceptMapGroup where
        encodeMessage _
          ConceptMapGroup{conceptMapGroupOwner = conceptMapGroupOwner,
                          conceptMapGroupConceptMaps = conceptMapGroupConceptMaps}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Concept)
                      @(HsProtobuf.Nested Concept.Concept)
                      conceptMapGroupOwner)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Vector Answer.ConceptMap)
                      @(HsProtobuf.NestedVec Answer.ConceptMap)
                      conceptMapGroupConceptMaps))])
        decodeMessage _
          = (Hs.pure ConceptMapGroup) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Concept))
                 @(_ (Hs.Maybe Concept.Concept))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Answer.ConceptMap))
                 @(_ (Hs.Vector Answer.ConceptMap))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Concept")))
                (HsProtobuf.Single "owner")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "ConceptMap")))
                (HsProtobuf.Single "concept_maps")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ConceptMapGroup where
        toJSONPB (ConceptMapGroup f1 f2)
          = (HsJSONPB.object ["owner" .= f1, "concept_maps" .= f2])
        toEncodingPB (ConceptMapGroup f1 f2)
          = (HsJSONPB.pairs ["owner" .= f1, "concept_maps" .= f2])
 
instance HsJSONPB.FromJSONPB ConceptMapGroup where
        parseJSONPB
          = (HsJSONPB.withObject "ConceptMapGroup"
               (\ obj ->
                  (Hs.pure ConceptMapGroup) <*> obj .: "owner" <*>
                    obj .: "concept_maps"))
 
instance HsJSONPB.ToJSON ConceptMapGroup where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConceptMapGroup where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ConceptMapGroup where
        declareNamedSchema _
          = do let declare_owner = HsJSONPB.declareSchemaRef
               conceptMapGroupOwner <- declare_owner Proxy.Proxy
               let declare_concept_maps = HsJSONPB.declareSchemaRef
               conceptMapGroupConceptMaps <- declare_concept_maps Proxy.Proxy
               let _ = Hs.pure ConceptMapGroup <*> HsJSONPB.asProxy declare_owner
                         <*> HsJSONPB.asProxy declare_concept_maps
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ConceptMapGroup",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("owner", conceptMapGroupOwner),
                                                        ("concept_maps",
                                                         conceptMapGroupConceptMaps)]}})
 
newtype Numeric = Numeric{numericValue :: Hs.Maybe NumericValue}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Numeric where
        nameOf _ = (Hs.fromString "Numeric")
 
instance HsProtobuf.HasDefault Numeric
 
instance HsProtobuf.Message Numeric where
        encodeMessage _ Numeric{numericValue = numericValue}
          = (Hs.mconcat
               [case numericValue of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             NumericValueLongValue y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (HsProtobuf.ForceEmit y))
                             NumericValueDoubleValue y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (HsProtobuf.ForceEmit y))
                             NumericValueNan y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (HsProtobuf.ForceEmit y))])
        decodeMessage _
          = (Hs.pure Numeric) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.Just Hs.. NumericValueLongValue)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.Just Hs.. NumericValueDoubleValue)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.Just Hs.. NumericValueNan)) <*>
                     HsProtobuf.decodeMessageField)])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Numeric where
        toJSONPB (Numeric f1_or_f2_or_f3)
          = (HsJSONPB.object
               [(let encodeValue
                       = (case f1_or_f2_or_f3 of
                              Hs.Just (NumericValueLongValue f1)
                                -> (HsJSONPB.pair "long_value" f1)
                              Hs.Just (NumericValueDoubleValue f2)
                                -> (HsJSONPB.pair "double_value" f2)
                              Hs.Just (NumericValueNan f3) -> (HsJSONPB.pair "nan" f3)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("value" .= (HsJSONPB.objectOrNull [encodeValue] options)) options
                       else encodeValue options)])
        toEncodingPB (Numeric f1_or_f2_or_f3)
          = (HsJSONPB.pairs
               [(let encodeValue
                       = (case f1_or_f2_or_f3 of
                              Hs.Just (NumericValueLongValue f1)
                                -> (HsJSONPB.pair "long_value" f1)
                              Hs.Just (NumericValueDoubleValue f2)
                                -> (HsJSONPB.pair "double_value" f2)
                              Hs.Just (NumericValueNan f3) -> (HsJSONPB.pair "nan" f3)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("value" .= (HsJSONPB.pairsOrNull [encodeValue] options)) options
                       else encodeValue options)])
 
instance HsJSONPB.FromJSONPB Numeric where
        parseJSONPB
          = (HsJSONPB.withObject "Numeric"
               (\ obj ->
                  (Hs.pure Numeric) <*>
                    (let parseValue parseObj
                           = Hs.msum
                               [Hs.Just Hs.. NumericValueLongValue <$>
                                  (HsJSONPB.parseField parseObj "long_value"),
                                Hs.Just Hs.. NumericValueDoubleValue <$>
                                  (HsJSONPB.parseField parseObj "double_value"),
                                Hs.Just Hs.. NumericValueNan <$>
                                  (HsJSONPB.parseField parseObj "nan"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "value") Hs.>>= (HsJSONPB.withObject "value" parseValue))
                         <|> (parseValue obj))))
 
instance HsJSONPB.ToJSON Numeric where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Numeric where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Numeric where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               numericValue <- declare_value Proxy.Proxy
               let _ = Hs.pure Numeric <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Numeric",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", numericValue)]}})
 
data NumericValue = NumericValueLongValue Hs.Int64
                  | NumericValueDoubleValue Hs.Double
                  | NumericValueNan Hs.Bool
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named NumericValue where
        nameOf _ = (Hs.fromString "NumericValue")
 
instance HsJSONPB.ToSchema NumericValue where
        declareNamedSchema _
          = do let declare_long_value = HsJSONPB.declareSchemaRef
               numericValueLongValue <- declare_long_value Proxy.Proxy
               let _ = Hs.pure NumericValueLongValue <*>
                         HsJSONPB.asProxy declare_long_value
               let declare_double_value = HsJSONPB.declareSchemaRef
               numericValueDoubleValue <- declare_double_value Proxy.Proxy
               let _ = Hs.pure NumericValueDoubleValue <*>
                         HsJSONPB.asProxy declare_double_value
               let declare_nan = HsJSONPB.declareSchemaRef
               numericValueNan <- declare_nan Proxy.Proxy
               let _ = Hs.pure NumericValueNan <*> HsJSONPB.asProxy declare_nan
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "NumericValue",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("long_value", numericValueLongValue),
                                                        ("double_value", numericValueDoubleValue),
                                                        ("nan", numericValueNan)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data NumericGroup = NumericGroup{numericGroupOwner ::
                                 Hs.Maybe Concept.Concept,
                                 numericGroupNumber :: Hs.Maybe Answer.Numeric}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named NumericGroup where
        nameOf _ = (Hs.fromString "NumericGroup")
 
instance HsProtobuf.HasDefault NumericGroup
 
instance HsProtobuf.Message NumericGroup where
        encodeMessage _
          NumericGroup{numericGroupOwner = numericGroupOwner,
                       numericGroupNumber = numericGroupNumber}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Concept.Concept)
                      @(HsProtobuf.Nested Concept.Concept)
                      numericGroupOwner)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Answer.Numeric)
                      @(HsProtobuf.Nested Answer.Numeric)
                      numericGroupNumber))])
        decodeMessage _
          = (Hs.pure NumericGroup) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Concept.Concept))
                 @(_ (Hs.Maybe Concept.Concept))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Answer.Numeric))
                 @(_ (Hs.Maybe Answer.Numeric))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Concept")))
                (HsProtobuf.Single "owner")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Numeric")))
                (HsProtobuf.Single "number")
                []
                "")]
 
instance HsJSONPB.ToJSONPB NumericGroup where
        toJSONPB (NumericGroup f1 f2)
          = (HsJSONPB.object ["owner" .= f1, "number" .= f2])
        toEncodingPB (NumericGroup f1 f2)
          = (HsJSONPB.pairs ["owner" .= f1, "number" .= f2])
 
instance HsJSONPB.FromJSONPB NumericGroup where
        parseJSONPB
          = (HsJSONPB.withObject "NumericGroup"
               (\ obj ->
                  (Hs.pure NumericGroup) <*> obj .: "owner" <*> obj .: "number"))
 
instance HsJSONPB.ToJSON NumericGroup where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON NumericGroup where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema NumericGroup where
        declareNamedSchema _
          = do let declare_owner = HsJSONPB.declareSchemaRef
               numericGroupOwner <- declare_owner Proxy.Proxy
               let declare_number = HsJSONPB.declareSchemaRef
               numericGroupNumber <- declare_number Proxy.Proxy
               let _ = Hs.pure NumericGroup <*> HsJSONPB.asProxy declare_owner <*>
                         HsJSONPB.asProxy declare_number
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "NumericGroup",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("owner", numericGroupOwner),
                                                        ("number", numericGroupNumber)]}})