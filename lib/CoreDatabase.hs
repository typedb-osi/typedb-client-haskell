{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module CoreDatabase where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data CoreDatabaseManager = CoreDatabaseManager{}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabaseManager where
        nameOf _ = (Hs.fromString "CoreDatabaseManager")
 
instance HsProtobuf.HasDefault CoreDatabaseManager
 
instance HsProtobuf.Message CoreDatabaseManager where
        encodeMessage _ CoreDatabaseManager{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure CoreDatabaseManager)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB CoreDatabaseManager where
        toJSONPB (CoreDatabaseManager) = (HsJSONPB.object [])
        toEncodingPB (CoreDatabaseManager) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB CoreDatabaseManager where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabaseManager"
               (\ obj -> (Hs.pure CoreDatabaseManager)))
 
instance HsJSONPB.ToJSON CoreDatabaseManager where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabaseManager where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabaseManager where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabaseManager",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data CoreDatabaseManager_Contains = CoreDatabaseManager_Contains{}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabaseManager_Contains where
        nameOf _ = (Hs.fromString "CoreDatabaseManager_Contains")
 
instance HsProtobuf.HasDefault CoreDatabaseManager_Contains
 
instance HsProtobuf.Message CoreDatabaseManager_Contains where
        encodeMessage _ CoreDatabaseManager_Contains{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure CoreDatabaseManager_Contains)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB CoreDatabaseManager_Contains where
        toJSONPB (CoreDatabaseManager_Contains) = (HsJSONPB.object [])
        toEncodingPB (CoreDatabaseManager_Contains) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB CoreDatabaseManager_Contains where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabaseManager_Contains"
               (\ obj -> (Hs.pure CoreDatabaseManager_Contains)))
 
instance HsJSONPB.ToJSON CoreDatabaseManager_Contains where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabaseManager_Contains where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabaseManager_Contains where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabaseManager_Contains",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype CoreDatabaseManager_Contains_Req = CoreDatabaseManager_Contains_Req{coreDatabaseManager_Contains_ReqName
                                                                            :: Hs.Text}
                                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabaseManager_Contains_Req where
        nameOf _ = (Hs.fromString "CoreDatabaseManager_Contains_Req")
 
instance HsProtobuf.HasDefault CoreDatabaseManager_Contains_Req
 
instance HsProtobuf.Message CoreDatabaseManager_Contains_Req where
        encodeMessage _
          CoreDatabaseManager_Contains_Req{coreDatabaseManager_Contains_ReqName
                                             = coreDatabaseManager_Contains_ReqName}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   coreDatabaseManager_Contains_ReqName)])
        decodeMessage _
          = (Hs.pure CoreDatabaseManager_Contains_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "name")
                []
                "")]
 
instance HsJSONPB.ToJSONPB CoreDatabaseManager_Contains_Req where
        toJSONPB (CoreDatabaseManager_Contains_Req f1)
          = (HsJSONPB.object ["name" .= f1])
        toEncodingPB (CoreDatabaseManager_Contains_Req f1)
          = (HsJSONPB.pairs ["name" .= f1])
 
instance HsJSONPB.FromJSONPB CoreDatabaseManager_Contains_Req where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabaseManager_Contains_Req"
               (\ obj ->
                  (Hs.pure CoreDatabaseManager_Contains_Req) <*> obj .: "name"))
 
instance HsJSONPB.ToJSON CoreDatabaseManager_Contains_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabaseManager_Contains_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabaseManager_Contains_Req where
        declareNamedSchema _
          = do let declare_name = HsJSONPB.declareSchemaRef
               coreDatabaseManager_Contains_ReqName <- declare_name Proxy.Proxy
               let _ = Hs.pure CoreDatabaseManager_Contains_Req <*>
                         HsJSONPB.asProxy declare_name
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabaseManager_Contains_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("name",
                                                         coreDatabaseManager_Contains_ReqName)]}})
 
newtype CoreDatabaseManager_Contains_Res = CoreDatabaseManager_Contains_Res{coreDatabaseManager_Contains_ResContains
                                                                            :: Hs.Bool}
                                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabaseManager_Contains_Res where
        nameOf _ = (Hs.fromString "CoreDatabaseManager_Contains_Res")
 
instance HsProtobuf.HasDefault CoreDatabaseManager_Contains_Res
 
instance HsProtobuf.Message CoreDatabaseManager_Contains_Res where
        encodeMessage _
          CoreDatabaseManager_Contains_Res{coreDatabaseManager_Contains_ResContains
                                             = coreDatabaseManager_Contains_ResContains}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   coreDatabaseManager_Contains_ResContains)])
        decodeMessage _
          = (Hs.pure CoreDatabaseManager_Contains_Res) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "contains")
                []
                "")]
 
instance HsJSONPB.ToJSONPB CoreDatabaseManager_Contains_Res where
        toJSONPB (CoreDatabaseManager_Contains_Res f1)
          = (HsJSONPB.object ["contains" .= f1])
        toEncodingPB (CoreDatabaseManager_Contains_Res f1)
          = (HsJSONPB.pairs ["contains" .= f1])
 
instance HsJSONPB.FromJSONPB CoreDatabaseManager_Contains_Res where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabaseManager_Contains_Res"
               (\ obj ->
                  (Hs.pure CoreDatabaseManager_Contains_Res) <*> obj .: "contains"))
 
instance HsJSONPB.ToJSON CoreDatabaseManager_Contains_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabaseManager_Contains_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabaseManager_Contains_Res where
        declareNamedSchema _
          = do let declare_contains = HsJSONPB.declareSchemaRef
               coreDatabaseManager_Contains_ResContains <- declare_contains
                                                             Proxy.Proxy
               let _ = Hs.pure CoreDatabaseManager_Contains_Res <*>
                         HsJSONPB.asProxy declare_contains
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabaseManager_Contains_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("contains",
                                                         coreDatabaseManager_Contains_ResContains)]}})
 
data CoreDatabaseManager_Create = CoreDatabaseManager_Create{}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabaseManager_Create where
        nameOf _ = (Hs.fromString "CoreDatabaseManager_Create")
 
instance HsProtobuf.HasDefault CoreDatabaseManager_Create
 
instance HsProtobuf.Message CoreDatabaseManager_Create where
        encodeMessage _ CoreDatabaseManager_Create{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure CoreDatabaseManager_Create)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB CoreDatabaseManager_Create where
        toJSONPB (CoreDatabaseManager_Create) = (HsJSONPB.object [])
        toEncodingPB (CoreDatabaseManager_Create) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB CoreDatabaseManager_Create where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabaseManager_Create"
               (\ obj -> (Hs.pure CoreDatabaseManager_Create)))
 
instance HsJSONPB.ToJSON CoreDatabaseManager_Create where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabaseManager_Create where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabaseManager_Create where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabaseManager_Create",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype CoreDatabaseManager_Create_Req = CoreDatabaseManager_Create_Req{coreDatabaseManager_Create_ReqName
                                                                        :: Hs.Text}
                                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabaseManager_Create_Req where
        nameOf _ = (Hs.fromString "CoreDatabaseManager_Create_Req")
 
instance HsProtobuf.HasDefault CoreDatabaseManager_Create_Req
 
instance HsProtobuf.Message CoreDatabaseManager_Create_Req where
        encodeMessage _
          CoreDatabaseManager_Create_Req{coreDatabaseManager_Create_ReqName =
                                           coreDatabaseManager_Create_ReqName}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   coreDatabaseManager_Create_ReqName)])
        decodeMessage _
          = (Hs.pure CoreDatabaseManager_Create_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "name")
                []
                "")]
 
instance HsJSONPB.ToJSONPB CoreDatabaseManager_Create_Req where
        toJSONPB (CoreDatabaseManager_Create_Req f1)
          = (HsJSONPB.object ["name" .= f1])
        toEncodingPB (CoreDatabaseManager_Create_Req f1)
          = (HsJSONPB.pairs ["name" .= f1])
 
instance HsJSONPB.FromJSONPB CoreDatabaseManager_Create_Req where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabaseManager_Create_Req"
               (\ obj ->
                  (Hs.pure CoreDatabaseManager_Create_Req) <*> obj .: "name"))
 
instance HsJSONPB.ToJSON CoreDatabaseManager_Create_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabaseManager_Create_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabaseManager_Create_Req where
        declareNamedSchema _
          = do let declare_name = HsJSONPB.declareSchemaRef
               coreDatabaseManager_Create_ReqName <- declare_name Proxy.Proxy
               let _ = Hs.pure CoreDatabaseManager_Create_Req <*>
                         HsJSONPB.asProxy declare_name
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabaseManager_Create_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("name",
                                                         coreDatabaseManager_Create_ReqName)]}})
 
data CoreDatabaseManager_Create_Res = CoreDatabaseManager_Create_Res{}
                                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabaseManager_Create_Res where
        nameOf _ = (Hs.fromString "CoreDatabaseManager_Create_Res")
 
instance HsProtobuf.HasDefault CoreDatabaseManager_Create_Res
 
instance HsProtobuf.Message CoreDatabaseManager_Create_Res where
        encodeMessage _ CoreDatabaseManager_Create_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure CoreDatabaseManager_Create_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB CoreDatabaseManager_Create_Res where
        toJSONPB (CoreDatabaseManager_Create_Res) = (HsJSONPB.object [])
        toEncodingPB (CoreDatabaseManager_Create_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB CoreDatabaseManager_Create_Res where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabaseManager_Create_Res"
               (\ obj -> (Hs.pure CoreDatabaseManager_Create_Res)))
 
instance HsJSONPB.ToJSON CoreDatabaseManager_Create_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabaseManager_Create_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabaseManager_Create_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabaseManager_Create_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data CoreDatabaseManager_All = CoreDatabaseManager_All{}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabaseManager_All where
        nameOf _ = (Hs.fromString "CoreDatabaseManager_All")
 
instance HsProtobuf.HasDefault CoreDatabaseManager_All
 
instance HsProtobuf.Message CoreDatabaseManager_All where
        encodeMessage _ CoreDatabaseManager_All{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure CoreDatabaseManager_All)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB CoreDatabaseManager_All where
        toJSONPB (CoreDatabaseManager_All) = (HsJSONPB.object [])
        toEncodingPB (CoreDatabaseManager_All) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB CoreDatabaseManager_All where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabaseManager_All"
               (\ obj -> (Hs.pure CoreDatabaseManager_All)))
 
instance HsJSONPB.ToJSON CoreDatabaseManager_All where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabaseManager_All where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabaseManager_All where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabaseManager_All",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data CoreDatabaseManager_All_Req = CoreDatabaseManager_All_Req{}
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabaseManager_All_Req where
        nameOf _ = (Hs.fromString "CoreDatabaseManager_All_Req")
 
instance HsProtobuf.HasDefault CoreDatabaseManager_All_Req
 
instance HsProtobuf.Message CoreDatabaseManager_All_Req where
        encodeMessage _ CoreDatabaseManager_All_Req{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure CoreDatabaseManager_All_Req)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB CoreDatabaseManager_All_Req where
        toJSONPB (CoreDatabaseManager_All_Req) = (HsJSONPB.object [])
        toEncodingPB (CoreDatabaseManager_All_Req) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB CoreDatabaseManager_All_Req where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabaseManager_All_Req"
               (\ obj -> (Hs.pure CoreDatabaseManager_All_Req)))
 
instance HsJSONPB.ToJSON CoreDatabaseManager_All_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabaseManager_All_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabaseManager_All_Req where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabaseManager_All_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype CoreDatabaseManager_All_Res = CoreDatabaseManager_All_Res{coreDatabaseManager_All_ResNames
                                                                  :: Hs.Vector Hs.Text}
                                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabaseManager_All_Res where
        nameOf _ = (Hs.fromString "CoreDatabaseManager_All_Res")
 
instance HsProtobuf.HasDefault CoreDatabaseManager_All_Res
 
instance HsProtobuf.Message CoreDatabaseManager_All_Res where
        encodeMessage _
          CoreDatabaseManager_All_Res{coreDatabaseManager_All_ResNames =
                                        coreDatabaseManager_All_ResNames}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                      coreDatabaseManager_All_ResNames))])
        decodeMessage _
          = (Hs.pure CoreDatabaseManager_All_Res) <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
                 @(_ (Hs.Vector Hs.Text))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated HsProtobuf.String)
                (HsProtobuf.Single "names")
                []
                "")]
 
instance HsJSONPB.ToJSONPB CoreDatabaseManager_All_Res where
        toJSONPB (CoreDatabaseManager_All_Res f1)
          = (HsJSONPB.object ["names" .= f1])
        toEncodingPB (CoreDatabaseManager_All_Res f1)
          = (HsJSONPB.pairs ["names" .= f1])
 
instance HsJSONPB.FromJSONPB CoreDatabaseManager_All_Res where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabaseManager_All_Res"
               (\ obj ->
                  (Hs.pure CoreDatabaseManager_All_Res) <*> obj .: "names"))
 
instance HsJSONPB.ToJSON CoreDatabaseManager_All_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabaseManager_All_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabaseManager_All_Res where
        declareNamedSchema _
          = do let declare_names = HsJSONPB.declareSchemaRef
               coreDatabaseManager_All_ResNames <- declare_names Proxy.Proxy
               let _ = Hs.pure CoreDatabaseManager_All_Res <*>
                         HsJSONPB.asProxy declare_names
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabaseManager_All_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("names",
                                                         coreDatabaseManager_All_ResNames)]}})
 
data CoreDatabase = CoreDatabase{}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabase where
        nameOf _ = (Hs.fromString "CoreDatabase")
 
instance HsProtobuf.HasDefault CoreDatabase
 
instance HsProtobuf.Message CoreDatabase where
        encodeMessage _ CoreDatabase{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure CoreDatabase)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB CoreDatabase where
        toJSONPB (CoreDatabase) = (HsJSONPB.object [])
        toEncodingPB (CoreDatabase) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB CoreDatabase where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabase"
               (\ obj -> (Hs.pure CoreDatabase)))
 
instance HsJSONPB.ToJSON CoreDatabase where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabase where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabase where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabase",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data CoreDatabase_Schema = CoreDatabase_Schema{}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabase_Schema where
        nameOf _ = (Hs.fromString "CoreDatabase_Schema")
 
instance HsProtobuf.HasDefault CoreDatabase_Schema
 
instance HsProtobuf.Message CoreDatabase_Schema where
        encodeMessage _ CoreDatabase_Schema{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure CoreDatabase_Schema)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB CoreDatabase_Schema where
        toJSONPB (CoreDatabase_Schema) = (HsJSONPB.object [])
        toEncodingPB (CoreDatabase_Schema) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB CoreDatabase_Schema where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabase_Schema"
               (\ obj -> (Hs.pure CoreDatabase_Schema)))
 
instance HsJSONPB.ToJSON CoreDatabase_Schema where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabase_Schema where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabase_Schema where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabase_Schema",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype CoreDatabase_Schema_Req = CoreDatabase_Schema_Req{coreDatabase_Schema_ReqName
                                                          :: Hs.Text}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabase_Schema_Req where
        nameOf _ = (Hs.fromString "CoreDatabase_Schema_Req")
 
instance HsProtobuf.HasDefault CoreDatabase_Schema_Req
 
instance HsProtobuf.Message CoreDatabase_Schema_Req where
        encodeMessage _
          CoreDatabase_Schema_Req{coreDatabase_Schema_ReqName =
                                    coreDatabase_Schema_ReqName}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   coreDatabase_Schema_ReqName)])
        decodeMessage _
          = (Hs.pure CoreDatabase_Schema_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "name")
                []
                "")]
 
instance HsJSONPB.ToJSONPB CoreDatabase_Schema_Req where
        toJSONPB (CoreDatabase_Schema_Req f1)
          = (HsJSONPB.object ["name" .= f1])
        toEncodingPB (CoreDatabase_Schema_Req f1)
          = (HsJSONPB.pairs ["name" .= f1])
 
instance HsJSONPB.FromJSONPB CoreDatabase_Schema_Req where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabase_Schema_Req"
               (\ obj -> (Hs.pure CoreDatabase_Schema_Req) <*> obj .: "name"))
 
instance HsJSONPB.ToJSON CoreDatabase_Schema_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabase_Schema_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabase_Schema_Req where
        declareNamedSchema _
          = do let declare_name = HsJSONPB.declareSchemaRef
               coreDatabase_Schema_ReqName <- declare_name Proxy.Proxy
               let _ = Hs.pure CoreDatabase_Schema_Req <*>
                         HsJSONPB.asProxy declare_name
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabase_Schema_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("name", coreDatabase_Schema_ReqName)]}})
 
newtype CoreDatabase_Schema_Res = CoreDatabase_Schema_Res{coreDatabase_Schema_ResSchema
                                                          :: Hs.Text}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabase_Schema_Res where
        nameOf _ = (Hs.fromString "CoreDatabase_Schema_Res")
 
instance HsProtobuf.HasDefault CoreDatabase_Schema_Res
 
instance HsProtobuf.Message CoreDatabase_Schema_Res where
        encodeMessage _
          CoreDatabase_Schema_Res{coreDatabase_Schema_ResSchema =
                                    coreDatabase_Schema_ResSchema}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   coreDatabase_Schema_ResSchema)])
        decodeMessage _
          = (Hs.pure CoreDatabase_Schema_Res) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "schema")
                []
                "")]
 
instance HsJSONPB.ToJSONPB CoreDatabase_Schema_Res where
        toJSONPB (CoreDatabase_Schema_Res f1)
          = (HsJSONPB.object ["schema" .= f1])
        toEncodingPB (CoreDatabase_Schema_Res f1)
          = (HsJSONPB.pairs ["schema" .= f1])
 
instance HsJSONPB.FromJSONPB CoreDatabase_Schema_Res where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabase_Schema_Res"
               (\ obj -> (Hs.pure CoreDatabase_Schema_Res) <*> obj .: "schema"))
 
instance HsJSONPB.ToJSON CoreDatabase_Schema_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabase_Schema_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabase_Schema_Res where
        declareNamedSchema _
          = do let declare_schema = HsJSONPB.declareSchemaRef
               coreDatabase_Schema_ResSchema <- declare_schema Proxy.Proxy
               let _ = Hs.pure CoreDatabase_Schema_Res <*>
                         HsJSONPB.asProxy declare_schema
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabase_Schema_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("schema",
                                                         coreDatabase_Schema_ResSchema)]}})
 
data CoreDatabase_Delete = CoreDatabase_Delete{}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabase_Delete where
        nameOf _ = (Hs.fromString "CoreDatabase_Delete")
 
instance HsProtobuf.HasDefault CoreDatabase_Delete
 
instance HsProtobuf.Message CoreDatabase_Delete where
        encodeMessage _ CoreDatabase_Delete{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure CoreDatabase_Delete)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB CoreDatabase_Delete where
        toJSONPB (CoreDatabase_Delete) = (HsJSONPB.object [])
        toEncodingPB (CoreDatabase_Delete) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB CoreDatabase_Delete where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabase_Delete"
               (\ obj -> (Hs.pure CoreDatabase_Delete)))
 
instance HsJSONPB.ToJSON CoreDatabase_Delete where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabase_Delete where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabase_Delete where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabase_Delete",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
newtype CoreDatabase_Delete_Req = CoreDatabase_Delete_Req{coreDatabase_Delete_ReqName
                                                          :: Hs.Text}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabase_Delete_Req where
        nameOf _ = (Hs.fromString "CoreDatabase_Delete_Req")
 
instance HsProtobuf.HasDefault CoreDatabase_Delete_Req
 
instance HsProtobuf.Message CoreDatabase_Delete_Req where
        encodeMessage _
          CoreDatabase_Delete_Req{coreDatabase_Delete_ReqName =
                                    coreDatabase_Delete_ReqName}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   coreDatabase_Delete_ReqName)])
        decodeMessage _
          = (Hs.pure CoreDatabase_Delete_Req) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "name")
                []
                "")]
 
instance HsJSONPB.ToJSONPB CoreDatabase_Delete_Req where
        toJSONPB (CoreDatabase_Delete_Req f1)
          = (HsJSONPB.object ["name" .= f1])
        toEncodingPB (CoreDatabase_Delete_Req f1)
          = (HsJSONPB.pairs ["name" .= f1])
 
instance HsJSONPB.FromJSONPB CoreDatabase_Delete_Req where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabase_Delete_Req"
               (\ obj -> (Hs.pure CoreDatabase_Delete_Req) <*> obj .: "name"))
 
instance HsJSONPB.ToJSON CoreDatabase_Delete_Req where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabase_Delete_Req where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabase_Delete_Req where
        declareNamedSchema _
          = do let declare_name = HsJSONPB.declareSchemaRef
               coreDatabase_Delete_ReqName <- declare_name Proxy.Proxy
               let _ = Hs.pure CoreDatabase_Delete_Req <*>
                         HsJSONPB.asProxy declare_name
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabase_Delete_Req",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("name", coreDatabase_Delete_ReqName)]}})
 
data CoreDatabase_Delete_Res = CoreDatabase_Delete_Res{}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CoreDatabase_Delete_Res where
        nameOf _ = (Hs.fromString "CoreDatabase_Delete_Res")
 
instance HsProtobuf.HasDefault CoreDatabase_Delete_Res
 
instance HsProtobuf.Message CoreDatabase_Delete_Res where
        encodeMessage _ CoreDatabase_Delete_Res{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure CoreDatabase_Delete_Res)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB CoreDatabase_Delete_Res where
        toJSONPB (CoreDatabase_Delete_Res) = (HsJSONPB.object [])
        toEncodingPB (CoreDatabase_Delete_Res) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB CoreDatabase_Delete_Res where
        parseJSONPB
          = (HsJSONPB.withObject "CoreDatabase_Delete_Res"
               (\ obj -> (Hs.pure CoreDatabase_Delete_Res)))
 
instance HsJSONPB.ToJSON CoreDatabase_Delete_Res where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CoreDatabase_Delete_Res where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema CoreDatabase_Delete_Res where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CoreDatabase_Delete_Res",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})